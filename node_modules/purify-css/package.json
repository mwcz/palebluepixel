{
  "name": "purify-css",
  "version": "1.0.17",
  "description": "Removed unused css. Compatible with single-page apps.",
  "main": "./src/purifycss.js",
  "dependencies": {
    "clean-css": "^3.2.10",
    "gonzales": "^1.0.7",
    "underscore": "^1.8.3",
    "yargs": "^3.10.0"
  },
  "devDependencies": {
    "chai": "^3.0.0",
    "mocha": "^2.2.5"
  },
  "scripts": {
    "test": "node ./node_modules/mocha/bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/purifycss/purify-css.git"
  },
  "keywords": [
    "optimize",
    "css",
    "remove",
    "unused"
  ],
  "files": [
    "bin",
    "src",
    "LICENSE",
    "package.json",
    "README.md"
  ],
  "author": {
    "name": "Kenny Tran, Matthew Rourke, Phoebe Li"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/purifycss/purifycss/issues"
  },
  "bin": {
    "purifycss": "./bin/purifycss"
  },
  "homepage": "https://github.com/purifycss/purifycss",
  "readme": "# PurifyCSS\n\n* Detects which CSS classes your app is using and creates a file without the unused CSS.\n\nAble to also detect **dynamically-loaded CSS classes** in your javascript.\n\nPurifyCSS has been designed from the beginning with **single-page apps** in mind.\n\n*This is in addition to working with static page apps.*\n\n# Potential reduction\n* Bootstrap file: ~140k characters.\n* Average Bootstrap usage: ~40% (at most)\n* Minified Bootstrap: ~117k characters.\n* Purified + Minified Bootstrap: **~27k characters**\n\n# Install\n```\nnpm install purify-css\n```\n\n#Able to detect\n* Anytime your class name is intact in your code.\n\n##### Example for the class ```button-active```\n``` html\n  <!-- html -->\n  <!-- class directly on element -->\n  <div class=\"button-active\">click</div>\n```\n\n``` javascript\n  // javascript\n  // this example is jquery, but anytime your class name \n  // is together in your javascript, it will work\n  $(button).addClass('button-active');\n```\n\n* Dynamically created classes\n\n##### Example for the class ```button-active```\n``` javascript\n  // can detect even if class is split\n  var half = 'button-';\n  $(button).addClass(half + 'active');\n  \n  // can detect even if class is joined\n  var dynamicClass = ['button', 'active'].join('-');\n  $(button).addClass(dynamicClass);\n```\n\n* **All** javascript frameworks\n\n##### Example for the class ```angular-button```\n``` javascript\n  <!-- angular template -->\n  <div ng-class=\"'angular' + '-button'\"></div>\n```\n\n##### Example for the class ```commentBox```\n```javascript\n  // react component\n  var CommentBox = React.createClass({\n    render: function() {\n      return (\n        <div className=\"commentBox\">\n          Hello, world! I am a CommentBox.\n        </div>\n      );\n    }\n  });\n  React.render(\n    <CommentBox />,\n    document.getElementById('content')\n  );\n```\n\n### PurifyCSS works with all Javascript frameworks.\n\n# API\n```javascript\nvar purify = require('purify-css');\n\npurify(content, css, options, callback);\n```\n\n## ```content```\n##### Type: ```Array``` or ```String```\n\n**```Array```** of filepaths to the files you want to search through for used classes (HTML, Javascripts, Templates, anything that relates to CSS classes)\n\n**```String```** of content you want us to look for used classes.\n\n\n## ```css```\n##### Type: ```Array``` or ```String```\n\n**```Array```** of filepaths to the css files you want us to filter.\n\n**```String```** of css you want us to filter.\n\n\n##```options (optional)```\n##### Type: ```Object```\n\n##### Properties of options object:\n\n* **```minify:```** Set to ```true``` to minify. Default: ```false```\n\n* **```output:```** Filepath to write purified css to. Returns raw string if ```false```. Default: ```false```\n\n* **```info:```** Logs info on how much css was removed if ```true```. Default: ```false```\n\n##```callback (optional)```\n##### Type: ```Function```\n\n##### Example\n``` javascript\npurify(content, css, options, function(output){\n  console.log(output, ' is the result of purify');\n});\n```\n\n##### Example without options\n``` javascript\npurify(content, css, function(output){\n  console.log('callback without options');\n});\n```\n\n## Command Line Tool\n\n```\n$ npm install -g purify-css\n```\n\n```\n$ purifycss\nusage: purifycss <css> <content> [option ...]\n\noptions:\n --min                Minify CSS\n --out [filepath]     Filepath to write purified css to\n --info               Logs info on how much css was removed\n\n -h, --help           Prints help (this message) and exits\n```\n\n# At build time\n[Grunt](https://github.com/purifycss/grunt-purify-css)\n\n",
  "readmeFilename": "README.md",
  "_id": "purify-css@1.0.17",
  "dist": {
    "shasum": "796d46471edaa0647de732d4897bbf4793646772"
  },
  "_from": "purify-css@",
  "_resolved": "https://registry.npmjs.org/purify-css/-/purify-css-1.0.17.tgz"
}
