<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pale Blue Pixel</title><link href="https://palebluepixel.org/" rel="alternate"></link><link href="http://localhost:8000/feeds/atom.xml" rel="self"></link><id>https://palebluepixel.org/</id><updated>2017-10-12T00:00:00-04:00</updated><entry><title>geekSPARK 2017</title><link href="https://palebluepixel.org/2017/09/17/geekspark-2017/" rel="alternate"></link><published>2017-09-17T00:00:00-04:00</published><updated>2017-09-17T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2017-09-17:/2017/09/17/geekspark-2017/</id><summary type="html">&lt;p&gt;The SPARKcon creativity festival: on the geeky side.&lt;/p&gt;</summary><content type="html">&lt;p&gt;geekSPARK is a showcase of creative use of technology, taking place each year during the &lt;a href="https://sparkcon.com"&gt;SPARKcon&lt;/a&gt; art festival.  What lies below is a summary of the festivities at geekSPARK 2017.&lt;/p&gt;
&lt;p&gt;&lt;img alt="geekSPARK logo" src="https://palebluepixel.org/2017/09/17/geekspark-2017/geekSPARK-icon.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rc-speedway"&gt;RC Speedway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#virtual-reality"&gt;Virtual Reality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#all-things-led"&gt;All Things LED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fire-tubes"&gt;Fire Tubes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mushroom-hunters"&gt;Mushroom Hunters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#digital-motion"&gt;Digital Motion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3d-printing"&gt;3D Printing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-next"&gt;What's next?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#special-thanks"&gt;Special thanks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="rc-speedway"&gt;RC Speedway&lt;/h2&gt;
&lt;p&gt;The RC Speedway was an incredibly fun creation by maker extraordinaire Bill Culverhouse from &lt;a href="https://splatspace.org/"&gt;SplatSpace&lt;/a&gt;.  Bill mounted cameras on the RC cars which fed wirelessly into first-person displays.  The cars were &lt;em&gt;fast&lt;/em&gt;, and the sensation of speed from the first-person view was exhilirating.  I'm kicking myself for not taking any video.&lt;/p&gt;
&lt;div class="beside"&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/rc-car.jpg" alt="photo of RC car" /&gt;
        &lt;figcaption&gt;The blue car&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/racetrack-copy.jpg" alt="photo of RC race track" /&gt;
        &lt;figcaption&gt;The race track&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/rc-vid.jpg" alt="photo of RC controller and screen" /&gt;
        &lt;figcaption&gt;The first-person racing screen&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/rc1.jpg" alt="photo of RC speeday" /&gt;
        &lt;figcaption&gt;Yes, there was a &lt;i&gt;ramp&lt;/i&gt;!&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id="virtual-reality"&gt;Virtual Reality&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://memorymachinecreative.com/"&gt;Tyler Jackson&lt;/a&gt; brought his immersive art piece, &lt;em&gt;Before the War&lt;/em&gt;.  In it, you explore a series of thoughtful, atmospheric vignettes.  This is the first time VR has made an appearance at geekSPARK and I think it's here to stay.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/tyler-vr.jpg" alt="Tyler Jackson's &amp;quot;Before the War&amp;quot; VR exhibit" /&gt;&lt;/figure&gt;

&lt;p&gt;I recommend reading &lt;a href="https://www.indyweek.com/indyweek/tyler-jacksons-exhibit-at-lump-scouts-the-next-frontier-for-artists-virtual-reality/"&gt;the INDY's review of Before the War&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="all-things-led"&gt;All Things LED&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://maniacallabs.com/"&gt;Maniacal Labs&lt;/a&gt; returned again, with a bank of dazzling LED displays.  Some were old favorites, but among their new creations were an infinity mirror, a light saber, and an LED Pole (the &lt;em&gt;LPD8806Pole&lt;/em&gt;).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/ml.jpg" alt="photo of Maniacal Labs' LED creations" /&gt;
    &lt;figcaption&gt;Maniacal Labs' LED displays.  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Another new creation was a 1D pong game.  This was a blast to play.  To play, you tap your button to at the exact moment the puck is passing over your paddle.  If you succeed, the puck is sent shooting to the other side, increasing in speed with every deflection.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/1dpong.jpg" alt="photo of Maniacal Labs' 1D pong game" /&gt;
    &lt;figcaption&gt;1D pong: play by tapping a button at just the right time to deflect the "ball".&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;A few trusted friends were allowed to hold the light saber!&lt;/p&gt;
&lt;video autoplay controls loop&gt;
    &lt;source src="https://palebluepixel.org/2017/09/17/geekspark-2017/spin-saber.mp4" /&gt;
    &lt;source src="https://palebluepixel.org/2017/09/17/geekspark-2017/spin-saber.webm" /&gt;
&lt;/video&gt;

&lt;p&gt;Check out &lt;a href="http://maniacallabs.com/sparkcon-2017/"&gt;this awesome summary&lt;/a&gt; of all the gear they brought.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="fire-tubes"&gt;Fire Tubes&lt;/h2&gt;
&lt;p&gt;Ben Pritchett returned this year with Fire Tubes and a remixed soundtrack.  In essence, this exhibit is four &lt;a href="https://www.youtube.com/watch?v=ynqzeIYA7Iw"&gt;Ruben's tubes&lt;/a&gt; put together to form a four-piece organ whose fiery plumes dance with the music being played.  Ben mixes music to isolate each instrument, so you can see, for example, the drum beat reflected in flame.&lt;/p&gt;
&lt;video style="margin: 0 auto" autoplay controls loop&gt;
    &lt;source src="https://palebluepixel.org/2017/09/17/geekspark-2017/fire-table-anim.mp4" /&gt;
    &lt;source src="https://palebluepixel.org/2017/09/17/geekspark-2017/fire-table-anim.webm" /&gt;
&lt;/video&gt;

&lt;hr /&gt;
&lt;h2 id="mushroom-hunters"&gt;Mushroom Hunters&lt;/h2&gt;
&lt;p&gt;A fresh, fungusy addition to geekSPARK!  Geekery need not be constrained to digital hobbies.  Anna and Krystal, devoted mushroom enthusiasts, brought a huge haul of mushrooms to the event and educated visitors about mushroom eating, hunting, and biology.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/mushrooms.jpg" alt="mushroom booth" /&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;h2 id="digital-motion"&gt;Digital Motion&lt;/h2&gt;
&lt;p&gt;Digital Motion is a perennial geekSPARK exhibit featuring interactive digital displays.  This year's display is powered by &lt;a href="http://kimotion.xyz"&gt;Kimotion&lt;/a&gt;.  Using a variety of sensors, we use visitors' movement to control the display.  There are many displays, ranging from interactive art to a full-blown videogame with a leaderboard (the Fish Game!).&lt;/p&gt;
&lt;video autoplay controls loop&gt;
    &lt;source src="https://palebluepixel.org/2017/09/17/geekspark-2017/quick-clip.mp4" /&gt;
    &lt;source src="https://palebluepixel.org/2017/09/17/geekspark-2017/quick-clip.webm" /&gt;
&lt;/video&gt;

&lt;p&gt;Learn more at &lt;a href="http://kimotion.xyz"&gt;Kimotion.xyz&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="3d-printing"&gt;3D Printing&lt;/h2&gt;
&lt;p&gt;3D printed parts played a role in most of the exhibits this year.  The RC Speedway's camera mounts, Digital Motion's hand sensor mount, a slew of bits and bobs from All Things LED, all used 3D printed parts.  Most of all, Bill brought in some 3D printers to teach the crowd about printing, including a gigantic printed T-Rex.&lt;/p&gt;
&lt;div class="beside"&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/rc-cam.jpg" alt="photo of RC car camera mount" /&gt;
        &lt;figcaption&gt;3D-printed camera mount for the RC Speedway&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/trex.jpeg" alt="a huge 3d-printed t-rex" /&gt;
        &lt;figcaption&gt;A huge 3D-printed T-Rex&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id="whats-next"&gt;What's next?&lt;/h2&gt;
&lt;p&gt;geekSPARK 2018!  The two big goals for next year are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A prime location&lt;/li&gt;
&lt;li&gt;Excellent signage&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The current location, Red Hat Annex, has served us very well (thanks &lt;a href="https://redhat.com"&gt;Red Hat&lt;/a&gt;!), however it's far enough from the center of SPARKcon that we only see a tiny fraction of the 60,000 visitors.  Findability is very important at a large art festival, and we're exploring options for a more central location next year.&lt;/p&gt;
&lt;p&gt;Signage this year was okay, but a bit rushed.  Even with the maps, many visitors weren't able to find our locations.  Next year's signage will be simple and clear!&lt;/p&gt;
&lt;div class="beside"&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/flyer.png" alt="geekSPARK flyer" /&gt;
        &lt;figcaption&gt;geekSPARK 2017 flyer&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/09/17/geekspark-2017/poster.jpg" alt="geekSPARK poster" /&gt;
        &lt;figcaption&gt;geekSPARK 2017 poster&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id="special-thanks"&gt;Special thanks&lt;/h2&gt;
&lt;p&gt;Immense appreciation goes out to all the SPARKcon and geekSPARK volunteers who made the event happen.  In no particular order (randomly sorted, in fact), here is a list of everyone involved with geekSPARK 2017, or geekSPARKs of the past.&lt;/p&gt;
&lt;ul style="display: grid; grid-template-columns: repeat(auto-fill,minmax(200px,1fr));"&gt;
    &lt;li&gt;Jared&lt;/li&gt;
    &lt;li&gt;Krystal&lt;/li&gt;
    &lt;li&gt;Adam&lt;/li&gt;
    &lt;li&gt;Brandon&lt;/li&gt;
    &lt;li&gt;Ian&lt;/li&gt;
    &lt;li&gt;Dan&lt;/li&gt;
    &lt;li&gt;Tyler&lt;/li&gt;
    &lt;li&gt;Eric&lt;/li&gt;
    &lt;li&gt;Mark&lt;/li&gt;
    &lt;li&gt;Maniacal Labs&lt;/li&gt;
    &lt;li&gt;Phil&lt;/li&gt;
    &lt;li&gt;Justis&lt;/li&gt;
    &lt;li&gt;Cas&lt;/li&gt;
    &lt;li&gt;Anna&lt;/li&gt;
    &lt;li&gt;Bill&lt;/li&gt;
    &lt;li&gt;Latisha&lt;/li&gt;
    &lt;li&gt;Ben&lt;/li&gt;
    &lt;li&gt;Truett&lt;/li&gt;
    &lt;li&gt;Homa&lt;/li&gt;
&lt;/ul&gt;</content><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="kimotion"></category></entry><entry><title>In Orange Light</title><link href="https://palebluepixel.org/2017/08/04/in-orange-light/" rel="alternate"></link><published>2017-08-04T00:00:00-04:00</published><updated>2017-08-04T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2017-08-04:/2017/08/04/in-orange-light/</id><summary type="html">&lt;p&gt;A WebGL-based visualizer for LED displays.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Three years ago, surrounded by monitors in a dark, blue-hued room, a particular screen caught my eye.  My girlfriend's (now wife's) eye was caught by the same screen, and we crossed the room to investigate.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://palebluepixel.org/2017/08/04/in-orange-light/kr0-emp.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We were visiting the &lt;em&gt;Indie Game Revolution&lt;/em&gt; exhibit at EMP in Seattle, and what we found on that screen was Scene I, Act I of &lt;a href="http://kentuckyroutezero.com/"&gt;Kentucky Route Zero&lt;/a&gt;.  It took me three years, but I finally rediscovered KR0 a few weeks ago.  Now, having (well, nearly) finished it, I'm convinced it's a masterpiece.  The game's atmosphere is so rich, so effortlessly gripping, that &lt;em&gt;actually being there&lt;/em&gt; would be less compelling.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://palebluepixel.org/2017/08/04/in-orange-light/kr0.jpg"&gt;&lt;/p&gt;
&lt;p&gt;And they accomplished all that with 3D models my Amiga 500 could have rendered (sans lighting).  Strategic omission of detail really has a way of setting fire to an imagination.&lt;/p&gt;
&lt;p&gt;The atmosphere and storytelling from that game have been rolling around in my mind since then.  With Ludum Dare 39 approaching, I'd decided to try my novice hand at recreating some of its techniques.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ludum-dare-39"&gt;Ludum Dare 39&lt;/h2&gt;
&lt;p&gt;Jared and I have participated in the Ludum Dare &lt;em&gt;Jam&lt;/em&gt; &lt;a href="http://ludumdare.com/compo/ludum-dare-35/?action=preview&amp;amp;uid=91554"&gt;three&lt;/a&gt; &lt;a href="http://ludumdare.com/compo/ludum-dare-37/?action=preview&amp;amp;uid=91554"&gt;whole&lt;/a&gt; &lt;a href="https://ldjam.com/events/ludum-dare/38/pity-about-earth"&gt;times&lt;/a&gt;, and we've been growing curious about the &lt;em&gt;Compo&lt;/em&gt; (aka, Hard Mode).  Jared decided to sit this one out, so I took the opportunity to enter my first Compo, which is an exclusively solo endeavor.  The theme was "Running out of power".  Without any further ado, here is my game, &lt;a href="http://scripta.co/in-orange-light/"&gt;In Orange Light&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://palebluepixel.org/2017/08/04/in-orange-light/in-orange-light-scenery.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ldjam.com/events/ludum-dare/39/in-orange-light"&gt;View the Ludum Dare entry&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="day-1-of-2-the-foundation"&gt;Day 1 of 2, the foundation&lt;/h2&gt;
&lt;p&gt;With Kentucky Route Zero fresh in my mind, I wanted to branch out from my usual arcade-style game and try to make something a little more moody and atmospheric.  Based on the "running out of power" theme, my idea was a survival game where you try to balance scant resources to survive winter in a frigid mountain cabin.&lt;/p&gt;
&lt;p&gt;To get the math out of the way, I spent the first day implementing a basic simulation of warmth, food, fuel, a generator, heater, and all their interactions.  I also created some placeholder art, so I'd have something to click on and cringe at.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://palebluepixel.org/2017/08/04/in-orange-light/placeholder-art.png"&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="day-2-of-2-some-polish"&gt;Day 2 of 2, some polish&lt;/h2&gt;
&lt;p&gt;I spent about half of Sunday improving the visuals, and the other half fixing bugs in the simulation I'd created on Saturday.&lt;/p&gt;
&lt;h3 id="making-it-mountainous"&gt;Making it mountainous&lt;/h3&gt;
&lt;p&gt;Starting with a set of rectangles, and using a photo of the Blue Ridge Mountains as a reference, I tweaked vector paths into something resembling mountains.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://palebluepixel.org/2017/08/04/in-orange-light/making-mountains.gif"&gt;&lt;/p&gt;
&lt;h3 id="sunrise-day-sunset-night-repeat"&gt;Sunrise, day, sunset, night, repeat&lt;/h3&gt;
&lt;p&gt;The plain blue mountains lacked luster, and a day/night cycle seemed like a fitting way to bring them some life.&lt;/p&gt;
&lt;style type="text/css" rel="stylesheet"&gt;
#iol-sky-demo &gt; canvas {
    margin: 0 auto;
}
&lt;/style&gt;

&lt;figure id="iol-sky-demo"&gt;&lt;/figure&gt;

&lt;p&gt;I made the mountain sprites greyscale and multiplied them against two very tall, sliding sky gradients.  Here's a visual of the technique, zoomed way out so you can see the two sky images playing leap frog as they slide up the screen. (This is a live demo, not a video.)&lt;/p&gt;
&lt;p&gt;To see the full sky sunrise and sunset, give &lt;a href="http://scripta.co/in-orange-light/"&gt;In Orange Light&lt;/a&gt; a play, but don't dismiss the text.  That way, time will be paused and you won't starve of freeze.&lt;/p&gt;
&lt;h3 id="sound-effects"&gt;Sound effects&lt;/h3&gt;
&lt;p&gt;The game has a few sound effects.  The heater's electric hum, the generator's rumble, and the growing, clawing sound of hunger.  To create these, I used &lt;a href="http://beepbox.co"&gt;BeepBox&lt;/a&gt;, a chiptune music sequencer.  It's meant for music, but I was able to coax some sound effects out of it.  Here are two of the sound effects, hit &lt;code&gt;Play&lt;/code&gt; to hear them through the BeepBox synthesizer live on this page.&lt;/p&gt;
&lt;div id="sfx" class="beside"&gt;
    &lt;p&gt;
        &lt;button id="generator"&gt;Play&lt;/button&gt; Generator  &lt;small&gt;&lt;a href="http://beepbox.co/#5s7k0l00e00t7m1a7g00j0i1r1w81445111f30222000d11000101c00023000h40000000v20214050o3000b8p1xkNVAWE6CCIdttddsB1xkn3qmrx-GabxL0"&gt;(view in BeepBox)&lt;/a&gt;&lt;/small&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;button id="heater"&gt;Play&lt;/button&gt; Heater  &lt;small&gt;&lt;a href="http://beepbox.co/#5s7k0l00e00t7m1a7g00j0i1r1w81445111f30222000d11000101c00023000h40000000v20214050o3000bgp1xkNVAWE6CCIdttddsB1xkn3qmrx-GabxL0"&gt;(view in BeepBox)&lt;/a&gt;&lt;/small&gt;
    &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;BeepBox is a very approachable sequencer.  Here's what the "generator ran out of fuel" sound effect looks like inside the tool.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://palebluepixel.org/2017/08/04/in-orange-light/generator-off.png" alt="A screenshot of the 'generator fuel empty' sound in BeepBox"&gt;&lt;/p&gt;
&lt;style&gt;
    #sfx button {
        padding: 10px;
        text-align: center;
        font-family: monospace;
    }
&lt;/style&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/beepbox_synth.js"&gt;&lt;/script&gt;

&lt;script&gt;
    var generator = new beepbox.Synth("5s7k0l00e00t7m1a7g00j0i1r1w81445111f30222000d11000101c00023000h40000000v20214050o3000b8p1xkNVAWE6CCIdttddsB1xkn3qmrx-GabxL0");
    var heater = new beepbox.Synth("5s7k0l00e00t7m1a7g00j0i1r1w81445111f30222000d11000101c00023000h40000000v20214050o3000bgp1xkNVAWE6CCIdttddsB1xkn3qmrx-GabxL0");

    var genEl = document.querySelector('#generator');
    var heatEl = document.querySelector('#heater');

    genEl.addEventListener('click', function () {
        if (generator.playing) {
            genEl.classList.remove('on');
            genEl.textContent = 'Play ';
            generator.pause();
        }
        else {
            genEl.classList.add('on');
            genEl.textContent = 'Pause';
            generator.play();
        }
    });
    heatEl.addEventListener('click', function () {
        if (heater.playing) {
            heatEl.classList.remove('on');
            heatEl.textContent = 'Play ';
            heater.pause();
        }
        else {
            heatEl.classList.add('on');
            heatEl.textContent = 'Pause';
            heater.play();
        }
    });
&lt;/script&gt;

&lt;hr /&gt;
&lt;h2 id="lessons-learned"&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;First, working solo is much harder than working on a team, but not only because a team can get more work done.  Maintaining the sense of urgency, productivity, and focus was nearly impossible without a co-conspirator.&lt;/p&gt;
&lt;p&gt;Second, system-of-numbers games need careful design and planning.  In Orange Light is essentially a small spreadsheet where you click buttons in order to keep some numbers within a desired range.  It seemed very simple at first, but a slew of problems arose after I &lt;em&gt;thought&lt;/em&gt; I had finished the simulation.&lt;/p&gt;
&lt;p&gt;Third, and unsurprisingly, immersion and atmosphere are very difficult to execute on.  As a first experiment, I'm pretty happy with how things turned out.&lt;/p&gt;
&lt;p&gt;Fourth, and last, if a game has &lt;em&gt;meters&lt;/em&gt;, and those meters indicate how Good/Bad something is, make sure they all go in the same direction.  In my game, the Warmth meter wants to be high, and the Hunger meter wants to be low.  That's been the single biggest point of absolutely understandable confusion.&lt;/p&gt;
&lt;p&gt;Lessons learned!&lt;/p&gt;
&lt;!-- IOL sky demo --&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js"&gt;&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/phaser-ce/2.8.2/phaser.min.js"&gt;&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/es6-promise/4.1.1/es6-promise.min.js"&gt;&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.3/fetch.min.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/lib/phaser-state-transition-plugin.min.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/js/config.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/js/sim.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/js/states/boot.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/js/states/preload.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/js/states/menu.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/js/states/play.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/js/game.js"&gt;&lt;/script&gt;

&lt;script src="https://palebluepixel.org/2017/08/04/in-orange-light/js/main.js"&gt;&lt;/script&gt;

&lt;!-- /IOL sky demo --&gt;

&lt;p&gt;&lt;img hidden src="https://palebluepixel.org/2017/08/04/in-orange-light/images/big/loading-bar.png"&gt;
&lt;img hidden src="https://palebluepixel.org/2017/08/04/in-orange-light/images/sky.png"&gt;
&lt;img hidden src="https://palebluepixel.org/2017/08/04/in-orange-light/images/mountain.png"&gt;
&lt;img hidden src="https://palebluepixel.org/2017/08/04/in-orange-light/images/mountain1.png"&gt;
&lt;img hidden src="https://palebluepixel.org/2017/08/04/in-orange-light/images/mountain2.png"&gt;
&lt;img hidden src="https://palebluepixel.org/2017/08/04/in-orange-light/images/mountain3.png"&gt;
&lt;img hidden src="https://palebluepixel.org/2017/08/04/in-orange-light/images/mountain4.png"&gt;
&lt;img hidden src="https://palebluepixel.org/2017/08/04/in-orange-light/iol-square-logo.jpg"&gt;&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="web"></category><category term="gamedev"></category><category term="ludum-dare"></category><category term="ld39"></category><category term="in-orange-light"></category></entry><entry><title>Pity About Earth...</title><link href="https://palebluepixel.org/projects/pity-about-earth" rel="alternate"></link><published>2017-05-07T00:00:00-04:00</published><updated>2017-05-07T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2017-05-07:/projects/pity-about-earth</id><summary type="html">&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="http://pae.fun/"&gt;Play now!&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Humanity, listen up. This is the Universe. I am sick of you sticking your nose where it doesn …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="http://pae.fun/"&gt;Play now!&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Humanity, listen up. This is the Universe. I am sick of you sticking your nose where it doesn’t belong. That’s why there’s a huge asteroid heading straight for your pitiful Earth, courtesy of yours truly. I see you’ve built a flimsy Barrier and a stockpile of Missiles, but it won’t help. Enjoy the end times! Bye-bye. Talk soon.&lt;/p&gt;
&lt;p&gt;– The Universe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://pae.fun/"&gt;&lt;img alt="play" src="https://palebluepixel.org/projects/pity-about-earth/logo-square.png" /&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;The weekend before Ludum Dare, I wrote a post about &lt;a href="http://scripta.co/articles/Preparing-for-Ludum-Dare-38/"&gt;preparing for Ludum Dare 38&lt;/a&gt;.  It began as follows.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ludum Dare 38 is currently &lt;strong&gt;hurtling through space&lt;/strong&gt; on a &lt;strong&gt;direct trajectory&lt;/strong&gt; with next weekend.  &lt;strong&gt;Impact&lt;/strong&gt; is estimated at 9PM on Friday, and the result will be a &lt;strong&gt;chaotic, harebrained&lt;/strong&gt;, and fun-filled weekend. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those words must have put us under some kind of spell, because over the weekend &lt;a href="https://twitter.com/caramelcode"&gt;Jared&lt;/a&gt; and I built a chaotic, harebrained game about protecting the Earth from asteroids on a direct trajectory with Earth.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="http://pae.fun/"&gt;Play now!&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id="weekend-retro"&gt;Weekend Retro&lt;/h2&gt;
&lt;p&gt;On Friday night, we planned out a 1v1 multiplyer game where one player defends Earth at the other played as a cruel Universe intent on destroying Earth with asteroids.  It wasn't until Saturday evening that we decided to drop the multiplayer component, due to the some incompatible opinions &lt;a href="http://lance.gg/"&gt;Lance server&lt;/a&gt; imposes on the game client's build system.&lt;/p&gt;
&lt;p&gt;After dropping multiplayer, our velocity shot up and we implemented most of the game mechanics, gameplay, and difficulty tuning on Sunday. Here's a series of clips showing the progression of the game starting Saturday morning and ending Monday night.&lt;/p&gt;
&lt;figure&gt;
&lt;video style="margin: 0 auto" controls loop autoplay&gt;
&lt;source src="https://palebluepixel.org/projects/pity-about-earth/progress-smaller.webm" /&gt;                                                   
&lt;/video&gt;
&lt;/figure&gt;

&lt;p&gt;We finished about 20 minutes before the submission deadline.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ear-candy"&gt;Ear Candy&lt;/h2&gt;
&lt;p&gt;The most exciting part of LD38 for us was working with a &lt;a href="https://ldjam.com/events/ludum-dare/38/pity-about-earth/a-retro-for-pity-about-earth"&gt;Veuskemini&lt;/a&gt;.  Audio has always been our weakest point, so working with a composer was a huge thrill.  This guy is seriously talented!  We sent him a description of the game plan on Friday night, and the next morning he had already laid down two amazing, intense, evocative tracks.  If we score well in any category, I'm confident it will be Audio.  Check out this studio!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Veuskemini studio" src="https://palebluepixel.org/projects/pity-about-earth/veuskemini-studio.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;You can listen to the &lt;a href="https://veuskemini.bandcamp.com/album/pity-about-earth-ost"&gt;Pity About Earth OST&lt;/a&gt; directly.  You can also find more of Veuskemini's work at: &lt;a href="https://www.youtube.com/channel/UC2ebq32zwRC5O6kMJXy32Jg"&gt;YouTube&lt;/a&gt;, &lt;a href="https://www.facebook.com/VEUSKEMINI"&gt;Facebook&lt;/a&gt;, &lt;a href="https://soundcloud.com/veuskemini"&gt;Soundcloud&lt;/a&gt;, &lt;a href="https://veuskemini.bandcamp.com"&gt;Bandcamp&lt;/a&gt;, &lt;a href="https://loudr.fm/artist/veuskemini/FE6ZW"&gt;Loudr&lt;/a&gt;, &lt;a href="https://www.reverbnation.com/veuskemini"&gt;Reverbnation&lt;/a&gt;, and &lt;a href="https://www.instagram.com/veuskemini_vapor_lab"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="reception"&gt;Reception&lt;/h2&gt;
&lt;p&gt;Some kind streamers have already played Pity About Earth for their audiences.  Here are links to the VODs, and pictures of their faces while playing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/videos/138433485?t=02h15m09s"&gt;&lt;img alt="TogisLp plays Pity About Earth" src="https://palebluepixel.org/projects/pity-about-earth/togislp.png" /&gt; &lt;strong&gt;TogisLp&lt;/strong&gt; plays Pity About Earth...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/videos/138479164?t=01h48m26s"&gt;&lt;img alt="drazil100 plays Pity About Earth" src="https://palebluepixel.org/projects/pity-about-earth/drazil100.png" /&gt; &lt;strong&gt;drazil100&lt;/strong&gt; plays Pity About Earth...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/videos/138561326?t=37m15s"&gt;&lt;img alt="JenniNexus plays Pity  About Earty" src="https://palebluepixel.org/projects/pity-about-earth/jenninexus.png" /&gt; &lt;strong&gt;JenniNexus&lt;/strong&gt; plays Pity About Earth...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Judging is ongoing and we've gotten some good suggestions so far, mostly centering around the fact that the game is too hard.  We'll certainly tune that post-jam, but the game at its core is an arcade survival game, so the difficulty &lt;em&gt;will&lt;/em&gt; eventually kill you.&lt;/p&gt;
&lt;p&gt;Out of the games I've rated, my favorite so far is &lt;a href="https://ldjam.com/events/ludum-dare/38/crater-creator"&gt;Crater Creator&lt;/a&gt;, an impresisve compo (hard mode) game about smashing asteroids into a planetoid to make it large enough to become habitable.  It's a pleasing counterpart to our game about deflecting asteroids to &lt;em&gt;keep&lt;/em&gt; a planet habitable.  Great fun!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="post-jam-improvements"&gt;Post-Jam improvements&lt;/h2&gt;
&lt;p&gt;We fixed a few bugs post-jam, like a barrier-lockup bug that caused the barrier to become unmovable.  We've also been brainstorming ideas that we couldn't fit into the jam weekend, like improving the missile ability, making the viewport a square instead of a portrait rectangle, and granting bonus score for blocking full asteroid barrages.  We plan to implement these changes after judging has concluded.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://palebluepixel.org/projects/pity-about-earth/difficulty.png" /&gt;&lt;/p&gt;
&lt;p&gt;As you can probably tell from the screen orientation, the game was designed with mobile in mind.  Mobile wasn't a big priority for the jam, but we plan to post the game to app stores after jam judging is complete.  Some tweaks will be necessary, like lessening the already-punishing difficulty.&lt;/p&gt;
&lt;p&gt;Thanks to our families, the players, the streamers who've played the game, and all othe other LDJAM participants!&lt;/p&gt;
&lt;p&gt;&lt;img hidden src="https://palebluepixel.org/projects/pity-about-earth/logo-notitle.png"&gt;&lt;/p&gt;</content><category term="programming"></category><category term="ludum-dare"></category><category term="ld38"></category><category term="javascript"></category><category term="phaser"></category><category term="webgl"></category><category term="gamedev"></category><category term="2d"></category><category term="web"></category><category term="pity-about-earth"></category><category term="games"></category></entry><entry><title>Zorbio</title><link href="https://palebluepixel.org/projects/zorbio" rel="alternate"></link><published>2016-11-03T00:00:00-04:00</published><updated>2016-11-03T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2016-11-03:/projects/zorbio</id><summary type="html">&lt;p&gt;Zorbio is a free multiplayer eat-em-up game that you can play in your browser!&lt;/p&gt;
&lt;p&gt;Zorbio is brought to you by …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Zorbio is a free multiplayer eat-em-up game that you can play in your browser!&lt;/p&gt;
&lt;p&gt;Zorbio is brought to you by my good friend Jared Sprague and I, via our small game development company, &lt;a href="http://scripta.co/"&gt;Scripta, Inc&lt;/a&gt;. Follow Zorbio development on the &lt;a href="http://scripta.co/"&gt;Scripta blog&lt;/a&gt;, or on &lt;a href="https://www.facebook.com/zorbio/"&gt;Facebook&lt;/a&gt;.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="http://zor.bio"&gt;Play now!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://palebluepixel.org/static/images/projects/icon_zorbio.jpg" alt="screenshot of Zorbio" /&gt;&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="web"></category><category term="scripta"></category><category term="games"></category><category term="gamedev"></category><category term="zorbio"></category></entry><entry><title>Noise/Echo Cancellation in Fedora 26</title><link href="https://palebluepixel.org/2017/10/12/noiseecho-cancellation-in-fedora-26/" rel="alternate"></link><published>2017-10-12T00:00:00-04:00</published><updated>2017-10-12T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2017-10-12:/2017/10/12/noiseecho-cancellation-in-fedora-26/</id><summary type="html">&lt;p&gt;How to enable PulseAudio noise and echo cancellation in Fedora 26.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Minimic is great.  I just received mine last week, and I'm loving the ability to join video calls with &lt;a href="http://gradolabs.com/"&gt;nice, comfy headphones&lt;/a&gt;.  It's much better than switching back and forth between headphones and a headset.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://palebluepixel.org/2017/10/12/noiseecho-cancellation-in-fedora-26/minimic.jpg"&gt;
&lt;/figure&gt;

&lt;p&gt;The only problem is that, since the minimic is just &lt;em&gt;a wire&lt;/em&gt;, it doesn't have any noise or echo cancellation.  And since Fedora doesn't come with that feature enabled by default, the mic was picking up a lot of ambient noise.  &lt;a href="https://chrisbredesen.com/"&gt;Breddy&lt;/a&gt; told me that steps just like the following didn't work in Fedora a few versions ago, so I wanted to document them now that the issues seem to be fixed.  I originally found these instructions on &lt;a href="https://www.reddit.com/r/linux/comments/2yqfqp/just_found_that_pulseaudio_have_noise/"&gt;this r/linux post&lt;/a&gt; and am reposting them here with Fedora-specific flourishes.&lt;/p&gt;
&lt;p&gt;Without further ado, here's how to turn on noise and echo cancellation in Fedora 26.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="if-you-just-want-it-to-work"&gt;If you just want it to work&lt;/h2&gt;
&lt;p&gt;If you're in a rush, here's a script that will set everything up for you.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::bash
sudo dnf install -y webrtc-audio-processing
echo '.nofail' | sudo tee -a /etc/pulse/default.pa
echo 'load-module module-echo-cancel aec_method=webrtc' | sudo tee -a /etc/pulse/default.pa
pulseaudio -k
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="again-but-with-explanation"&gt;Again, but with explanation&lt;/h2&gt;
&lt;p&gt;The first step is to install the WebRTC audio processing package.  It &lt;em&gt;may&lt;/em&gt; come by default with Fedora.  My machine had it installed already, but I'm including it here in case it was simply a dependency of some other package I've installed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::bash
sudo dnf install webrtc-audio-processing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then add these two lines to the end of &lt;code&gt;/etc/pulse/default.pa&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::bash
.nofail
load-module module-echo-cancel aec_method=webrtc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then restart PulseAudio.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::bash
pulseaudio -k
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you open Sound settings, you should see a new entry under the &lt;em&gt;Input&lt;/em&gt; tab.  Mine is called "&lt;strong&gt;Built-in Audio Analog Stereo (echo cancelled with SA9027 USB Audio Analog Stereo)&lt;/strong&gt;".  Not sure what's up with that name; my mic is connected with a 3.5mm audio jack.  Whatever, it works!&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://palebluepixel.org/2017/10/12/noiseecho-cancellation-in-fedora-26/devices.png"&gt;
&lt;/figure&gt;

&lt;p&gt;Select the device that says "echo cancelled" and your audio background hiss should drop to almost nothing.  Here's a before and after spectrum analysis.&lt;/p&gt;
&lt;div class="beside"&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/10/12/noiseecho-cancellation-in-fedora-26/before.jpg" alt="Audio spectrum analysis of microphone input without noise cancellation." /&gt;
        &lt;figcaption&gt;Spectrum analysis without noise cancellation.&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2017/10/12/noiseecho-cancellation-in-fedora-26/after.jpg" alt="Audio spectrum analysis of microphone input with noise cancellation." /&gt;
        &lt;figcaption&gt;Spectrum analysis &lt;b&gt;with&lt;/b&gt; noise cancellation.&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;</content><category term="linux"></category><category term="fedora"></category><category term="audio"></category></entry><entry><title>Meet SimPixel</title><link href="https://palebluepixel.org/2017/03/10/meet-simpixel/" rel="alternate"></link><published>2017-03-10T00:00:00-05:00</published><updated>2017-03-10T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2017-03-10:/2017/03/10/meet-simpixel/</id><summary type="html">&lt;p&gt;A WebGL-based visualizer for LED displays.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have someone I'd like you to meet.  SimPixel, meet everyone.  Everyone,
SimPixel.&lt;/p&gt;
&lt;div id="simpixel-container"&gt;&lt;/div&gt;

&lt;h2 id="simpixel-introduces-itself"&gt;SimPixel introduces itself&lt;/h2&gt;
&lt;p&gt;SimPixel is a WebGL visualizer for LED displays, &lt;em&gt;very&lt;/em&gt; much like the ones Adam
and Dan build over at &lt;a href="http://maniacallabs.com/"&gt;Maniacal Labs&lt;/a&gt;.&lt;/p&gt;
&lt;style type="text/css"&gt;
#mlabs {
    height: 50vh !important;
}
@media screen and (min-width: 660px) {
    #mlabs {
        float: right;
        margin-left: 20px;
    }
}
&lt;/style&gt;

&lt;figure&gt;
&lt;img src="https://palebluepixel.org/2017/03/10/meet-simpixel/maniacal.jpg" alt="some Maniacal Labs LED projects" /&gt;
&lt;/figure&gt;

&lt;p&gt;My working theory about why it's &lt;em&gt;so&lt;/em&gt; much like their displays is that I built
most of SimPixel while sitting at Adam's workbench.  I don't know, there could
be a connection.  If you too would like to take a seat at Adam's illustrious
workbench someday, &lt;a href="https://github.com/ManiacalLabs/SimPixel"&gt;hack away&lt;/a&gt;.  You can also try the &lt;a href="/static/projects/simpixel"&gt;fullscreen
demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ManiacalLabs/BiblioPixel/wiki"&gt;BiblioPixel&lt;/a&gt;, &lt;abbr title="Maniacal Labs"&gt;ML's&lt;/abbr&gt; light animation
library, sends layouts and colors to SimPixel using a simple &lt;a href="https://en.wikipedia.org/wiki/WebSocket"&gt;WebSocket&lt;/a&gt;
protocol.&lt;/p&gt;
&lt;h2 id="the-protocol"&gt;The Protocol&lt;/h2&gt;
&lt;p&gt;By itself, SimPixel is useless.  To turn on the lights, it connects to a
WebSocket service.  That service is expected to send certain messages, namely a
configuration message followed by a series of color messages.&lt;/p&gt;
&lt;h3 id="configuration-message"&gt;Configuration message&lt;/h3&gt;
&lt;p&gt;The configuration message conveys the spatial layout of the LEDs.&lt;/p&gt;
&lt;p&gt;For example, a configuration message of &lt;code&gt;0x0000009A02FE000C&lt;/code&gt; is interpreted as
follows.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+--------+------+------+------+
| opcode |    X |    Y |    Z |
+--------+------+------+------+
| 0x0000 | 009A | 02FE | 000C |
+--------+------+------+------+
| config |  154 |  766 |   12 |
+--------+------+------+------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The leading &lt;code&gt;0x0000&lt;/code&gt; opcode identifies this as a configuration message,
followed by a series of 16-bit signed integers which indicate the 3D
coordinates of each LED, of the form: &lt;code&gt;X&lt;sub&gt;1&lt;/sub&gt;,Y&lt;sub&gt;1&lt;/sub&gt;,Z&lt;sub&gt;1&lt;/sub&gt;,X&lt;sub&gt;2&lt;/sub&gt;,Y&lt;sub&gt;2&lt;/sub&gt;,Z&lt;sub&gt;2&lt;/sub&gt;,
    ..., X&lt;sub&gt;n&lt;/sub&gt;,Y&lt;sub&gt;n&lt;/sub&gt;,Z&lt;sub&gt;n&lt;/sub&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="color-message"&gt;Color message&lt;/h3&gt;
&lt;p&gt;The color message(s) specify what color each LED should be at the current
moment in time.&lt;/p&gt;
&lt;p&gt;An example color message, &lt;code&gt;0x0001 40 D6 7F&lt;/code&gt;, breaks down to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+--------+-----+-----+-----+
| opcode |   R |   G |   B |
+--------+-----+-----+-----+
| 0x0001 |  40 |  D6 |  7F |
+--------+-----+-----+-----+
| color  |  64 | 214 | 127 |
+--------+-----+-----+-----+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The leading &lt;code&gt;0x0001&lt;/code&gt; opcode identifies this as a color message, followed by a
series of 8-bit unsigned integers which indicate the RGB colors of each LED,
of the form:
&lt;code&gt;R&lt;sub&gt;1&lt;/sub&gt;,G&lt;sub&gt;1&lt;/sub&gt;,B&lt;sub&gt;1&lt;/sub&gt;,R&lt;sub&gt;2&lt;/sub&gt;,G&lt;sub&gt;2&lt;/sub&gt;,B&lt;sub&gt;2&lt;/sub&gt;,
..., R&lt;sub&gt;n&lt;/sub&gt;,G&lt;sub&gt;n&lt;/sub&gt;,B&lt;sub&gt;n&lt;/sub&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For a concise reference, see &lt;a href="https://github.com/ManiacalLabs/SimPixel/blob/master/PROTOCOL.md"&gt;PROTOCOL.md&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-ghost-in-the-recording"&gt;The Ghost in the Recording&lt;/h2&gt;
&lt;p&gt;The live demo at the top of this post the protocol, but it isn't connected to
any WebSocket service.  Instead, it's using a recording apparatus that I
cobbled together.  I pushed a configuration frame and a bunch of color frames
into an array, converted their ArrayBuffers into base64 strings, and saved
those into &lt;a href="https://github.com/ManiacalLabs/SimPixel/blob/recording-draft/src/recordings/vis.json"&gt;a quite large JSON recording file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I only mention it to lead up to the following.  While editing the recording
JSON file, I zoomed out a little and something caught my eye.  I zoomed out
more and a pattern took shape.&lt;/p&gt;
&lt;p&gt;Here's a screenshot of the JSON file in my terminal, zoomed out as far as it'll
go.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image of base64-encoded recording" src="https://palebluepixel.org/2017/03/10/meet-simpixel/recording-base64.png" /&gt;&lt;/p&gt;
&lt;p&gt;The waves of red, green, and blue is evident even in this doubly-encoded
format.  Pretty cool.&lt;/p&gt;
&lt;!-- SimPixel embedded --&gt;

&lt;div id="connection"&gt;&lt;/div&gt;

&lt;style type="text/css"&gt;
    #simpixel-container {
        width: 100%;
        height: 80vh;
        cursor: move;
    }
    #connection { display: none; }
&lt;/style&gt;

&lt;script type="x-shader/x-vertex" id="vertexshader"&gt;
    uniform float size;
    attribute vec3 customColor;
    varying vec3 vColor;
    void main() {
        vColor = customColor;
        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
        gl_PointSize = size * ( 300.0 / -mvPosition.z );
        gl_Position = projectionMatrix * mvPosition;
    }
&lt;/script&gt;

&lt;script type="x-shader/x-fragment" id="fragmentshader"&gt;
    uniform vec3 color;
    uniform sampler2D textureOn;
    uniform sampler2D textureOff;
    varying vec3 vColor;
    void main() {
        /* if color attribute is not black, use 'on' texture with color*/
        if (length(vColor) &gt; 0.0) {
            gl_FragColor = vec4( (color/255.0) * vColor, 1.0 );
            gl_FragColor = gl_FragColor * texture2D( textureOn, gl_PointCoord );
        }
        /* if color attribute is black, use 'off' texture and dark grey */
        else {
            gl_FragColor = vec4(0.4);
            gl_FragColor = gl_FragColor * texture2D( textureOff, gl_PointCoord );
        }
    }
&lt;/script&gt;

&lt;!-- third party --&gt;

&lt;script defer src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r83/three.min.js"&gt;&lt;/script&gt;

&lt;script defer src="https://cdnjs.cloudflare.com/ajax/libs/es6-promise/4.0.5/es6-promise.min.js"&gt;&lt;/script&gt;

&lt;script defer src="https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.1/fetch.min.js"&gt;&lt;/script&gt;

&lt;script defer src="/static/projects/simpixel/js/Detector.js"&gt;&lt;/script&gt;

&lt;script defer src="/static/projects/simpixel/js/OrbitControls.js"&gt;&lt;/script&gt;

&lt;script defer src="/static/projects/simpixel/js/reconnecting-websocket.js"&gt;&lt;/script&gt;

&lt;!-- first party --&gt;

&lt;script defer src="/static/projects/simpixel/js/bp_host.js"&gt;&lt;/script&gt;

&lt;script defer src="/static/projects/simpixel/js/conf.js"&gt;&lt;/script&gt;

&lt;script defer src="/static/projects/simpixel/js/recording.js"&gt;&lt;/script&gt;

&lt;script defer src="/static/projects/simpixel/js/view.js"&gt;&lt;/script&gt;

&lt;script defer src="/static/projects/simpixel/js/main.js"&gt;&lt;/script&gt;

&lt;div hidden&gt;
    &lt;img src="https://palebluepixel.org/2017/03/10/meet-simpixel/thumb.jpg"&gt;
&lt;/div&gt;</content><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="art"></category><category term="web"></category><category term="led"></category><category term="maniacal-labs"></category></entry><entry><title>Fireflies</title><link href="https://palebluepixel.org/projects/fireflies" rel="alternate"></link><published>2017-02-06T00:00:00-05:00</published><updated>2017-02-06T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2017-02-06:/projects/fireflies</id><summary type="html">&lt;p&gt;Fireflies is a WebGL demo in which a friendly flock of fireflies forms shapes
for your entertainment.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fireflies title screen" src="/static/images/projects/fireflies/title.jpg" /&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="/static/projects/fireflies"&gt;Live demo!&lt;/a&gt;&lt;/p&gt;

&lt;iframe id="vimeo-player" src="https://player.vimeo.com/video/202827845" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Fireflies is a WebGL demo in which a friendly flock of fireflies forms shapes
for your entertainment.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fireflies title screen" src="/static/images/projects/fireflies/title.jpg" /&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="/static/projects/fireflies"&gt;Live demo!&lt;/a&gt;&lt;/p&gt;

&lt;iframe id="vimeo-player" src="https://player.vimeo.com/video/202827845" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/lorenschmidt"&gt;Loren Schmidt&lt;/a&gt; for agreeing to let me use the awesome
pixel-person avatar.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mwcz/fireflies/"&gt;View source&lt;/a&gt;, if you're into that kind of thing.&lt;/p&gt;
&lt;script&gt;
var iframe = $('iframe#vimeo-player');

function handle_vid_click() {
    iframe.attr('src', $(this).find('[data-vid-src]').attr('data-vid-src') + '?autoplay=1');
}

function init_vimeo_picker() {
    // get every img with data-vid-src
    // get ref to iframe
    // create onclick for each img which sets iframe's src to data-vid-src
    var vidlinks = $('.vimeo-thumbnail');
    vidlinks.on('click', handle_vid_click);
}

init_vimeo_picker();

function set_vimeo_iframe_height() {
    iframe.attr('height', iframe.width() / (1280/720) );
}

document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
window.addEventListener('resize', set_vimeo_iframe_height);
&lt;/script&gt;

&lt;p&gt;&lt;img hidden src="https://palebluepixel.org/projects/fireflies/fireflies-logo.png"&gt;&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="art"></category><category term="particles"></category></entry><entry><title>Tracer</title><link href="https://palebluepixel.org/projects/tracer" rel="alternate"></link><published>2017-01-25T00:00:00-05:00</published><updated>2017-01-25T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2017-01-25:/projects/tracer</id><summary type="html">&lt;p&gt;Tracer is a 3D connect-the-dots game that &lt;a href="https://twitter.com/caramelcode/"&gt;Jared&lt;/a&gt; and I created for
Ludum Dare 37.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="http://scripta.co/tracer"&gt;Play now!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="menu screen of tracer" src="/static/images/projects/tracer/title.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;We were very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tracer is a 3D connect-the-dots game that &lt;a href="https://twitter.com/caramelcode/"&gt;Jared&lt;/a&gt; and I created for
Ludum Dare 37.&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="http://scripta.co/tracer"&gt;Play now!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="menu screen of tracer" src="/static/images/projects/tracer/title.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;We were very happy with the ratings Tracer received.  In the &lt;em&gt;Innovation&lt;/em&gt;
category, we placed 5th out of 1,489 games.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image of playing tracer" src="/static/images/projects/tracer/head.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;A more detailed blog post is available at the &lt;a href="http://scripta.co/articles/tracer-ld37/"&gt;Scripta Games blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ScriptaGames/Tracer"&gt;View source&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="web"></category><category term="scripta"></category><category term="games"></category><category term="gamedev"></category><category term="tracer"></category></entry><entry><title>Kimotion at geekSPARK 2016</title><link href="https://palebluepixel.org/2017/01/12/kimotion-at-geekspark-2016/" rel="alternate"></link><published>2017-01-12T00:00:00-05:00</published><updated>2017-01-12T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2017-01-12:/2017/01/12/kimotion-at-geekspark-2016/</id><summary type="html">&lt;p&gt;Kimotion-powered interactive art at SPARKcon 2016.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a few short &lt;del&gt;days&lt;/del&gt; months ago, &lt;a href="http://kimotion.xyz"&gt;Kimotion&lt;/a&gt; was on
display at SPARKcon.  SPARKcon is a large art festival in Raleigh, and we
occupy a small slice of it called geekSPARK.&lt;/p&gt;
&lt;h2 id="kimotion-levels-up"&gt;Kimotion Levels Up&lt;/h2&gt;
&lt;p&gt;Last year's tech had a rudimentary and finicky &lt;a href="https://vimeo.com/136950949"&gt;hand tracking&lt;/a&gt; system.  It
was workable, but a lot of visitors had trouble using it, especially kids.
This year, I added Leap Motion support, which was a huge... &lt;em&gt;jump&lt;/em&gt; forward for
hand tracking.&lt;/p&gt;
&lt;figure&gt;
&lt;video style="margin: 0 auto" controls autoplay loop&gt;
&lt;source src="https://palebluepixel.org/2017/01/12/kimotion-at-geekspark-2016/arm.mp4" /&gt;
&lt;source src="https://palebluepixel.org/2017/01/12/kimotion-at-geekspark-2016/arm.webm" /&gt;
&lt;/video&gt;
&lt;/figure&gt;

&lt;p&gt;Adam, of Maniacal Labs, built the fantastic adjustable Leap Motion mounting arm
shown above.  It allowed visitors of any height to participate comfortably and
worked like a dream.&lt;/p&gt;
&lt;p&gt;Several new mods were written as well, though Jared's Fish mod remained the
most popular by a large margin!&lt;/p&gt;
&lt;p&gt;Another big change was simplifying the mod writing experience for beginners.
By removing the project's build system entirely, the &lt;em&gt;get started&lt;/em&gt; instructions
are essentially "unzip file, run &lt;code&gt;start.sh&lt;/code&gt;".  Browser support for &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015"&gt;ES6&lt;/a&gt;
has come a long way since last year, so I was able to remove Babel and run raw
ES6 code in Firefox and Chrome.  Beginners are no longer put off by the complex
build system.  Plus, not having to wait while builds run is a nice bonus.&lt;/p&gt;
&lt;h2 id="maniacal-labs"&gt;Maniacal Labs&lt;/h2&gt;
&lt;p&gt;We shared the room with Adam and Dan from &lt;a href="http://maniacallabs.com/"&gt;Maniacal Labs&lt;/a&gt;, who brought
their &lt;a href="http://maniacallabs.com/2016/06/28/jumbo1k-32x32-led-networked-display/"&gt;awesome&lt;/a&gt; &lt;a href="http://maniacallabs.com/WyoManiacalDisplay/"&gt;LED&lt;/a&gt; &lt;a href="http://maniacallabs.com/2015/09/22/building-the-colossus-led-display/"&gt;displays&lt;/a&gt;.  Adam even wrote a brand new
Kimotion client to run on their biggest display, which you can see a clip of in
the video at the top of this post.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Maniacal Labs @ geekSPARK 2016" src="https://palebluepixel.org/2017/01/12/kimotion-at-geekspark-2016/maniacal.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Our two exhibits fit so well together that we're considering uniting even
further next year.&lt;/p&gt;
&lt;h2 id="pictures"&gt;Pictures!&lt;/h2&gt;
&lt;p&gt;$GALLERY&lt;/p&gt;
&lt;h2 id="viva-la-geekspark"&gt;Viva la geekSPARK!&lt;/h2&gt;
&lt;figure&gt;
    &lt;img src="https://palebluepixel.org/2017/01/12/kimotion-at-geekspark-2016/geekspark.png" alt="geekSPARK logo" /&gt;
&lt;/figure&gt;

&lt;p&gt;Thanks to Truett and Noel for all their organization and support.  Thanks to
Ian for pulling me into this project two years ago and for climbing into the
ceiling to shut off the lights.  And thanks to all the &lt;a href="http://kimotion.xyz/#contributors"&gt;Kimotion
contributors&lt;/a&gt; for building mods and adding color and fun to everyone's
weekend.&lt;/p&gt;
&lt;div hidden&gt;
    &lt;img src="https://palebluepixel.org/2017/01/12/kimotion-at-geekspark-2016/thumb.jpg"&gt;
&lt;/div&gt;</content><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="physics"></category><category term="web"></category><category term="kimotion"></category></entry><entry><title>Lazyloading Web Components</title><link href="https://palebluepixel.org/2016/09/06/lazyloading-web-components/" rel="alternate"></link><published>2016-09-06T00:00:00-04:00</published><updated>2016-09-06T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2016-09-06:/2016/09/06/lazyloading-web-components/</id><summary type="html">&lt;p&gt;Convenience hacking: Web Components without imports.&lt;/p&gt;</summary><content type="html">&lt;p&gt;They say &lt;a href="http://threevirtues.com/"&gt;good developers are lazy&lt;/a&gt;.  A tedious process is no match for a
lazy developer.  Below is an experiment in laziness.  It's a proof of concept
for using Web Components without having to manually import each one.&lt;/p&gt;
&lt;p&gt;I'm not sure exactly what to call it.  It grazes the definitions of
lazyloading, autoloading, and dependency injection, so I went with the laziest
term.&lt;/p&gt;
&lt;p&gt;Let's set the scene, and find out if it's a worthwhile developer convenience,
or ease-of-use gone mad...&lt;/p&gt;
&lt;h2 id="scene-1-maximize-simplicity"&gt;Scene 1: Maximize Simplicity&lt;/h2&gt;
&lt;p&gt;You are the author of "Wootstrap", a Bootstrap-like library of useful
components like navigation, buttons, and alerts.  Also like Bootstrap, your
components are distributed as HTML snippets for users to copy, paste, and
customize.&lt;/p&gt;
&lt;figure&gt;
    &lt;video style="margin: 0 auto" poster="https://palebluepixel.org/2016/09/06/lazyloading-web-components/thumb.png" autoplay controls loop&gt;
        &lt;source src="https://palebluepixel.org/2016/09/06/lazyloading-web-components/bootstrap-paste.webm" /&gt;
        &lt;source src="https://palebluepixel.org/2016/09/06/lazyloading-web-components/bootstrap-paste.mp4" /&gt;
    &lt;/video&gt;
&lt;/figure&gt;

&lt;p&gt;To improve ease of use, you encapsulate all that HTML into a custom element:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-markup"&gt;&amp;lt;ws-panel heading=&amp;#34;I am a ws-panel&amp;#34;&amp;gt;Some words.&amp;lt;/ws-panel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The essence of simplicity!  One more thing, browsers don't know what
&lt;code&gt;&amp;lt;ws-panel&amp;gt;&lt;/code&gt; is, so your users must import it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-markup"&gt;&amp;lt;link rel=&amp;#34;import&amp;#34; href=&amp;#34;../bower_components/wootstrap/components/ws-panel.html&amp;#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One line, no big deal.  But as your users add and remove components from their
pages, managing imports becomes a finger-aching chore.&lt;/p&gt;
&lt;h2 id="scene-2-minimize-finger-ache"&gt;Scene 2: Minimize Finger-Ache&lt;/h2&gt;
&lt;p&gt;Wouldn't it be cushy if the components were imported when you use them,
automatically?  Here's a working demo:&lt;/p&gt;
&lt;div class="row"&gt;
    &lt;div class="col-sm-4"&gt;
        &lt;h3&gt;The demo &lt;small&gt;&lt;a href="/static/043/index.html" target="_blank" rel="noopener noreferrer"&gt;open in tab&lt;/a&gt;&lt;/small&gt;&lt;/h3&gt;
        &lt;iframe frameborder=0 height="200" width="100%" src="/static/043/index.html"&gt;&lt;/iframe&gt;
    &lt;/div&gt;
    &lt;div class="col-sm-8"&gt;
        &lt;h3&gt;The source&lt;/h3&gt;
&lt;pre data-line="3-4,7-11" style="font-size: 1.2rem"&gt;&lt;code class="language-markup"&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;script defer src=&amp;#34;src/webcomponents.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;link rel=&amp;#34;import&amp;#34; href=&amp;#34;{attach}src/lazy-load/lazy-load.html&amp;#34;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;lazy-load&amp;gt;
            &amp;lt;ws-panel heading=&amp;#34;I am a ws-panel&amp;#34;&amp;gt;Some words.&amp;lt;/ws-panel&amp;gt;
            &amp;lt;ws-btn&amp;gt;I am ws-button&amp;lt;/ws-btn&amp;gt;
            &amp;lt;ws-alert&amp;gt;I am a ws-alert&amp;lt;/ws-alert&amp;gt;
        &amp;lt;/lazy-load&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The demo only imports &lt;code&gt;lazy-load&lt;/code&gt;, which in turn imports the
three &lt;code&gt;ws-&lt;/code&gt; elements.  Let's look at how it works.&lt;/p&gt;
&lt;h2 id="scene-3-behind-the-scenes"&gt;Scene 3: Behind the Scenes&lt;/h2&gt;
&lt;p&gt;To lazyload, we need a list of all our component names and where to find them.
I created a small "registry" object for the demo.  In the real-world, this
object could be auto-generated by the component library's build system, or by
the build system of the user's app, including all available components.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;var LazyComponents = {
    names: 'ws-panel,ws-btn,ws-alert',
    paths: {
        'ws-panel' : './src/ws-components/ws-panel/ws-panel.html',
        'ws-btn'   : './src/ws-components/ws-btn/ws-btn.html',
        'ws-alert' : './src/ws-components/ws-alert/ws-alert.html',
    },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we have &lt;code&gt;names&lt;/code&gt;, a comma-separated list of component names which doubles
as a selector.  It is passed into &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"&gt;querySelectorAll()&lt;/a&gt; to find any
occurrences of our elements on the page.  Second is &lt;code&gt;paths&lt;/code&gt;, a mapping from
each component's name to its HTML template file.&lt;/p&gt;
&lt;h3 id="the-lazy-load-element"&gt;The lazy-load element&lt;/h3&gt;
&lt;p&gt;Here's the Polymer definition for the &lt;code&gt;lazy-load&lt;/code&gt; element:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;Polymer({

    is: 'lazy-load',

    attached: function lazyLoadAttached() {
        this.lazyLoad();
    },

    lazyLoad: function lazyLoad() {
        var els = this.querySelectorAll(LazyComponents.names);
        for (var i = 0; i &amp;lt; els.length; ++i) {
            var name = els[i].nodeName.toLowerCase();
            this.importHref(LazyComponents.paths[name]);
        }
    },

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;code&gt;lazy-load&lt;/code&gt; is &lt;a href="https://www.polymer-project.org/1.0/docs/devguide/registering-elements#lifecycle-callbacks"&gt;attached to the DOM&lt;/a&gt;, it finds any children in
the &lt;code&gt;names&lt;/code&gt; list and imports their HTML templates (using Polymer's handy
&lt;a href="https://www.polymer-project.org/1.0/docs/devguide/instance-methods#imports-and-urls"&gt;importHref()&lt;/a&gt; function).&lt;/p&gt;
&lt;p&gt;Now any element in the registry object can be used without an explicit import.&lt;/p&gt;
&lt;h2 id="tradeoffs"&gt;Tradeoffs&lt;/h2&gt;
&lt;p&gt;There are some things that may outweigh the convenience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unvulcanized&lt;/strong&gt; - Lazy loading is the opposite of &lt;a href="https://www.polymer-project.org/1.0/docs/tools/optimize-for-production"&gt;Vulcanize&lt;/a&gt;.
   Vulcanize can still be used, but lazyloaded components won't be inlined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delayed loading&lt;/strong&gt; - Explicit imports begin downloading before lazyloaded
   imports, since they don't have to wait for &lt;code&gt;lazy-load&lt;/code&gt; to be attached to the
   DOM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Paths must be absolute&lt;/strong&gt; - Imports typically use relative paths, but
   lazyloaded paths are defined in only one spot, not per-page, so they must be
   absolute, &lt;em&gt;or&lt;/em&gt; relative to &lt;code&gt;lazy-load.html&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Late to the party?&lt;/strong&gt; - Any custom elements added to the page after
   &lt;code&gt;lazyLoad()&lt;/code&gt; has run won't be imported.  That didn't seem necessary for a
   proof of concept, but running &lt;code&gt;lazyLoad()&lt;/code&gt; on each state change would be an
   easy solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP/2 Server Push?&lt;/strong&gt; - I haven't tested this, but I suspect lazyloaded
   components won't benefit from HTTP/2 Server Push.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm not sure yet which camp lazyloading will fall into: best practice, or
antipattern.  My hope is that developer tooling will be written that injects
imports as you code, rather than at runtime.&lt;/p&gt;
&lt;p&gt;Thanks to Kyle Buchanan for pointers and corrections!&lt;/p&gt;
&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2016/09/06/lazyloading-web-components/lazyload.gif"&gt;&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="html"></category><category term="web-components"></category><category term="polymer"></category></entry><entry><title>Kimotion Modding 101</title><link href="https://palebluepixel.org/2016/08/28/kimotion-modding-101/" rel="alternate"></link><published>2016-08-28T00:00:00-04:00</published><updated>2016-08-28T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2016-08-28:/2016/08/28/kimotion-modding-101/</id><summary type="html">&lt;p&gt;How to create an interactive art display with Kimotion.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Kimotion is a simple framework for creating interactive art exhibits in 2D or
3D and supports both &lt;a href="http://www.xbox.com/en-US/xbox-360/accessories/kinect"&gt;Kinect&lt;/a&gt; and &lt;a href="https://www.leapmotion.com/"&gt;Leap Motion&lt;/a&gt; for viewer input.
This tutorial will focus on the Leap, so to proceed with the tutorial you'll
need to &lt;a href="https://www.leapmotion.com/setup"&gt;set up your Leap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the leap service is running, you can set up Kimotion!&lt;/p&gt;
&lt;h2 id="get-the-code"&gt;Get the code&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:mwcz/Kimotion.git
cd Kimotion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't know how to use &lt;code&gt;git&lt;/code&gt;, no problem, just download and extract the
&lt;a href="https://github.com/mwcz/Kimotion/archive/master.zip"&gt;Kimotion zip file&lt;/a&gt;
instead.&lt;/p&gt;
&lt;h2 id="boot-it-up"&gt;Boot it up&lt;/h2&gt;
&lt;p&gt;Start a simple web server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./start.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then open &lt;a href="http://localhost:8000/#example2d"&gt;localhost:8000/#example2d&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wave your hand around and you should see a trail of black-outlined squares,
like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="example2d mod screenshot" src="https://palebluepixel.org/2016/08/28/kimotion-modding-101/example2d.jpg" /&gt;&lt;/p&gt;
&lt;h2 id="create-your-mod"&gt;Create your mod!&lt;/h2&gt;
&lt;p&gt;The easiest way to start your own mod is to make a copy of the default mod.
Come up with a name for the mod, let's say &lt;code&gt;mymod&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd src
cp -r mods/example2d mods/mymod
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open &lt;code&gt;index.html&lt;/code&gt;, find where it says &lt;code&gt;&amp;lt;!-- Kimotion mods--&amp;gt;&lt;/code&gt;, and right after
it add a script tag to include your mod.&lt;/p&gt;
&lt;p&gt;&lt;script src="mods/mymod/main.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;mods/mymod/main.js&lt;/code&gt; and on the very first line, change &lt;code&gt;class example2d&lt;/code&gt;
to &lt;code&gt;class mymod&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;mods.js&lt;/code&gt; and add your mod name (&lt;code&gt;mymod&lt;/code&gt;) to the list.&lt;/p&gt;
&lt;p&gt;Whew, that process was pretty tedious, sorry about that.&lt;/p&gt;
&lt;p&gt;You can now open &lt;a href="http://localhost:8080/#mymod"&gt;localhost:8080/#mymod&lt;/a&gt; and see
your mod in action!  It's going to look just like the example mod, but now it's
time to make it your own.&lt;/p&gt;
&lt;h2 id="customize-your-mod"&gt;Customize your mod&lt;/h2&gt;
&lt;p&gt;Open &lt;code&gt;mods/mymod/main.js&lt;/code&gt; and look at the general layout.  There's a
&lt;code&gt;constructor&lt;/code&gt; function for your initial setup, and an &lt;code&gt;update&lt;/code&gt; function which
runs once per frame (at 60 frames per second, ideally).&lt;/p&gt;
&lt;p&gt;Many of the function calls (like &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;fill&lt;/code&gt;) come from &lt;a href="https://p5js.org/"&gt;p5&lt;/a&gt;,
an &lt;strong&gt;awesome&lt;/strong&gt; 2D drawing library.  All of p5 is available to you, so take a
look at p5's &lt;a href="https://p5js.org/reference/"&gt;function reference&lt;/a&gt; for all the possibilities.&lt;/p&gt;
&lt;p&gt;For your first tweak,  replace &lt;code&gt;rect&lt;/code&gt; with &lt;code&gt;ellipse&lt;/code&gt;, and refresh your browser.
Voila!&lt;/p&gt;
&lt;p&gt;&lt;img alt="example2d mod screenshot with circles" src="https://palebluepixel.org/2016/08/28/kimotion-modding-101/example2d-circle.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;There's an existing mod with a few more tweaks, Rainbow Squares.  It finds out
the angle of hand motion and colors the square based on that angle.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rainbow squares mod screenshot" src="https://palebluepixel.org/2016/08/28/kimotion-modding-101/rainbow-squares.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://github.com/mwcz/Kimotion/blob/master/src/mods/rainbow-square/main.js"&gt;Rainbow Squares&lt;/a&gt; if you're interesting in using an
effect like that.&lt;/p&gt;
&lt;h2 id="modding-resources"&gt;Modding resources&lt;/h2&gt;
&lt;p&gt;At this point, you're an experienced Kimotion modder.  If you have an idea but
would like some feedback before getting started, I'm eager to assist.  Here are
a few ways to get help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tweet &lt;a href="https://twitter.com/mwcz"&gt;@mwcz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open a &lt;a href="https://github.com/mwcz/Kimotion/issues/new"&gt;Kimotion issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Explore the existing &lt;a href="https://github.com/mwcz/Kimotion/tree/master/src/mods"&gt;Kimotion mods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2016/08/28/kimotion-modding-101/thumb.jpg"&gt;&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="web"></category><category term="kimotion"></category><category term="art"></category></entry><entry><title>Visualizing Network Traffic with WebGL</title><link href="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/" rel="alternate"></link><published>2016-07-13T00:00:00-04:00</published><updated>2016-07-13T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2016-07-13:/2016/07/13/visualizing-network-traffic-with-webgl/</id><summary type="html">&lt;p&gt;Creating a WebGL particle system to convey network traffic patterns to a live audience at &lt;a href="https://www.redhat.com/summit"&gt;Red Hat Summit&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;"&lt;em&gt;Finally,&lt;/em&gt;" I thought, "&lt;em&gt;an excuse to play with WebGL at work!&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;This year, I had the good fortune of contributing to a keynote presentation at
&lt;a href="https://www.redhat.com/summit"&gt;Red Hat Summit&lt;/a&gt;.  During the keynote, an audience of 5,000 played a
mobile web game created by our team.  The game was backed by several
&lt;a href="https://en.wikipedia.org/wiki/Microservices"&gt;microservices&lt;/a&gt; which we modified on stage while the audience
played.&lt;/p&gt;
&lt;p&gt;My contribution was to display, in a visual and engaging way, the live network
traffic flowing through our system.&lt;/p&gt;
&lt;p&gt;Being a web guy, I wanted to accomplish this on a webpage, but with such a
large audience, the number of network requests would rocket past what could be
efficiently rendered with HTML and CSS.&lt;/p&gt;
&lt;h3 id="tiny-particles-of-sand"&gt;Tiny Particles of Sand&lt;/h3&gt;
&lt;p&gt;While developing &lt;a href="/projects/dimo"&gt;DiMo&lt;/a&gt; and &lt;a href="http://kimotion.xyz"&gt;Kimotion&lt;/a&gt;, I became
fond of &lt;a href="http://threejs.org"&gt;three.js&lt;/a&gt; particle systems for their performance and visual
charm.&lt;/p&gt;
&lt;div class="beside"&gt;
    &lt;figure&gt;
        &lt;a href="/projects/dimo"&gt;
            &lt;img src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/swath-colors.jpg" alt="DiMo picture" /&gt;
        &lt;/a&gt;
        &lt;figcaption&gt;Particle gravity simulation in &lt;a href="/projects/dimo"&gt;DiMo: Particles&lt;/a&gt; (50,000 particles)&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;a href="/projects/kimotion"&gt;
            &lt;img src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/kimotion-pic.jpg" alt="Kimotion picture" /&gt;
        &lt;/a&gt;
        &lt;figcaption&gt;Rendering a Kinect depth field with 480,000 particles in &lt;a href="/projects/kimotion"&gt;Kimotion&lt;/a&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;WebGL particle systems can handle many thousands of particles without breaking
a sweat.  It can even handle &lt;em&gt;drawing&lt;/em&gt; millions of particles, although &lt;em&gt;moving&lt;/em&gt;
that many particles is often CPU-bottlenecked.  Fancy &lt;a href="https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units"&gt;tricks&lt;/a&gt; can beat
that limitation, although such tricks are still tedious in WebGL.&lt;/p&gt;
&lt;p&gt;Alright, let's make some particles.&lt;/p&gt;
&lt;h3 id="its-pixel-time"&gt;It's Pixel Time&lt;/h3&gt;
&lt;p&gt;When a network request is detected, the particle system moves a tiny dot in an
arc to its destination.&lt;/p&gt;
&lt;div class="beside"&gt;
    &lt;figure&gt;
        &lt;video style="margin: 0 auto" poster="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic-viz-basic-thumb.jpg" autoplay controls loop&gt;
            &lt;source src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic-viz-basic.mp4" /&gt;
            &lt;source src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic-viz-basic.webm" /&gt;
        &lt;/video&gt;
        &lt;figcaption&gt;Particles arc from purple to blue&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;video style="margin: 0 auto" poster="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic-viz-bluegreen-thumb.jpg" autoplay controls loop&gt;
            &lt;source src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic-viz-bluegreen.mp4" /&gt;
            &lt;source src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic-viz-bluegreen.webm" /&gt;
        &lt;/video&gt;
        &lt;figcaption&gt;Particles alternate between blue and green&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The arcs are defined by sine waves.  Here are the particle arcs as they appear
on-screen, and another shot with sine wave guides showing.&lt;/p&gt;
&lt;div class="beside"&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/pipeline-nosines.jpg" alt="pipeline with particles arcing" /&gt;
        &lt;figcaption&gt;Particle arcs&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure&gt;
        &lt;img src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/pipeline-sines.jpg" alt="pipeline with sine wave guides for the particle arcs" /&gt;
        &lt;figcaption&gt;Sine wave guides&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To prevent the arcs from overlapping with each other too much, I increased each
wave's amplitude based on vertical distance to be traveled.  In essence,
amplitude increases linearly with wavelength.  That's why the green arc is
bigger than the blue arc, etc.&lt;/p&gt;
&lt;p&gt;Initially, the particles traveled in single-file, which obscured the quantity
of particles.  To remedy that, I added a small random horizontal offset unique
to each particle.  The offset diminishes at the ends of the arc, which causes
the particles to fan out near the middle.&lt;/p&gt;
&lt;p&gt;The particles that enter from the right side of the screen represent network
traffic from the audience.  As you can see in the video below, the origin point
of those particles moves randomly up and down to add more visual interest.&lt;/p&gt;
&lt;h3 id="together-at-last"&gt;Together at Last&lt;/h3&gt;
&lt;p&gt;After months of collaborating from across the world, it was wonderful to meet
the whole team in person.  A few days later, all our hard work came together as
well.  All the preparation paid off and the demo worked perfectly.  Here's a
shot of my particle visualization from the official recording.&lt;/p&gt;
&lt;figure&gt;
    &lt;video style="margin: 0 auto" poster="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic-thumb.jpg" autoplay controls loop&gt;
        &lt;source src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic.webm" /&gt;
        &lt;source src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/traffic.mp4" /&gt;
    &lt;/video&gt;
&lt;/figure&gt;

&lt;p&gt;Watch the full keynote here:&lt;/p&gt;
&lt;figure&gt;
&lt;iframe style="display: block; margin: 0 auto;" width="100%" height="315" src="https://www.youtube.com/embed/ooA6FmTL4Dk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/figure&gt;

&lt;h3 id="glow-rope"&gt;Glow Rope&lt;/h3&gt;
&lt;p&gt;Early on, before traffic data was available, I had the particles follow the
mouse instead.  It was pretty fun, so I spun it off into a simple demo called
&lt;a href="/demos/glow-rope"&gt;Glow Rope&lt;/a&gt;.  Give it a try (mouse required)!&lt;/p&gt;
&lt;figure&gt;
    &lt;a href="/demos/glow-rope"&gt;&lt;img src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/glow-rope.jpg" alt="glow rope screenshot" /&gt;&lt;/a&gt;
    &lt;figcaption&gt;&lt;p&gt;&lt;a class="btn btn-default btn-lg" href="/demos/glow-rope"&gt;Play Glow Rope&lt;/a&gt;&lt;/p&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="leaderboard"&gt;Leaderboard&lt;/h3&gt;
&lt;p&gt;In addition to the network traffic visualization, I helped build a leaderboard
view to display the scores and achievements of the top 10 players in the
audience.  &lt;a href="https://twitter.com/andresgalante/"&gt;Andres&lt;/a&gt; created the beautiful design and handed me a static
mockup which I converted into a dynamic template using &lt;a href="http://ractivejs.org/"&gt;Ractive&lt;/a&gt;.  I
then created a WebSocket connection to the &lt;em&gt;score microservice&lt;/em&gt; to populate the
data.  Here's a shot of the winners from the live audience.&lt;/p&gt;
&lt;p&gt;&lt;img alt="photo of final leaderboard" src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/leaderboard-final.jpg" /&gt;&lt;/p&gt;
&lt;h3 id="next-year"&gt;Next Year&lt;/h3&gt;
&lt;p&gt;The amount of work and preparation that goes into a presentation like this was
eye-opening for me.  A week out and tired to the bone, I was thinking "No way
am I doing this next year!"  But the thrill of everyone's hard work coming
together drove away the exhaustion.  I can't wait to see what we can cook up
next year.&lt;/p&gt;
&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/post-thumbnail.jpg"&gt;&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="web"></category><category term="redhat"></category><category term="redhat-summit"></category></entry><entry><title>Square Off</title><link href="https://palebluepixel.org/projects/squareoff" rel="alternate"></link><published>2016-04-19T00:00:00-04:00</published><updated>2016-04-19T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2016-04-19:/projects/squareoff</id><summary type="html">&lt;p&gt;Square Off is a 1v1 airhockey-style game that &lt;a href="https://twitter.com/caramelcode/"&gt;Jared&lt;/a&gt; and &lt;a href="https://twitter.com/mwcz/"&gt;I&lt;/a&gt;
built in 72 hours for the &lt;a href="http://ludumdare.com/compo/2016/04/13/welcome-to-ludum-dare-35/"&gt;Ludum Dare 35 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Square Off is a 1v1 airhockey-style game that &lt;a href="https://twitter.com/caramelcode/"&gt;Jared&lt;/a&gt; and &lt;a href="https://twitter.com/mwcz/"&gt;I&lt;/a&gt;
built in 72 hours for the &lt;a href="http://ludumdare.com/compo/2016/04/13/welcome-to-ludum-dare-35/"&gt;Ludum Dare 35&lt;/a&gt; game jam.  And beacuse it's
web-based, you can...&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="http://sqoff.com"&gt;Play now!&lt;/a&gt;&lt;/p&gt;

&lt;style&gt;
.sqoff-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    grid-gap: 10px;
}
&lt;/style&gt;

&lt;figure class="sqoff-grid"&gt;
    &lt;img src="https://palebluepixel.org/static/images/projects/squareoff/title.png" alt="Square Off title screen" /&gt;
    &lt;img src="https://palebluepixel.org/static/images/projects/squareoff/screenshot.png" alt="Square Off gameplay" /&gt;
&lt;/figure&gt;

&lt;p&gt;We were both very happy with how the game turned out, especially since this was
our first game jam.  Our fellow game creators were nice enough to give us some
&lt;a href="http://ludumdare.com/compo/ludum-dare-35/?action=preview&amp;amp;uid=91554"&gt;pretty good ratings&lt;/a&gt;, too.  Square Off placed 199th overall out of
2,712 games.  Our best scores were in the FUN category where we placed 64th.&lt;/p&gt;
&lt;p&gt;In other words, Square Off placed in the &lt;em&gt;97.6th percentile of fun!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our mad 72-hour dash is documented in this &lt;a href="http://scripta.co/articles/squareoff-ld35/"&gt;retrospective&lt;/a&gt; on the
&lt;a href="http://scripta.co/"&gt;Scripta blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh, and if you're so inclined, &lt;a href="https://github.com/ScriptaGames/SquareOff/"&gt;view source&lt;/a&gt;.&lt;/p&gt;
&lt;div hidden&gt;
    &lt;img hidden src="https://palebluepixel.org/projects/squareoff/square-off-logo.png"&gt;
&lt;/div&gt;</content><category term="programming"></category><category term="ludum-dare"></category><category term="ld35"></category><category term="javascript"></category><category term="phaser"></category><category term="webgl"></category><category term="gamedev"></category><category term="2d"></category><category term="web"></category><category term="squareoff"></category><category term="games"></category></entry><entry><title>Kimotion</title><link href="https://palebluepixel.org/projects/kimotion" rel="alternate"></link><published>2015-09-26T00:00:00-04:00</published><updated>2015-09-26T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-09-26:/projects/kimotion</id><summary type="html">&lt;p&gt;&lt;img class="col-md-7" src="/static/images/gallery/900x/gallery/039/600_5782.JPG" alt="kids playing with kimotion" style="padding-left: 0; padding-right: 30px" /&gt;&lt;/p&gt;
&lt;p&gt;Kimotion is a framework for building reactive art displays.&lt;/p&gt;
&lt;p&gt;Creating an interactive art exhibit with Kimotion is easy.  Draw your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img class="col-md-7" src="/static/images/gallery/900x/gallery/039/600_5782.JPG" alt="kids playing with kimotion" style="padding-left: 0; padding-right: 30px" /&gt;&lt;/p&gt;
&lt;p&gt;Kimotion is a framework for building reactive art displays.&lt;/p&gt;
&lt;p&gt;Creating an interactive art exhibit with Kimotion is easy.  Draw your ideas in
either &lt;a href="http://p5js.org"&gt;2D&lt;/a&gt; or &lt;a href="http://threejs.org"&gt;3D&lt;/a&gt;.  Kimotion will provide information about
the scene, which you can use to influence your display.&lt;/p&gt;
&lt;p&gt;Learn more at &lt;a href="http://kimotion.xyz"&gt;kimotion.xyz&lt;/a&gt;, or if you want to see it in
action...&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="http://kimotion.xyz/live"&gt;Launch live demo!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="video-clips"&gt;Video clips&lt;/h2&gt;
&lt;p&gt;These images, when played in rapid succession, create the illusion of motion!&lt;/p&gt;
&lt;figure&gt;
    &lt;iframe id="vimeo-player" src="https://player.vimeo.com/video/136951447" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
    &lt;div class="vimeo-thumbnails"&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/9.jpg" data-vid-src="https://player.vimeo.com/video/136951447" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/11.jpg" data-vid-src="https://player.vimeo.com/video/137905577" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/3.jpg" data-vid-src="https://player.vimeo.com/video/126292045" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/10.jpg" data-vid-src="https://player.vimeo.com/video/137762679" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/6.jpg" data-vid-src="https://player.vimeo.com/video/136126008" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/5.jpg" data-vid-src="https://player.vimeo.com/video/133870922" /&gt; &lt;/div&gt;
    &lt;/div&gt;
&lt;/figure&gt;

&lt;style type="text/css"&gt;
.vimeo-thumbnails {
    display: grid;
    grid-gap: 10px;
    margin-top: 10px;
    margin-bottom: 10px;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
}
.vimeo-thumbnail {
    cursor   : pointer;
    position : relative;
    z-index  : 9;
    display  : inline-block;
}

.vimeo-thumbnail::before {
    color       : white;
    content     : "\25B6";
    opacity     : 0.8;
    position    : absolute;
    display     : block;
    text-shadow : 0 0 6px black;
    z-index     : 100;
    font-size   : 50px;
    left        : 50%;
    top         : 42%;
    transform   : translate(-50%, -50%);
}

.vimeo-thumbnail:hover::before {
    opacity     : 1;
    text-shadow : 0 0 6px white;
}
&lt;/style&gt;

&lt;script&gt;
var iframe = $('iframe#vimeo-player');

function handle_vid_click() {
    iframe.attr('src', $(this).find('[data-vid-src]').attr('data-vid-src') + '?autoplay=1');
}

function init_vimeo_picker() {
    // get every img with data-vid-src
    // get ref to iframe
    // create onclick for each img which sets iframe's src to data-vid-src
    var vidlinks = $('.vimeo-thumbnail');
    vidlinks.on('click', handle_vid_click);
}

init_vimeo_picker();

function set_vimeo_iframe_height() {
    iframe.attr('height', iframe.width() / (1280/720) );
}

document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
window.addEventListener('resize', set_vimeo_iframe_height);
&lt;/script&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="https://github.com/mwcz/Kimotion"&gt;View source&lt;/a&gt;, if you like code.  Also check out &lt;a href="/projects/dimo"&gt;DiMo: Particles&lt;/a&gt;,
the predecessor to Kimotion.&lt;/p&gt;
&lt;div hidden&gt;&lt;img src="https://palebluepixel.org/projects/kimotion/thumb.png" alt="kimotion thumbnail"&gt;&lt;/div&gt;</content><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="2d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="physics"></category><category term="web"></category><category term="kimotion"></category></entry><entry><title>Make a Kimotion!</title><link href="https://palebluepixel.org/2015/09/26/make-a-kimotion/" rel="alternate"></link><published>2015-09-26T00:00:00-04:00</published><updated>2015-09-26T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-09-26:/2015/09/26/make-a-kimotion/</id><summary type="html">&lt;p&gt;Kimotion is a new framework for building interactive art exhibits.  It will appeal mostly to the Programmer Artist types.  Think "Warrior Poet", but with keyboards.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A year ago, I had the joy of working on Digital Motion, an &lt;a href="https://en.wikipedia.org/wiki/Interactive_art"&gt;interactive
art&lt;/a&gt; exhibit for Raleigh's annual art festival, &lt;a href="https://en.wikipedia.org/wiki/Sparkcon"&gt;SPARKcon&lt;/a&gt;.
The month leading up to SPARKcon 2014 was a mad dash of perfecting the graphics
and physics equations of my &lt;a href="/projects/dimo"&gt;DiMo: Particles&lt;/a&gt; display.  After a
wonderful weekend of watching visitors enjoy the weird things we made, a lesson
began congealing itself in my mind.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Creating interactive art exhibits from scratch is &lt;strong&gt;really&lt;/strong&gt; hard.  Maybe I
can share some of this work, so others can focus on the art...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Creative coding is &lt;em&gt;so much fun&lt;/em&gt; that I can't help but wish more people were
involved.  Nothing cures curmudgeony coders faster than working on a project
where mistakes often make it &lt;em&gt;better&lt;/em&gt;.  With such a steep learning curve,
though, few would get involved.  There would need to be a shared foundation.&lt;/p&gt;
&lt;h3 id="enter-kimotion"&gt;Enter Kimotion&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kimotion.xyz"&gt;Kimotion&lt;/a&gt; is a new framework for building interactive art
exhibits.  It will appeal mostly to the Programmer Artist types.  Think
"Warrior Poet", but with keyboards.&lt;/p&gt;
&lt;p&gt;With Kimotion, you can create a "mod" which is essentially your own blank
canvas.  On the canvas, you can paint pixels, but not boring, everyday pixels.
What you paint can be animated by the movements of the people in the room.&lt;/p&gt;
&lt;p&gt;Videos speak louder than text, so here are some videos of a variety of mods.&lt;/p&gt;
&lt;figure&gt;
    &lt;iframe id="vimeo-player" src="https://player.vimeo.com/video/136951447" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
    &lt;div class="vimeo-thumbnails"&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/9.jpg" data-vid-src="https://player.vimeo.com/video/136951447" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/11.jpg" data-vid-src="https://player.vimeo.com/video/137905577" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/3.jpg" data-vid-src="https://player.vimeo.com/video/126292045" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/10.jpg" data-vid-src="https://player.vimeo.com/video/137762679" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/6.jpg" data-vid-src="https://player.vimeo.com/video/136126008" /&gt; &lt;/div&gt;
    &lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/5.jpg" data-vid-src="https://player.vimeo.com/video/133870922" /&gt; &lt;/div&gt;
    &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;I began building Kimotion in February of 2015, well in advance of SPARKcon X,
which took place in September.  This was a far cry from the single month of
harebrained scampering of the year before!  The extra time, and the existance
of a true framework, allowed many more people to create visualizations (aka
"mods").  In the end, fifteen mods were created in time for the SPARKcon
exhibit.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Over a thousand&lt;/em&gt; people visited our exhibit last weekend.  It's hard to put
into words how rewarding it is to see so many children and adults enjoy the sum
of our planning, hard work, and creativity.&lt;/p&gt;
&lt;h3 id="gallery"&gt;Gallery&lt;/h3&gt;
&lt;p&gt;Here are some photos from SPARKcon X (2015), and setup the night before.&lt;/p&gt;
&lt;p&gt;$GALLERY&lt;/p&gt;
&lt;h3 id="the-future"&gt;The future&lt;/h3&gt;
&lt;p&gt;What's next for Kimotion?  Several SPARKcon attendees had excellent ideas.
From installing Kimotion in schools to putting a permanent installation in
their own homes.&lt;/p&gt;
&lt;p&gt;I love the school idea in particular because, if last weekend was any
indication, kids love this thing and it really encouraged them to move (a lot).&lt;/p&gt;
&lt;p&gt;It would cost a school system very little.  Schools already have (one would
hope) computers and projectors or smartboards.  Kimotion itself is free and
open-source.  The only cost would be the Kinect.  First-edition Kinects often
sell for less than $30 each.  If anyone on a PTA or school board reads this and
finds it interesting, &lt;a href="mailto:mwc@clayto.com"&gt;email&lt;/a&gt; or &lt;a
href="https://twitter.com/mwcz"&gt;tweet&lt;/a&gt; me.&lt;/p&gt;
&lt;p&gt;I started Kimotion with the hope that it would encourage programmers to use
their skills to create elegance that everyone can appreciate.  If children are
also encouraged to exercise, I won't complain!&lt;/p&gt;
&lt;h3 id="e-pluribus-unum"&gt;E Pluribus Unum&lt;/h3&gt;
&lt;p&gt;I can't express how grateful I am to everyone who contributed to Kimotion
itself, created mods, and made the Digital Motion exhibit at SPARKcon a huge
success this year.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Greg Gardner&lt;/dt&gt;
&lt;dd&gt;for taking over and perfecting the kimotion server, implementing record/replay for easy development, and helping me debug *countless* graphical glitches and client issues, and being a software architecture guiding hand&lt;/dd&gt;
&lt;dt&gt;Jared Sprague&lt;/dt&gt;
&lt;dd&gt;for creating the immaculate Fish game mod, beloved by all children, building a new computer to run the exhibit, and cohosting the event with me&lt;/dd&gt;
&lt;dt&gt;Ben Pritchett&lt;/dt&gt;
&lt;dd&gt;for writing tutorial documentation and the great Snake mod&lt;/dd&gt;
&lt;dt&gt;Cas Roberts&lt;/dt&gt;
&lt;dd&gt;for endless encouragement and great ideas, including the very successful recording/replay scheme&lt;/dd&gt;
&lt;dt&gt;Truett Thompson&lt;/dt&gt;
&lt;dd&gt;for keeping geekSPARK on track, on schedule, and funded&lt;/dd&gt;
&lt;dt&gt;Kevin Howell&lt;/dt&gt;
&lt;dd&gt;for creating the enigmatic, unexplainable, and beautiful Spiral mod&lt;/dd&gt;
&lt;dt&gt;Ian Hands&lt;/dt&gt;
&lt;dd&gt;for looping me into the most fun project I've ever worked on&lt;/dd&gt;
&lt;dt&gt;Noel White&lt;/dt&gt;
&lt;dd&gt;for so much organizational geekSPARK work and fundraising&lt;/dd&gt;
&lt;dt&gt;Mary Hands&lt;/dt&gt;
&lt;dd&gt;for saving the entire exhibit friday night when we were flummoxed by hardware failure&lt;/dd&gt;
&lt;dt&gt;Kyle Buchanan&lt;/dt&gt;
&lt;dd&gt;for great questions and alllllllmost finishing his Starfighter mod&lt;/dd&gt;
&lt;dt&gt;Justis Peters&lt;/dt&gt;
&lt;dd&gt;for paving the DiMo trail for the rest of us to follow&lt;/dd&gt;
&lt;dt&gt;Dave Yarwood&lt;/dt&gt;
&lt;dd&gt;for contribution to docs, great questions, and allllllmost-finished music mod&lt;/dd&gt;
&lt;dt&gt;Rowen Sprague&lt;/dt&gt;
&lt;dd&gt;for being the official tester&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id="more-information"&gt;More information&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kimotion.xyz"&gt;Kimotion main project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwcz/Kimotion"&gt;Kimotion source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/projects/dimo"&gt;More about last year's exhibit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opensource.com/life/15/2/sparkcon-geekspark-digital-motion-exhibit"&gt;Opensource.com article about DiMo 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/"&gt;The Deconstruction of Falling Stars&lt;/a&gt; - technical info about how it was built&lt;/li&gt;
&lt;li&gt;&lt;a href="https://palebluepixel.org/2014/08/25/particles-and-p-dimo-comes-to-life/"&gt;Particles and π - DiMo Comes to Life&lt;/a&gt; - more about the exhibit at SPARKcon!&lt;/li&gt;
&lt;/ul&gt;
&lt;style type="text/css"&gt;
.vimeo-thumbnails {
    display: grid;
    grid-gap: 10px;
    margin-top: 10px;
    margin-bottom: 10px;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
}
.vimeo-thumbnail {
    cursor   : pointer;
    position : relative;
    z-index  : 9;
    display  : inline-block;
}

.vimeo-thumbnail::before {
    color       : white;
    content     : "\25B6";
    opacity     : 0.8;
    position    : absolute;
    display     : block;
    text-shadow : 0 0 6px black;
    z-index     : 100;
    font-size   : 50px;
    left        : 50%;
    top         : 42%;
    transform   : translate(-50%, -50%);
}

.vimeo-thumbnail:hover::before {
    opacity     : 1;
    text-shadow : 0 0 6px white;
}
&lt;/style&gt;

&lt;script&gt;
var iframe = $('iframe#vimeo-player');

function handle_vid_click() {
    iframe.attr('src', $(this).find('[data-vid-src]').attr('data-vid-src') + '?autoplay=1');
}

function init_vimeo_picker() {
    // get every img with data-vid-src
    // get ref to iframe
    // create onclick for each img which sets iframe's src to data-vid-src
    var vidlinks = $('.vimeo-thumbnail');
    vidlinks.on('click', handle_vid_click);
}

init_vimeo_picker();

function set_vimeo_iframe_height() {
    iframe.attr('height', iframe.width() / (1280/720) );
}

document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
window.addEventListener('resize', set_vimeo_iframe_height);
&lt;/script&gt;</content><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="2d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="physics"></category><category term="web"></category><category term="kimotion"></category></entry><entry><title>Ping</title><link href="https://palebluepixel.org/projects/ping" rel="alternate"></link><published>2015-06-23T00:00:00-04:00</published><updated>2015-06-23T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-06-23:/projects/ping</id><summary type="html">&lt;p&gt;&lt;a href="/static/projects/ping"&gt;
&lt;img class="col-md-7" src="https://palebluepixel.org/static/images/projects/ping/readme-screenshot.png" alt="screenshot of Ping" style="padding-left: 0; padding-right: 30px" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out Ping!  I created it for my team's booth at &lt;a href="http://www.redhat.com/summit/2015/"&gt;Red Hat Summit
2015&lt;/a&gt; (Red Hat's huge annual conference …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="/static/projects/ping"&gt;
&lt;img class="col-md-7" src="https://palebluepixel.org/static/images/projects/ping/readme-screenshot.png" alt="screenshot of Ping" style="padding-left: 0; padding-right: 30px" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out Ping!  I created it for my team's booth at &lt;a href="http://www.redhat.com/summit/2015/"&gt;Red Hat Summit
2015&lt;/a&gt; (Red Hat's huge annual conference), to promote &lt;a href="https://access.redhat.com/labs/"&gt;Access
Labs&lt;/a&gt;.  It's a 1-4 player pong clone with special powers.&lt;/p&gt;
&lt;p&gt;It's Web-based, so you can play it &lt;em&gt;right this minute&lt;/em&gt;.  Our booth had a
quintet of USB gamepads, but your keyboard works just as well.  Enjoy stomping
the AI (instead of your fellow humans).&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a class="btn btn-default btn-lg" href="/static/projects/ping"&gt;Play now!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even as a lifelong gamer and programmer, this is the first videogame I've made.
I built it within the excellent &lt;a href="http://phaser.io/"&gt;Phaser&lt;/a&gt; framework.  Building it was
incredibly fun and a hurty lesson in the difficulty of game development.
Complexity can really soar out of control when so many subsystems are woven
into a single program.&lt;/p&gt;
&lt;p&gt;Fortuitously, I had recently stolen a copy ($35 is a steal!) of what turned out
to be an excellent book: &lt;a href="http://gameprogrammingpatterns.com/"&gt;Game Programming Patterns&lt;/a&gt; by &lt;a href="https://twitter.com/munificentbob"&gt;Bob
Nystrom&lt;/a&gt;.  Several of the patterns described in that book can be found
inside Ping.&lt;/p&gt;
&lt;p&gt;&lt;img alt="photo of game booth at Red Hat Summit" src="https://palebluepixel.org/static/images/projects/ping/booth.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Roughly 400 people played the game over the course of the event.  The top score
was 597, which earned one dedicated player a pair of sweet headphones.  It was
enriching to see so many people enjoying the game.  Each player experienced the
game in a unique way, which was both surprising and instructive.&lt;/p&gt;
&lt;p&gt;In short, it's fun to make games.  It's even better when other people enjoy
them.  I think this is the beginning of a beautiful friendship.&lt;/p&gt;
&lt;p style="clear:both;height:0"&gt;&amp;nbsp;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="more-information"&gt;More information&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/redhataccess/pinglabs/"&gt;View source&lt;/a&gt; - the project's GitHub repo&lt;/li&gt;
&lt;li&gt;&lt;a href="https://access.redhat.com/labs/"&gt;Red Hat Access Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phaser.io/"&gt;Phaser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="javascript"></category><category term="phaserjs"></category><category term="games"></category><category term="red hat"></category><category term="red hat summit"></category><category term="gamedev"></category><category term="ping"></category></entry><entry><title>WebAssembly is the Keystone</title><link href="https://palebluepixel.org/2015/06/20/webassembly-is-the-keystone/" rel="alternate"></link><published>2015-06-20T22:52:24-04:00</published><updated>2015-06-20T22:52:24-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-06-20:/2015/06/20/webassembly-is-the-keystone/</id><summary type="html">&lt;p&gt;Within the last two days, WebAssembly (&lt;strong&gt;wasm&lt;/strong&gt;) has graced the eyeballs of
every JavaScript developer.  If wasm is new to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Within the last two days, WebAssembly (&lt;strong&gt;wasm&lt;/strong&gt;) has graced the eyeballs of
every JavaScript developer.  If wasm is new to you, the articles linked at the
end of this post fully describe what wasm &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Since that's been covered, I'd like to talk about one impact wasm will
hopefully have on future of computing.  To set the scene, a quote from the man
himself:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;Meanwhile, I took one quick step that would demonstrate the concept of the
        Web as a universal, all-encompassing space.  I programmed the browser so it
        could follow links not only to files on HTTP servers, &amp;hellip;&lt;/p&gt;
    &lt;p&gt;In one fell swoop, a huge amount of the information that was already on the
        Internet was available on the Web.&lt;/p&gt;
    &lt;footer&gt;
        &lt;cite&gt;
            Tim Berners-Lee, Weaving the Web, 1999
        &lt;/cite&gt;
    &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back then, Tim enabled the first Web browser to follow links to newsgroups and
FTP servers.  By linking up a slew of existing content, the Web became much
more useful.&lt;/p&gt;
&lt;p&gt;This realization is pretty potent.  The web has taken over the world because of
the power of linking things together, especially things not yet on the web.  I
was initially surprised that Tim saw the now-humble URL as the most vital Web
technology and had it standardized before HTTP and HTML.&lt;/p&gt;
&lt;p&gt;Today, we can follow URLs to images, videos, articles, text, PDFs; most types
of media are linkable.  Clicking/tapping a link is the most commonplace thing
in the world.&lt;/p&gt;
&lt;p&gt;There's one type of content that still isn't linkable, though: &lt;em&gt;Applications&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the past ten years, the JavaScript revolution has been trying to make real
the dream of &lt;strong&gt;following a URL to an application&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It's been a circuitous, roundabout, and partially successful journey.
&lt;a href="http://emscripten.org/"&gt;Emscripten&lt;/a&gt; has made it possible and &lt;a href="http://asmjs.org/"&gt;asm.js&lt;/a&gt; made it
faster.&lt;/p&gt;
&lt;p&gt;My great hope for WebAssembly is that it can bring the world's teeming vault of
existing applications onto the web, with very little fuss.  Imagine using
Photoshop merely by going to &lt;code&gt;photoshop.adobe.com&lt;/code&gt;, and you'll have some idea
of where WebAssembly might carry us.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After the WebAssembly announcement, I read every bit of documentation currently
available, about a dozen articles, joined the &lt;a href="https://www.w3.org/community/webassembly/"&gt;W3C Community Group&lt;/a&gt;,
and have been hanging out in the IRC channel
(&lt;code&gt;irc://irc.w3.org:6667/#webassembly&lt;/code&gt;).  I don't want to speak too soon, but
I'm pretty well convinced that wasm is the next revolution.&lt;/p&gt;
&lt;!-- I'm imagining a future where this is a desktop shortcut:

    wasm://adobe.com/photoshop

A few thoughts about the future of wasm:

### Live installs

wasm has the potential to be the LiveCD of applications.  Imagine visiting a
wasm application in your browser.  If it's great, you might want to install it
locally.


--&gt;

&lt;p&gt;For further reading, here are some of the best articles I've found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WebAssembly/design/blob/master/FAQ.md"&gt;The wasm FAQ covers nearly everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/luke/2015/06/17/webassembly/"&gt;Luke Wagner's initial announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly/#buried-lede"&gt;Brendan Eich's practical and lighthearted appeal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6"&gt;Eric Elliot makes a strong and diverse case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/"&gt;ArsTechnica brings wasm to a wider audience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div hidden&gt;
&lt;img src="https://palebluepixel.org/2015/06/20/webassembly-is-the-keystone/asm.png"&gt;
&lt;/div&gt;</content><category term="wasm"></category><category term="web"></category><category term="javascript"></category></entry><entry><title>The Lurking Horror</title><link href="https://palebluepixel.org/2015/06/20/the-lurking-horror/" rel="alternate"></link><published>2015-06-20T21:13:00-04:00</published><updated>2015-06-20T21:13:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-06-20:/2015/06/20/the-lurking-horror/</id><summary type="html">&lt;p&gt;In the midst of this beastly summer we've just entered, nothing seems farther
away than the lung-clenching air of winter …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the midst of this beastly summer we've just entered, nothing seems farther
away than the lung-clenching air of winter.  When things are this hot, and
pools and popsicles fail to cool, there's one foolproof way to get into the
spirit of winter: The Lurking Horror.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... you practically froze to death slogging over here from the dorm.  Not to
mention jumping at every shadow, what with all the recent disappearances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Lurking Horror is a classic Infocom text adventure and a sibling of Zork.
For best results, couple this game with Cool-Retro-Term, a Cathode-Ray-Tube
terminal monitor simulator.  &lt;abbr title="Cool-Retro-Term"&gt;CRT&lt;/abbr&gt; boots you
off your 2015 high-DPI display and beams you into a world of 1980s nostalgia.&lt;/p&gt;
&lt;p&gt;First &lt;a href="https://github.com/Swordfish90/cool-retro-term#get-cool-retro-term"&gt;install cool-retro-term&lt;/a&gt;.  Then install &lt;a href="https://github.com/DavidGriffith/frotz"&gt;frotz&lt;/a&gt; (the
Z-Machine engine which runs all the old Infocom text adventures).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install frotz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Locate &lt;code&gt;LURKING.DAT&lt;/code&gt; in your copy of Lurking Horror, and...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;frotz LURKING.DAT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="The Lurking Horror running in Cool-Retro-Term" src="https://palebluepixel.org/2015/06/20/the-lurking-horror/lurking-horror-crt.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Crank up the AC, grab your clicky keyboard, make CRT fullscreen, turn off the
lights, and bathe in the cool cathode rays.&lt;/p&gt;
&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2015/06/20/the-lurking-horror/lurking-horror-crt-thumb.jpg"&gt;&lt;/p&gt;</content><category term="text adventure"></category><category term="terminal"></category><category term="cool-retro-term"></category><category term="gaming"></category><category term="nostalgia"></category></entry><entry><title>Naming Names - Anonymity is Dead</title><link href="https://palebluepixel.org/2015/01/01/naming-names-anonymity-is-dead/" rel="alternate"></link><published>2015-01-01T00:00:00-05:00</published><updated>2015-01-01T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-01-01:/2015/01/01/naming-names-anonymity-is-dead/</id><summary type="html">&lt;p&gt;Naming things is hard enough, and JavaScript doesn't make it any easier.  Should anonymous functions be considered harmful?&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
    &lt;p&gt;
    There are only two hard problems in computer science: cache invalidation,
    naming things, and off-by-one errors.
    &lt;/p&gt;
    &lt;footer&gt;
        &lt;cite&gt;
            Phil Karlton, but I can't find a name for the original source...
        &lt;/cite&gt;
    &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contriving names for things is so commonplace for computer programmers that we
may be thinking up names more often than any other profession.  Every day,
usually dozens of times, I find myself trying to imagine the perfect name for a
function or variable or module.  Then I remember that there's a term for the
&lt;em&gt;process&lt;/em&gt; of formulating the perfect name for a thing.&lt;/p&gt;
&lt;p&gt;I just can't remember what it's called...&lt;/p&gt;
&lt;p&gt;Then I find myself sitting there, trying to think of the perfect name for the
process of creating the perfect name for a thing when I should be &lt;em&gt;actually&lt;/em&gt;
dreaming up the perfect name for that thing.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://palebluepixel.org/2015/01/01/naming-names-anonymity-is-dead/naming.gif" alt="naming is hard" /&gt;
    &lt;figcaption&gt;Naming is hard.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Can you relate?  The word, by the way, is...&lt;/p&gt;
&lt;dl&gt;
    &lt;dt&gt;onomastics - n.&lt;/dt&gt;
    &lt;dd&gt;1. The study of the origins and forms of proper names.&lt;/dd&gt;
    &lt;dd&gt;2. The study of the origins and forms of terms used in specialized fields.&lt;/dd&gt;
    &lt;dd&gt;3. The system that underlies the formation and use of proper names or terms used in specialized fields.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Short, but informative names are important in all programming languages, though
JavaScript's anonymous functions do pose a unique temptation.&lt;/p&gt;
&lt;p&gt;For those unfamiliar, an anonymous function is, unsurprisingly, a function
declaration without a name.&lt;/p&gt;
&lt;p&gt;A named function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function count_sheep() { /* code */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An anonymous function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function () { /* code */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One has a name, one doesn't.  Other than two low-level (and usually
inconsequental) behavioral differences, they're drop-in replacements for one
another.  The primary difference is that one has a name, so you can tell what
it does.  So, pick the one that has the name!  Easy choice, right?&lt;/p&gt;
&lt;p&gt;I wish!  Choosing a name is a very real mental tax.  Choosing a &lt;em&gt;good&lt;/em&gt; name
is time-consuming and often impossible.  That is why, I feel, anonymous
functions are used so commonly in JavaScript programs.&lt;/p&gt;
&lt;p&gt;Anonymous functions &lt;strong&gt;free the programmer from the responsibility of choosing a
name&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As a practical example, here's some code from the &lt;a href="http://datatables.net/examples/api/api_in_init.html"&gt;jQuery DataTables example
page&lt;/a&gt;, with three nested anonymous functions.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::javascript
$(document).ready(function() {
    $('#example').dataTable( {
        "initComplete": function () {
            var api = this.api();
            api.$('td').click( function () {
                api.search( this.innerHTML ).draw();
            } );
        }
    } );
} );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are much (&lt;strong&gt;much&lt;/strong&gt;!) more deeply nested examples of the Pyramid of Doom,
but this one serves well as an example.  If it had been implemented with short,
named functions, it would be something like the following.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(document).ready( create_datatable );

function create_datatable() {
    $('#example').dataTable( {
        "initComplete": init_datatable_api
    } );
}

function init_datatable_api() {
    var api = this.api();
    api.$('td').click( filter_datatable );
}

function filter_datatable() {
    api.search( this.innerHTML ).draw();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This updated code isn't perfect, to be sure, but the first line really
exemplifies this benefits of this approach, to me.  &lt;code&gt;$(document).ready(
create_datatable )&lt;/code&gt; reads so clearly.&lt;/p&gt;
&lt;p&gt;The joy of small functions is a discovery I'm making and re-making every day.
I've been &lt;em&gt;craving&lt;/em&gt; a programming style like this for years, but it wasn't
until I read &lt;a href="http://amzn.com/1449360726"&gt;Functional JavaScript&lt;/a&gt; (and all the FP talk on
&lt;a href="http://www.reddit.com/r/programming"&gt;r/programming&lt;/a&gt;) that my eyes opened.&lt;/p&gt;
&lt;p&gt;Very, very small, reusable functions are a joy to work with.  Give it a try, if
you haven't yet!&lt;/p&gt;
&lt;script&gt;
$('pre code').each(add_prism_js);
function add_prism_js(i, el) {
    $(el).addClass('language-javascript');
}
&lt;/script&gt;</content><category term="programming"></category><category term="javascript"></category><category term="web"></category></entry><entry><title>DiMo: The Deconstruction of Falling Stars</title><link href="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/" rel="alternate"></link><published>2014-10-30T00:00:00-04:00</published><updated>2014-10-30T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-10-30:/2014/10/30/dimo-the-deconstruction-of-falling-stars/</id><summary type="html">&lt;p&gt;The construction of a WebGL particle physics gravity simulation &lt;em&gt;slash&lt;/em&gt; interactive art installation.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Imagine a solitary blue dot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="small dot" src="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/smalldot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Unless you let your imagination run away with itself, this is going to be a
pretty boring dot.  Now, imagine a second, larger dot (you can pick the color).&lt;/p&gt;
&lt;p&gt;&lt;img alt="small dot and large dot" src="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/smalldot-largedot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Red, nice choice!  The scene is now slightly more interesting, since now you've
got two dots to think about.  You can ponder their positions, and relative
sizes.  No motion though; still pretty boring!&lt;/p&gt;
&lt;p&gt;Pretty soon, your keen and restless mind will imagine that the larger dot
exerts a gravitational pull on the smaller one.  The small dot begins moving
towards the large one.  It's speed increases exponentially the closer it gets.
Now an orbit can form.  Thanks, Newton!&lt;/p&gt;
&lt;p&gt;&lt;img alt="orbit" src="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/orbit.gif" title="When I recorded this gif, it lined up *completely* by chance.  So lucky.  It would have been a PITA to try to line up the dot so the orbit looped smoothly!  There is a slight jump, but it's subtle." /&gt;&lt;/p&gt;
&lt;p&gt;The dot's orbit is reminiscent of a planet orbiting a star.  Neat.&lt;/p&gt;
&lt;p&gt;Wait, did you see that?  You just moved the big dot.  Look again!  Now there
are thousands and thousands of tiny dots, each being accelerated toward the big
dot!&lt;/p&gt;
&lt;figure&gt;

    &lt;iframe id="dimo-demo" src="//player.vimeo.com/video/108714486" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

    &lt;figcaption&gt;
        &lt;a href="http://vimeo.com/108714486"&gt;View on vimeo&lt;/a&gt;
    &lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Peculiar.  The multitude of dots starts to look &lt;em&gt;oddly&lt;/em&gt; reminiscent of fluid
sloshing around in a container.  Or a cloud of gas forming a star.  Weird, huh?
Maybe they're the same thing!&lt;/p&gt;
&lt;p&gt;Now, before I ramble on any further, let your imagination take a rest while you
try out the simulation!&lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-default btn-lg" href="/static/projects/dimo/"&gt;Launch live demo!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A reasonably recent web browser required.  WebGL is required, which means
Firefox 4+ or Chrome 9+.&lt;/p&gt;
&lt;h2 id="the-premise"&gt;The Premise&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Players wave illuminated batons around and cool stuff happens!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a href="/2014/08/25/particles-and-p-dimo-comes-to-life/"&gt;DiMo Comes to Life&lt;/a&gt; for a , not-at-all dramatized
summary of DiMo.&lt;/p&gt;
&lt;p&gt;"DiMo" is a recurring interactive art exhibit at geekSPARK, which is held
during SPARKcon each year in Raleigh, NC.  This year, I created the particle
gravity simulation visualization for DiMo.  There was also a visualization of
Conway's Game of Life, and an original game where players eat doritos and spray
soda at people who eat doritos.&lt;/p&gt;
&lt;h2 id="particles"&gt;Particles&lt;/h2&gt;
&lt;p&gt;The particles' main job is to swirl around and look cool.  They are pulled
gravitationally toward the player pieces, but the particles themselves don't
exert gravity on each other.&lt;/p&gt;
&lt;h3 id="gravity"&gt;Gravity&lt;/h3&gt;
&lt;p&gt;The gravity calculation was written first with inlined calculations, then with
ThreeJS vector objects, then with &lt;a href="http://glmatrix.net/"&gt;glmatrix&lt;/a&gt;, and then inlined again.  The
inlined code performance wasn't distinguishable from the glmatrix
implementation.  Since glmatrix is very fast and much more readable, I stuck
with it for a while.&lt;/p&gt;
&lt;p&gt;ThreeJS's vector calculations, on the other hand, were awful.  Each function
call created a new vector object.  Each acceleration calculation caused the
creation of 12 vector objects.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 10,000 particles    *
    60 fps           *
    12 objects       *
     3 player pieces
---------------------------------
 21,600,000 new objects per second
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Needless to say, the performance was &lt;em&gt;terrible&lt;/em&gt;.  I then implemented the gravity
equation using glmatrix's in-place vector operations.  glmatrix's vector
functions insert their output into an existing vector instead of creating a new
vector for each function call, like ThreeJS' API does.  The number of new
objects created per second by the gravity equation dropped from &lt;code&gt;21,600,000&lt;/code&gt;
down to zero.&lt;/p&gt;
&lt;p&gt;glmatrix served quite well for a while, but in the end I improved performance
even more by writing an inline gravity equation by hand.  Perhaps it was just
function call overhead that was hurting performance.&lt;/p&gt;
&lt;h3 id="coloring-methods"&gt;Coloring methods&lt;/h3&gt;
&lt;p&gt;Once the gravity function was implemented, some beautification was in order.&lt;/p&gt;
&lt;p&gt;Originally, each particle was randomly assigned either red, green, or blue.&lt;/p&gt;
&lt;p&gt;&lt;img alt="early dimo image, with randomly assigned colors" src="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/random-colors.png" /&gt;&lt;/p&gt;
&lt;p&gt;The gravitational swirls may look kinda cool, but the colors are hectic.  This
&lt;em&gt;isn't&lt;/em&gt; one of those rare cases where randomness is beautiful.  It occurred to
me that seeing big swaths of color through all the particles might look
better.&lt;/p&gt;
&lt;h4 id="cololololololors"&gt;Cololololololors&lt;/h4&gt;
&lt;p&gt;But what criteria should be used to decide what color each particle should
receive?&lt;/p&gt;
&lt;p&gt;The simplest approach would be to color the particles based on their distance
from the players, and that's essentially what I did.  The equations below use
each particle's speed &lt;em&gt;and&lt;/em&gt; acceleration to determine what color they should be
assigned each frame.&lt;/p&gt;
&lt;figure&gt;
    &lt;div role="math"&gt;
        n = \dfrac{2\pi \cdot \lvert\vec{v}\rvert \cdot \lvert\vec{a}\rvert}{a_{max}}
    &lt;/div&gt;
    &lt;div role="math"&gt;
        \red{R(n)}   = \dfrac{\cos(n + 1.76714) + 1}{2}
    &lt;/div&gt;
    &lt;div role="math"&gt;
        \green{G(n)} = \dfrac{\cos(n + 3.92699) + 1}{2}
    &lt;/div&gt;
    &lt;div role="math"&gt;
        \blue{B(n)} = \dfrac{\cos(n + 5.89048) + 1}{2}
    &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;span role="math"&gt;\vec{a}&lt;/span&gt; is the acceleration vector, and &lt;span
role="math"&gt;\vec{v}&lt;/span&gt; is the velocity vector.  &lt;span
role="math"&gt;a_{max}&lt;/span&gt; is the maximum magnitude an acceleration vector is
allowed to have (configurable via the "max accel" parameter in the UI config
panel).  The decimal constants are there to evenly distribute the waves, and
because I was too lazy to figure out the correct fraction to use.&lt;/p&gt;
&lt;p&gt;The range of &lt;code&gt;cos&lt;/code&gt; and &lt;code&gt;sin&lt;/code&gt; are &lt;code&gt;-1..1&lt;/code&gt;, but the color values I needed are
&lt;code&gt;0..1&lt;/code&gt;.  The &lt;code&gt;+1&lt;/code&gt; addition shifts the output into &lt;code&gt;0..2&lt;/code&gt;, and the &lt;code&gt;/2&lt;/code&gt; division
scales it down to &lt;code&gt;0..1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When graphed, they look like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Roughly evenly-spaced sine waves" src="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/sine_waves.png" /&gt;&lt;/p&gt;
&lt;p&gt;The cosine allows the colors to cycle repeatedly (R,G,B,R,G,B,...) as the
input, &lt;span role="math"&gt;n&lt;/span&gt;, increases.  Here's the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image of the swaths of color" src="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/swath-colors.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yes!&lt;/em&gt;  Swaths of color, cycling through the spectrum like a rainbow.&lt;/p&gt;
&lt;h4 id="the-grand-programmers-utopia-gpu"&gt;The Grand Programmers' Utopia (GPU)&lt;/h4&gt;
&lt;p&gt;After bumping up against my CPU's limits while implementing gravity, I was
certain of one thing: I wanted to rely on the CPU as little as possible.&lt;/p&gt;
&lt;p&gt;I had a vague intuition that pixel shaders were the answer, since, hey, pixel
shaders control the colors of pixels, right?  It turned out my understanding of
shaders was pretty far off, but they &lt;em&gt;are&lt;/em&gt; the right tool for the job.&lt;/p&gt;
&lt;p&gt;Shaders are small programs that run on your video card's processor(s) (the
"GPU").  They come in a variety of languages, but shaders in WebGL are written
in &lt;a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language"&gt;GLSL&lt;/a&gt;, a subset of C.&lt;/p&gt;
&lt;p&gt;Learning about and writing the shaders was the most fun and educational aspect
of this project, mostly because graphics programming is uniquely rewarding
among all types of programming.  Often an unanticipated quirk of an equation
(or even a typo!) will result in a very cool surprise.  In short, "just trying
stuff" pays off &lt;em&gt;far&lt;/em&gt; more than in any other branch of programming.&lt;/p&gt;
&lt;h4 id="more-than-colors"&gt;More than colors?&lt;/h4&gt;
&lt;p&gt;The more particles I add to the visualization, the better it looks.  1,000
particles just look like a bunch of specks, but 100,000 particles start to look
like clouds of swirling vapor.  Since the gravity calculations are so
demanding, I wanted to offload as much work as possible onto the GPU.&lt;/p&gt;
&lt;p&gt;The Web doesn't currently have an API for doing general-purpose calculations on
the GPU (although &lt;a href="https://en.wikipedia.org/wiki/WebCL"&gt;WebCL&lt;/a&gt; is in the pipeline).  It is possible to do
limited calculations, by doing your calculation in a fragment shader and
encoding the results, as pixel color values, into an in-memory texture (FBO).&lt;/p&gt;
&lt;p&gt;Sadly, a combination of limited time and inexperience prevented me from getting
the gravity calculations onto the GPU.&lt;/p&gt;
&lt;p&gt;In 2012, Edouard Coulon created a similar particle gravity simulation called
&lt;a href="http://www.chromeexperiments.com/detail/gpu-particle-attractors/?f="&gt;GPU Particle Attractors&lt;/a&gt;, using the texture approach, and
achieved 1,000,000 particles.  Tragically, his website is gone and I couldn't
find his demo hosted anywhere else.  Edouard, if you read this, please reach
out to me.  I'd love to learn from your work.&lt;/p&gt;
&lt;p&gt;In the end, I had to settle for 25,000 particles on my laptop.  For the art
installation, we used a pretty beefy gaming rig, and I was able to bump it up
to 50,000 (thanks Charan!).&lt;/p&gt;
&lt;h3 id="whats-next"&gt;What's next?&lt;/h3&gt;
&lt;p&gt;Here's my wishlist for further improvements to the visualization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do gravity calculations on the GPU, which would enable either...&lt;ul&gt;
&lt;li&gt;several orders of magnitude more particles, or&lt;/li&gt;
&lt;li&gt;particles can exert gravity on each other&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add a calibration system which would determine how many particles a user's
   computer is capable of rendering&lt;/li&gt;
&lt;li&gt;adjust the canvas sizing code, to allow the visualization to be easily
   embedded in other pages (it currently full-screens itself)&lt;/li&gt;
&lt;li&gt;add even more configuration parameters and presets.  DiMo is capable of a
   nice range of effects and patterns, but many of them require nitpicky
   tweaking of sliders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More likely, I'll use what I learned from DiMo on a super-secret future
project.&lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="/static/js/katex/katex.min.css"&gt;
&lt;script src="/static/js/katex/katex.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
    function set_vimeo_iframe_height() {
        var ifr = document.getElementById('dimo-demo');
        ifr.height = ifr.offsetWidth / (1280/720);
    }
    document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
    window.addEventListener('resize', set_vimeo_iframe_height);
    function render_math() {
        katex.render(this.innerHTML, this);
    }
    $('[role=math]').each(render_math);
&lt;/script&gt;&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="requirejs"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="physics"></category><category term="web"></category></entry><entry><title>DiMo: Particles</title><link href="https://palebluepixel.org/projects/dimo" rel="alternate"></link><published>2014-08-25T00:00:00-04:00</published><updated>2014-08-25T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-08-25:/projects/dimo</id><summary type="html">&lt;p&gt;&lt;img class="col-md-7" src="https://palebluepixel.org/static/images/projects/dimo/setup.jpg" alt="night-before setup image" style="padding-left: 0; padding-right: 30px" /&gt;&lt;/p&gt;
&lt;p&gt;Dimo: Particles is an artistic particle physics simulation and interactive art
exhibit I created (along with fellow Red Hat engineers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img class="col-md-7" src="https://palebluepixel.org/static/images/projects/dimo/setup.jpg" alt="night-before setup image" style="padding-left: 0; padding-right: 30px" /&gt;&lt;/p&gt;
&lt;p&gt;Dimo: Particles is an artistic particle physics simulation and interactive art
exhibit I created (along with fellow Red Hat engineers Ian Hands and Ben
Pritchett) for the &lt;a href="https://en.wikipedia.org/wiki/sparkcon"&gt;SPARKcon&lt;/a&gt; festival in 2014.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-default btn-lg" href="/static/projects/dimo/"&gt;Launch live demo!&lt;/a&gt;&lt;/p&gt;

&lt;div class="clearfix"&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h2 id="pictures"&gt;Pictures&lt;/h2&gt;
&lt;p&gt;These pictures are from the art exhibit at geekSPARK in 2014.&lt;/p&gt;
&lt;p&gt;$GALLERY&lt;/p&gt;
&lt;p&gt;After the event, I wrote this &lt;a href="http://opensource.com/life/15/2/sparkcon-geekspark-digital-motion-exhibit"&gt;opensource.com article&lt;/a&gt; about the experience.&lt;/p&gt;
&lt;p&gt;The source code is, of course, &lt;a href="https://github.com/geekspark-rh/dimo-renderer"&gt;open&lt;/a&gt;.&lt;/p&gt;</content><category term="programming"></category><category term="javascript"></category><category term="requirejs"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="physics"></category></entry><entry><title>Particles and π - DiMo Comes to Life</title><link href="https://palebluepixel.org/2014/08/25/particles-and-p-dimo-comes-to-life/" rel="alternate"></link><published>2014-08-25T00:00:00-04:00</published><updated>2014-08-25T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-08-25:/2014/08/25/particles-and-p-dimo-comes-to-life/</id><summary type="html">&lt;p&gt;A player walks up Fayetteville St in Raleigh, North Carolina.  SPARKcon has begun, and dozens of artists are ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;A player walks up Fayetteville St in Raleigh, North Carolina.
&lt;a href="http://www.sparkcon.com/"&gt;SPARKcon&lt;/a&gt; has begun, and dozens of artists are strewn along the
street, hard at work creating elaborate chalk art on the asphalt.  A light rain
is falling, and some artists are holding umbrellas over their work, some have
draped tarps over themselves and their sketches, but most don't seem to care,
as if creating their art is more important than how long it lasts.&lt;/p&gt;
&lt;p&gt;Up ahead is a gnarly-looking wrought-iron handrail covered in small
stegasaurus-like spikes.  The spikes make its use as a handrail questionable,
but it does keep pedestrians from plummeting into the stairwell below.&lt;/p&gt;
&lt;p&gt;The stairwell looks dingy, but a large green arrow points down, and so she
descends to escape the rain.&lt;/p&gt;
&lt;p&gt;It's dark inside, but on the far wall, swirling clouds of colored dots orbit
around three circles.  The silhouettes of three children stand on pedistals
near the wall, each one waving an illuminated baton.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://palebluepixel.org/2014/08/25/particles-and-p-dimo-comes-to-life/dimo-kids.jpg" alt="children playing DiMo"&gt;
    &lt;figcaption&gt;photo by Yujin Kim&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After watching closely for a few moments, the rules of motion start to come
together in her mind.  Each child's baton is emanating a different color; red,
green, and blue.  As they swing the batons, large red, green, and blue circles
swoosh through the colored clouds.  &lt;/p&gt;
&lt;p&gt;The large colored circles seem to exert an attractive gravitational force on
the particles.  Orbits are formed, and tiny solar systems glow brilliantly.&lt;/p&gt;
&lt;figure&gt;

    &lt;iframe id="dimo-demo" src="//player.vimeo.com/video/107405612" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

    &lt;figcaption&gt;
        &lt;a href="http://vimeo.com/107405612"&gt;GeekSPARK: Digital Motion (DiMo) desktop demo&lt;/a&gt;
    &lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;DiMo (short for Digital Motion) is an annual exhibit at GeekSPARK, which itself
is a branch of SPARKcon.  I haven't been to any previous years' installations,
but this year included digital visualizations projected onto a large wall, with
three LED batons that visitors could use to control the visualizations.&lt;/p&gt;
&lt;p&gt;I created one of the three "exhibits", the one you see in the video.  Each
exhibit used the same set of input: the coordinates of the colored batons.  My
exhibit is a particle gravity simulation, created with WebGL (&lt;a href="http://threejs.org/"&gt;three.js&lt;/a&gt;,
specifically), &lt;a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language"&gt;GLSL&lt;/a&gt;, and many other tools.&lt;/p&gt;
&lt;h2 id="event-photos"&gt;Event photos&lt;/h2&gt;
&lt;p&gt;Enjoy these photos from Digital Motion at SPARKcon 2014.&lt;/p&gt;
&lt;p&gt;$GALLERY&lt;/p&gt;
&lt;p&gt;I'm working on a follow-up post, with technical information about the
implementation.  &lt;em&gt;Update&lt;/em&gt; it's 
&lt;a href="https://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;This (2014) was my first year as a volunteer, but it was a tremendously
educational and &lt;em&gt;fun&lt;/em&gt; experience, so I'll definitely be back next year.
&lt;em&gt;Update&lt;/em&gt; &lt;a href="https://palebluepixel.org/2015/09/26/make-a-kimotion/"&gt;2015's exhibit info and pictures!&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="thanks"&gt;Thanks&lt;/h2&gt;
&lt;p&gt;I've written mostly about my own contribution to DiMo here, because that's what
I'm most familiar with, but in reality it was only a piece of the DiMo puzzle.
There were two other visualizations, both of which used the lighted batons as
input.  I would love to link to their creators' websites, but I'm still waiting
on URLs.  Thanks to them, too!&lt;/p&gt;
&lt;p&gt;Ian Hands, for organizing the project, asking me to participate, writing the
input server, and coming up with the whole idea.&lt;/p&gt;
&lt;p&gt;Ben Pritchett for code contributions to the renderer and the server, and for
his work on two input sources (music BPM and a &lt;em&gt;brain machine&lt;/em&gt;) which didn't
make it into this year's exhibit, but we'll almost certainly use next year.&lt;/p&gt;
&lt;p&gt;Justis Peters is the lead coordinator of GeekSPARK, and, I think, the founder
of DiMo, and none of this would have happened without him.&lt;/p&gt;
&lt;p&gt;Thanks also to the &lt;a href="https://www.facebook.com/ncsufishmarket"&gt;Raleigh Fish Market Gallery&lt;/a&gt; for providing us a
venue and letting us paint the projection wall white, and to Yujin Kim for
taking some awesome pictures.&lt;/p&gt;
&lt;p&gt;Most of all, thank you to the visitors who descended that dingy stairwell to
see our exhibits!  Seeing their smiles as they waved the batons was incredibly
rewarding.  Everyone seemed to have fun.  One kid liked it so much he cried
when it was time to leave.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ring animation in dimo" src="https://palebluepixel.org/2014/08/25/particles-and-p-dimo-comes-to-life/ring-anim.gif" /&gt;&lt;/p&gt;
&lt;p&gt;You can find all the code at our &lt;a href="https://github.com/geekspark-rh/"&gt;GitHub group&lt;/a&gt;.  The
visualization code described in this post is in the &lt;a href="https://github.com/geekspark-rh/dimo-renderer"&gt;dimo-renderer&lt;/a&gt;
repo.&lt;/p&gt;
&lt;script&gt;
    function set_vimeo_iframe_height() {
        var ifr = document.getElementById('dimo-demo');
        ifr.height = ifr.offsetWidth / (1920/1080);
    }
    document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
    window.addEventListener('resize', set_vimeo_iframe_height);
&lt;/script&gt;</content><category term="programming"></category><category term="javascript"></category><category term="requirejs"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="physics"></category><category term="web"></category><category term="kimotion"></category></entry><entry><title>Pale Blue Pixel</title><link href="https://palebluepixel.org/projects/palebluepixel" rel="alternate"></link><published>2014-06-29T00:00:00-04:00</published><updated>2014-06-29T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-06-29:/projects/palebluepixel</id><summary type="html">&lt;p&gt;&lt;a href="/" title="palebluepixel.org"&gt;Pale Blue Pixel&lt;/a&gt; is this blog.  I write technical posts about web
development, image processing, amateur graphics, and generally celebrating …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="/" title="palebluepixel.org"&gt;Pale Blue Pixel&lt;/a&gt; is this blog.  I write technical posts about web
development, image processing, amateur graphics, and generally celebrating the
art and craft of programming.  The name &lt;em&gt;Pale Blue Pixel&lt;/em&gt; is a meek tribute to
Carl Sagan's &lt;a href="https://www.youtube.com/watch?v=nl5dlbCh8lY"&gt;Pale Blue Dot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="palebluepixel.org screenshot" src="https://palebluepixel.org/static/images/projects/screenshot_palebluepixel.png" title="palebluepixel.org screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;It's currently powered by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://python.org/" title="Python website"&gt;Python&lt;/a&gt;&lt;/strong&gt; - a large and powerful snake&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://blog.getpelican.com/" title="Pelican website"&gt;Pelican&lt;/a&gt;&lt;/strong&gt; - an awkwardly-shaped sea bird&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Grid&lt;/strong&gt; - framework-free CSS thanks to grid and flexbox&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://lesscss.org/" title="LESS css preprocessor website"&gt;LESS&lt;/a&gt;&lt;/strong&gt; - CSS preprocessor&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://pages.github.com/" title="GitHub pages website"&gt;GitHub pages&lt;/a&gt;&lt;/strong&gt; - hosting&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>RGB WebGL Color Cube</title><link href="https://palebluepixel.org/2014/03/23/rgb-webgl-color-cube/" rel="alternate"></link><published>2014-03-23T00:00:00-04:00</published><updated>2014-03-23T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-03-23:/2014/03/23/rgb-webgl-color-cube/</id><summary type="html">&lt;p&gt;I spent a bit of time this weekend building an RGB color cube for
&lt;a href="http://colorpal.org"&gt;ColorPal&lt;/a&gt;, using &lt;a href="http://threejs.org"&gt;Three.js&lt;/a&gt;.  Drag and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I spent a bit of time this weekend building an RGB color cube for
&lt;a href="http://colorpal.org"&gt;ColorPal&lt;/a&gt;, using &lt;a href="http://threejs.org"&gt;Three.js&lt;/a&gt;.  Drag and drop any image, and you'll see a
cube with all the pixels of your image mapped into 3D space.&lt;/p&gt;
&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2014/03/23/rgb-webgl-color-cube/colorcube.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-default btn-lg"
href="/static/projects/colorpal_colorcube"&gt;Launch live demo!&lt;/a&gt; and &lt;a href="https://github.com/mwcz/mwcz/blob/master/content/static/projects/colorpal_colorcube/js/cp-colorcube.js"&gt;view the
code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your web browser must support WebGL, which at this point in history means a
fairly recent Firefox or Chrome.  In case your web browser doesn't support
WebGL, here's a video to enjoy while you download &lt;a href="https://nightly.mozilla.org/"&gt;Firefox Nightly&lt;/a&gt;. ;)&lt;/p&gt;
&lt;figure&gt;

    &lt;iframe id="colorcube-demo" src="//player.vimeo.com/video/108080970"
    width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen
    allowfullscreen&gt;&lt;/iframe&gt;

    &lt;figcaption&gt;
        A &lt;a href="http://vimeo.com/107405612"&gt;recording&lt;/a&gt; of the colorcube
        with a couple of sample images, including the &lt;a
        href="http://colorpal.org/" title="ColorPal, a color palette
        generator"&gt;ColorPal&lt;/a&gt; logo.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://threejs.org"&gt;Three.js&lt;/a&gt; has proven to be pretty fun.  The documentation is decent, but
not comprehensive.  Some parts of the API are filled with "todo" notes instead
of actual documentation.&lt;/p&gt;
&lt;p&gt;Luckily, the omissions in the documentation are made up for by the extensive
&lt;a href="http://threejs.org/examples/"&gt;set of code examples&lt;/a&gt;.  Any time I couldn't get what I needed from the API
docs, I skimmed the examples until I found an existing scene that had the
effect I needed.&lt;/p&gt;
&lt;p&gt;For this demo, drawing a cube was easy, and even populating it with dots was easy, but &lt;/p&gt;
&lt;h2 id="colored-particles"&gt;Colored particles&lt;/h2&gt;
&lt;p&gt;The color cube uses a particle system to render 2D color points inside a 3D
cube.&lt;/p&gt;
&lt;p&gt;Eventually I found a &lt;a href="http://threejs.org/examples/#webgl_particles_billboards_colors"&gt;particle system demo with colors&lt;/a&gt;, which held the key.&lt;/p&gt;
&lt;p&gt;By setting &lt;code&gt;vertexColors: true&lt;/code&gt; on the &lt;code&gt;ParticleSystemMaterial&lt;/code&gt;, Three.js will
match each vertex in the &lt;code&gt;vertices&lt;/code&gt; array with a color in the &lt;code&gt;colors&lt;/code&gt; array.
&lt;code&gt;vertices[1726]&lt;/code&gt; will use &lt;code&gt;colors[1726]&lt;/code&gt;, for example.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of ColorCube" src="https://palebluepixel.org/2014/03/23/rgb-webgl-color-cube/screenshot.png" title="Screenshot of ColorCube" /&gt;&lt;/p&gt;
&lt;p&gt;A vertex and a color are created for each pixel in the source image.  For the
vertex, &lt;span style="color: red;"&gt;red&lt;/span&gt; values are mapped to the &lt;code&gt;X&lt;/code&gt; axis,
and similarly &lt;span style="color: green"&gt;green&lt;/span&gt; to &lt;code&gt;Y&lt;/code&gt; and &lt;span
style="color: blue"&gt;blue&lt;/span&gt; to &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="optimization"&gt;Optimization&lt;/h2&gt;
&lt;p&gt;Rendering a point for each pixel in a huge image image would be overkill, so
I used the pixel culling already present in ColorPal to scale the number of
points down to a more reasonable 128&lt;sup&gt;2&lt;/sup&gt;.  Increasing that number also
increases the quality of the cube.  If you look closely in the video above, the
ColorPal logo cube has gaps in it.  The better the quality, the longer the
startup time, though.&lt;/p&gt;
&lt;p&gt;Now I'm racking my brain for an excuse to use WebGL at Red Hat...&lt;/p&gt;
&lt;p&gt;Any ideas?&lt;/p&gt;
&lt;script&gt;
    function set_vimeo_iframe_height() {
        var ifr = document.getElementById('colorcube-demo');
        ifr.height = ifr.offsetWidth / (1280/720);
    }
    document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
    window.addEventListener('resize', set_vimeo_iframe_height);
&lt;/script&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="webgl"></category><category term="web"></category></entry><entry><title>Introducing Drop64, ezpz data URI generator</title><link href="https://palebluepixel.org/2014/02/25/introducing-drop64-ezpz-data-uri-generator/" rel="alternate"></link><published>2014-02-25T00:00:00-05:00</published><updated>2014-02-25T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-02-25:/2014/02/25/introducing-drop64-ezpz-data-uri-generator/</id><summary type="html">&lt;p&gt;Speed-hacking an old project for fun and... fun.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few weeks ago, a &lt;a href="http://www.heyokadesign.com/"&gt;coworker&lt;/a&gt; of mine ran into some font issues.  Firefox
doesn't allow cross-origin requests for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"&gt;web fonts&lt;/a&gt;, and he was using a tool
called &lt;a href="http://www.fontsquirrel.com/"&gt;Font Squirrel&lt;/a&gt; to generate fonts, including &lt;a href="https://developer.mozilla.org/en-US/docs/data_URIs"&gt;data URIs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Embedding a data URI for a font (or image) inside a CSS file is a common
technique for reducing the number of HTTP requests.  In this case, it also
negates the need for a cross-domain request to fetch the font file, because the
file's contents are already embedded.&lt;/p&gt;
&lt;p&gt;There was something screwy about Font Squirrel's data URIs, though.  A change
must have been made to their tool, because all of our icons were suddenly
shifted up.&lt;/p&gt;
&lt;p&gt;Once we narrowed it down to a misbehaving tool, the solution was clearly to
create a new, better behaved tool.&lt;/p&gt;
&lt;p&gt;I pretty quickly realized that ColorPal is basically a drag-and-drop data URI
generator.&lt;/p&gt;
&lt;p&gt;By dropping a file into ColorPal's dropzone, the user is implicitly giving the
browser access to that file through the HTML5 File API.  That file's contents
are conveniently (for our purposes, anyway) exposed as a data URI.&lt;/p&gt;
&lt;p&gt;ColorPal takes the extra steps of injecting the URI into a canvas element, then
performing a color quantization algorithm on the resulting pixels.&lt;/p&gt;
&lt;p&gt;Drop64 is ColorPal with a bunch of features ripped out.&lt;/p&gt;
&lt;p&gt;So, in the span of about 20 minutes I forked ColorPal, changed the name and
logo, ripped out the quantization algorithm, displayed the data URI into an
output box, created a github page for it, and registered &lt;a href="http://drop64.com/"&gt;drop64.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voila:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Drop64 recording" src="/static/images/projects/drop64/recording.gif" title="Drop64 recording" /&gt;&lt;/p&gt;
&lt;p&gt;It's not exactly a technical marvel, and the code is still rife with ColorPal
stuff.  I only ripped out what was absolutely necessary to get the tool working
as fast as possible.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://drop64.com/"&gt;Try it out&lt;/a&gt; or &lt;a href="https://github.com/mwcz/Drop64"&gt;check out the code&lt;/a&gt;.  Happy hacking.&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="data uri"></category><category term="web"></category></entry><entry><title>Drop64</title><link href="https://palebluepixel.org/projects/drop64" rel="alternate"></link><published>2014-02-05T00:00:00-05:00</published><updated>2014-02-05T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-02-05:/projects/drop64</id><summary type="html">&lt;p&gt;Drop64 is an easy drag-and-drop tool for generating &lt;a href="http://css-tricks.com/data-uris/"&gt;Data URIs&lt;/a&gt; from any
file.&lt;/p&gt;
&lt;p&gt;Check it out at &lt;a href="http://drop64.com/"&gt;drop64.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Drop64 is an easy drag-and-drop tool for generating &lt;a href="http://css-tricks.com/data-uris/"&gt;Data URIs&lt;/a&gt; from any
file.&lt;/p&gt;
&lt;p&gt;Check it out at &lt;a href="http://drop64.com/"&gt;drop64.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's a demo recording of how easy it is.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Drop64 recording" src="https://palebluepixel.org/static/images/projects/drop64/recording.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Some benefits of Data URIs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fewer HTTP requests means faster page loads&lt;/li&gt;
&lt;li&gt;avoid cross-origin resource loading issues (fonts in Firefox, for example)&lt;/li&gt;
&lt;li&gt;you can paste the Data URI directly into your web browser URL bar to view the file (occasionally convenient)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you noticed the similarity to &lt;a href="http://colorpal.org/"&gt;ColorPal&lt;/a&gt;, well done!  I reused a lot of
ColorPal's code in Drop64.  Almost all of it, in fact.&lt;/p&gt;
&lt;p&gt;For more information on Data URIs, check out &lt;a href="https://developer.mozilla.org/en-US/docs/data_URIs"&gt;MDN&lt;/a&gt; or the original &lt;a href="http://tools.ietf.org/html/rfc2397"&gt;RFC&lt;/a&gt;.&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="css3"></category><category term="data uri"></category><category term="data url"></category></entry><entry><title>Super easy image resizing in GIMP</title><link href="https://palebluepixel.org/2013/12/22/super-easy-image-resizing-in-gimp/" rel="alternate"></link><published>2013-12-22T00:00:00-05:00</published><updated>2013-12-22T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2013-12-22:/2013/12/22/super-easy-image-resizing-in-gimp/</id><summary type="html">&lt;p&gt;By accident, I discovered that GIMP number fields evaluate math expressions.  So convenient!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ever been here?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to double the size of this image&lt;/p&gt;
&lt;p&gt;open calculator&lt;/p&gt;
&lt;p&gt;type in current width * 2&lt;/p&gt;
&lt;p&gt;type in current height * 2&lt;/p&gt;
&lt;p&gt;paste results back into the Create New Image dialog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've done that countless times.  As I was about to do the same thing once more,
I thought "Hmm, wouldn't it be nice if we could do simple math inside the New
Image dialog?  Well, I tried it and it worked.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GIMP math recording" src="https://palebluepixel.org/2013/12/22/super-easy-image-resizing-in-gimp/gimp_math.gif" title="GIMP math recording" /&gt;&lt;/p&gt;
&lt;p&gt;The feature was added in GIMP 2.8, so it's fairly recent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enhancements have also been made to the size entry widget, which is used for
inputting most of the x, y, width, height parameters. For example, in the
scale dialog it is now possible to write “50%” in the Width field to scale
the image to 50% of the width. Expressions such as “30in + 40px” and “4 *
5.4in” work, too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From the &lt;a href="http://docs.gimp.org/2.8/en/gimp-introduction-whats-new.html" title="GIMP User Manual"&gt;GIMP User Manual&lt;/a&gt;.&lt;/p&gt;</content><category term="gimp"></category></entry><entry><title>ColorPal CLI</title><link href="https://palebluepixel.org/projects/colorpal-cli" rel="alternate"></link><published>2013-11-07T00:00:00-05:00</published><updated>2013-11-07T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2013-11-07:/projects/colorpal-cli</id><summary type="html">&lt;p&gt;ColorPal CLI is a command-line version of &lt;a href="/projects/colorpal" title="ColorPal project page"&gt;ColorPal&lt;/a&gt;, my HTML5 color palette
generator.&lt;/p&gt;
&lt;h2 id="demo"&gt;Demo!&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ node cpal.js -f hex -s …&lt;/code&gt;&lt;/pre&gt;</summary><content type="html">&lt;p&gt;ColorPal CLI is a command-line version of &lt;a href="/projects/colorpal" title="ColorPal project page"&gt;ColorPal&lt;/a&gt;, my HTML5 color palette
generator.&lt;/p&gt;
&lt;h2 id="demo"&gt;Demo!&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ node cpal.js -f hex -s 8 MyImage.png

#07070b
#bac0c4
#d1bd66
#7e8899
#696964
#c4b441
#65683e
#394434
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="get-it"&gt;Get it!&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;npm install -g canvas requirejs # install dependencies
git clone git@github.com:mwcz/colorpal-cli.git
cd colorpal-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="use-it"&gt;Use it!&lt;/h2&gt;
&lt;p&gt;To display the help text, simply run the command without any arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node cpal.js

Generate a color palette from an image! :)
USAGE: node cpal.js IMAGE

Options:
  -s, --size     Generate a fixed size palette; you specify the number of colors you want.

  -d, --dynamic  Generate a palette, sized dynamically based on the color diversity of the image; you can optionally specify a number from 0.0 to 1.0, where larger numbers increase the number of colors.

  -f, --format   Specify the output format.  Available formats are: scss, sass, json, less, rgb, hex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's dive right in by generating palettes from the sample images included with the
project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node cpal.js images/hugepic.png

[ [ 144, 43, 178 ],
  [ 37, 10, 146 ],
  [ 171, 52, 6 ],
  [ 11, 3, 85 ],
  [ 238, 72, 120 ],
  [ 219, 66, 32 ] ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To visualize what just happened, ColorPal turned this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="hugepic.png" src="https://palebluepixel.org/static/images/projects/colorpal-cli/hugepic_small.png" title="hugepic.png" /&gt;&lt;/p&gt;
&lt;p&gt;Into this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="hugepic.png colors" src="https://palebluepixel.org/static/images/projects/colorpal-cli/hugepic_colors.png" title="hugepic.png colors" /&gt;&lt;/p&gt;
&lt;p&gt;Let's try again with a different image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node cpal.js images/issue3.png

[ [ 165, 219, 144 ], [ 58, 181, 75 ], [ 254, 250, 203 ] ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only three colors this time?  This image has very few colors, so ColorPal
decided to create a smaller palette.&lt;/p&gt;
&lt;p&gt;&lt;img alt="issue3.png" src="https://palebluepixel.org/static/images/projects/colorpal-cli/issue3_small.png" title="issue3.png" /&gt;
&lt;img alt="issue3.png colors" src="https://palebluepixel.org/static/images/projects/colorpal-cli/issue3_colors.png" title="issue3.png colors" /&gt;&lt;/p&gt;
&lt;p&gt;To generate a specific number of colors, use the &lt;code&gt;-s&lt;/code&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# generate 8 colors from the same image
node cpal.js -s 8 images/issue3.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also specify the output format.  &lt;code&gt;json&lt;/code&gt; is the default, but several others are available.&lt;/p&gt;
&lt;h4 id="hex-output"&gt;Hex output:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;node cpal.js images/issue3.png -f hex
#a5db90
#3ab54b
#fefacb
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="less-output"&gt;LESS output:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;node cpal.js images/issue3.png -f less
@color0: rgb(165,219,144);
@color1: rgb(58,181,75);
@color2: rgb(254,250,203);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="scsssass-output"&gt;SCSS/SASS output:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;node cpal.js images/issue3.png -f scss
$color0: rgb(165,219,144);
$color1: rgb(58,181,75);
$color2: rgb(254,250,203);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ColorPal also has a &lt;a href="http://colorpal.org/" title="colorpal.org"&gt;web interface&lt;/a&gt; which you might find more convenient,
depending on your needs  The command-line utility is very convenient if you
need to automate palette generation for a large number of images.&lt;/p&gt;
&lt;p&gt;All the code is available &lt;a href="https://github.com/mwcz/colorpal-cli" title="GitHub page for ColorPal CLI"&gt;on GitHub&lt;/a&gt;.  Bug reports and pull requests are
much appreciated. :)&lt;/p&gt;
&lt;p&gt;I've written other &lt;a href="/tag/colorpal" title="Posts about ColorPal"&gt;posts about ColorPal&lt;/a&gt;.&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="node"></category><category term="command-line"></category></entry><entry><title>ColorPal CLI!</title><link href="https://palebluepixel.org/2013/11/07/colorpal-cli/" rel="alternate"></link><published>2013-11-07T00:00:00-05:00</published><updated>2013-11-07T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2013-11-07:/2013/11/07/colorpal-cli/</id><summary type="html">&lt;p&gt;Tired of creating color palettes with ColorPal's simple, intuitive drag-and-drop interface?  Me too!  Use this handy command instead.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tired of creating color palettes with ColorPal's simple, intuitive
drag-and-drop interface?  Me too!  Want to jam with the console cowboys in
cyber-space?  Now you can.  Now &lt;em&gt;we&lt;/em&gt; can.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ColorPal CLI logo" src="https://palebluepixel.org/2013/11/07/colorpal-cli/colorpal_cli_logo.png" title="ColorPal CLI logo" /&gt;&lt;/p&gt;
&lt;h2 id="demo"&gt;Demo!&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ node cpal.js -f hex -s 8 MyImage.png

#07070b
#bac0c4
#d1bd66
#7e8899
#696964
#c4b441
#65683e
#394434
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="get-it"&gt;Get it!&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;npm install -g canvas requirejs # install dependencies
git clone git@github.com:mwcz/colorpal-cli.git
cd colorpal-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="use-it"&gt;Use it!&lt;/h2&gt;
&lt;p&gt;Visit the &lt;a href="/projects/colorpal-cli" title="ColorPal CLI project page"&gt;projcet page&lt;/a&gt; for the full documentation, or simply run the
command without any arguments to see the help text.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Generate a color palette from an image! :)
USAGE: node cpal.js IMAGE

Options:
  -s, --size     Generate a fixed size palette; you specify the number of colors you want.

  -d, --dynamic  Generate a palette, sized dynamically based on the color diversity of the image; you can optionally specify a number from 0.0 to 1.0, where larger numbers increase the number of colors.

  -f, --format   Specify the output format.  Available formats are: scss, sass, json, less, rgb, hex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/mwcz/colorpal-cli" title="ColorPal CLI code repository"&gt;available on GitHub&lt;/a&gt; and I welcome any feedback, bug reports,
pull requests, etc.&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="mediancut"></category></entry><entry><title>ColorPal Output Update</title><link href="https://palebluepixel.org/2012/07/30/colorpal-output-update/" rel="alternate"></link><published>2012-07-30T22:30:00-04:00</published><updated>2012-07-30T22:30:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-07-30:/2012/07/30/colorpal-output-update/</id><summary type="html">&lt;p&gt;Hi pals.&lt;/p&gt;
&lt;p&gt;This is a speedy post about a speedy update I made today to
&lt;a href="/projects/colorpal/"&gt;ColorPal&lt;/a&gt;, an HTML5 tool I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi pals.&lt;/p&gt;
&lt;p&gt;This is a speedy post about a speedy update I made today to
&lt;a href="/projects/colorpal/"&gt;ColorPal&lt;/a&gt;, an HTML5 tool I wrote that automatically
generates color palettes from a photograph.&lt;/p&gt;
&lt;p&gt;Previously, ColorPal provided hex codes for each color extracted from the
image.  Eight individual &amp;lt;input&amp;gt;s at the bottom of the page displayed the
colors.&lt;/p&gt;
&lt;p&gt;I use ColorPal a lot (my own dogfood and all that) when designing websites, and
it wasn't long before I got fed up (hah!) with copying values from eight
freaking inputs.&lt;/p&gt;
&lt;p&gt;Blah:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before" src="https://palebluepixel.org/2012/07/30/colorpal-output-update/before.png" /&gt;&lt;/p&gt;
&lt;p&gt;Huzzah:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After" src="https://palebluepixel.org/2012/07/30/colorpal-output-update/after.png" /&gt;&lt;/p&gt;
&lt;p&gt;All eight colors can be pasted out in one fell swoop of the mouse.&lt;/p&gt;
&lt;p&gt;&lt;a href="/projects/colorpal/"&gt;ColorPal Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Works in Chrome and Firefox.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pro tip&lt;/strong&gt;: you can edit the values in the textarea and the palette will be
instantly updated to reflect your edits.  This means you can also paste in
a list of colors (hex format only for the time being).&lt;/p&gt;
&lt;p&gt;If you try out ColorPal, let me know your thoughts on
&lt;a href="https://twitter.com/#!/mwcz"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are github repos for &lt;a href="https://github.com/mwcz/ColorPal"&gt;ColorPal&lt;/a&gt; and
&lt;a href="https://github.com/mwcz/median-cut-js"&gt;median-cut.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This minor update is part of the groundwork for some exciting changes to my
sorely neglected &lt;a href="http://clayto.com/"&gt;photography site&lt;/a&gt;.  I still post photos
regularly, but haven't given it any fresh coding love for about two years.  See
how the colorscheme of each page matches the photograph?  That's done with an
older palette generation implementation (which I should write about someday),
but pretty soon it'll be ColorPal pumping out those swatches.  &lt;/p&gt;
&lt;p&gt;That's not the only change.  If you're not excited, don't worry.  I am!&lt;/p&gt;
&lt;p&gt;&lt;a href="/projects/colorpal"&gt;&lt;img src="https://palebluepixel.org/2012/07/30/colorpal-output-update/colorpal_logo.png" alt="ColorPal logo" title="" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy coloring!&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category><category term="mediancut"></category></entry><entry><title>Introducing Canvas Indexed Color</title><link href="https://palebluepixel.org/2012/07/03/introducing-canvas-indexed-color/" rel="alternate"></link><published>2012-07-03T23:44:50-04:00</published><updated>2012-07-03T23:44:50-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-07-03:/2012/07/03/introducing-canvas-indexed-color/</id><summary type="html">&lt;p&gt;A basic implementation of indexed color palettes for HTML5 canvas.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="/projects/canvas_indexed_color" title="Canvas Indexed Color demo"&gt;Canvas Indexed Color demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="White SVG Tiger" src="https://palebluepixel.org/2012/07/03/introducing-canvas-indexed-color/hahatiger.png" /&gt;&lt;/p&gt;
&lt;p&gt;First, I converted the classic SVG tiger into a set of canvas drawing
instructions using &lt;a href="http://professorcloud.com/svg-to-canvas/" title="Professor Cloud's conversion
tool"&gt;Professor Cloud's conversion
tool&lt;/a&gt;.  The output looks like
&lt;a href="https://github.com/mwcz/palebluepixel/blob/master/content/static/projects/canvas_indexed_color/demo/vector_images.js"&gt;this&lt;/a&gt;.  Each call to &lt;code&gt;cvm.getColor()&lt;/code&gt; used to be a string literal.  &lt;/p&gt;
&lt;p&gt;Vim's regex saved me from having to edit &lt;em&gt;100,000&lt;/em&gt; lines of canvas instructions
by hand to replace the color strings.&lt;/p&gt;
&lt;p&gt;The demo uses &lt;a href="http://knockoutjs.com/" title="Knockout JS"&gt;Knockout&lt;/a&gt; for handling all
the update/draw events as well as updating the URL hash.  Check the &lt;a href="https://github.com/mwcz/palebluepixel/blob/master/content/static/projects/canvas_indexed_color/demo/cic.js"&gt;source
code&lt;/a&gt;
and you'll see that there &lt;em&gt;isn't&lt;/em&gt; a vast tangled nest of event
wirings.  Each time one of the colors in this ViewModel is changed, Knockout
automatically triggers the canvas redraw and the updates the URL with the new
palette.  Conversely, if the URL is changed, the ViewModel will update itself
with the new value.  Knockout calls this a "two-way data binding".  &lt;/p&gt;
&lt;p&gt;I replaced the aforementioned color strings with calls to &lt;code&gt;cvm&lt;/code&gt;, which is a
Knockout ViewModel (in this case, an object that holds all the color data).
&lt;code&gt;cvm&lt;/code&gt; is populated with the SVG tiger's default colors.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ko.observableArray( [
    { hex: ko.observable("#000000") },
    { hex: ko.observable("#323232") },
    // .... many more ....
    { hex: ko.observable("#ff727f") },
    { hex: ko.observable("#ffffff") }
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Play with the colors, then copy the URL and send your tiger to your friends.  :]&lt;/p&gt;
&lt;p&gt;&lt;a href="/projects/canvas_indexed_color/#4c0000,#659900,#666666,#992600,#999999,#99cc32,#a51926,#a5264c,#b23259,#b26565,#b2b2b2,#cc3f4c,#cc7226,#cccccc,#e5668c,#e59999,#e5e5b2,B5E8E6,#ea8c4d,#ea8e51,#eb955c,#ec9961,#eea575,#efaa7c,#f1b288,#f2b892,#f3bf9c,#f4c6a8,#f5ccb0,#f8d8c4,#f8dcc8,#f9e2d3,#fae5d7,#fcf2eb,#ff727f,#ffffcc,#ffffff,#000000,#323232" title="Crazy tiger"&gt;Crazy tiger&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please note, this is only a simulation of an indexed color palette.  It is not
a true, usable, indexed-color API for canvas (someday, maybe!).&lt;/p&gt;
&lt;p&gt;The color picker is &lt;a href="https://github.com/mattfarina/farbtastic" title="Farbtastic"&gt;Farbtastic&lt;/a&gt;.  If you're interested in reading more about the history of
indexed color, and a &lt;strong&gt;mind-blowing&lt;/strong&gt; canvas demo, go
&lt;a href="http://www.effectgames.com/effect/article-Old_School_Color_Cycling_with_HTML5.html" title="Color cycling in HTML5 canvas"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="web"></category><category term="canvas_indexed_color"></category></entry><entry><title>ColorPal palettes improved!</title><link href="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/" rel="alternate"></link><published>2012-02-10T22:44:50-05:00</published><updated>2012-02-10T22:44:50-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-02-10:/2012/02/10/colorpal-palettes-improved/</id><summary type="html">&lt;p&gt;In my &lt;a href="/2012/01/16/colorpal-alpha/"&gt;last post&lt;/a&gt; on the subject, I introduced
ColorPal, my HTML5 color palette generation tool.  It didn't perform well …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my &lt;a href="/2012/01/16/colorpal-alpha/"&gt;last post&lt;/a&gt; on the subject, I introduced
ColorPal, my HTML5 color palette generation tool.  It didn't perform well with
certain types of images, so I fixed it. :)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="/projects/colorpal"&gt;&lt;img src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/colorpal_logo.png" alt="ColorPal logo" title=""
/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Color palettes will now match the image even better.  Especially for images
with infrequent but &lt;em&gt;important&lt;/em&gt; colors.  Here's a comparison of the old and new
methods, on an image that is mostly black:&lt;/p&gt;
&lt;p&gt;&lt;img alt="comparison of palettes generated with median and
mean" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/median-mean-comparison.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can see that with the old method, the black pixels definitely took over the
palette.&lt;/p&gt;
&lt;p&gt;&lt;a href="/projects/colorpal"&gt;Try it with your own images!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For some images, this change won't affect palettes at all.  But for images with
low-population, high-importance colors, like the one above, palettes will look
&lt;em&gt;much&lt;/em&gt; better!&lt;/p&gt;
&lt;p&gt;Technical discussion below.&lt;/p&gt;
&lt;h1 id="why-the-median-in-median-cut"&gt;Why the 'median' in median-cut?&lt;/h1&gt;
&lt;p&gt;Median Cut is an algorithm typically used to reduce the number of colors in an
image.&lt;/p&gt;
&lt;p&gt;&lt;img alt="16 million colors versus 16 colors" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/median-cut-example.png" /&gt;&lt;/p&gt;
&lt;p&gt;The steps to perform median cut are fairly straightforward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Find the smallest box which contains all the colors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sort the enclosed colors along the longest axis of the box.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Split the box into two regions at median of the sorted list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat the above process until the original color space has been divided
     into N regions where N is the number of colors you want.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Not too bad, right?  The question remains, though, why median?&lt;/p&gt;
&lt;p&gt;Mean, median, and mode all attempt to measure the
&lt;a href="http://en.wikipedia.org/wiki/Location_parameter"&gt;location&lt;/a&gt; of a probability
distribution.  Worded more intuitively... they try to find the center of a set
of numbers.  They just employ different definitions of "center".&lt;/p&gt;
&lt;p&gt;&lt;img alt="mean, median, and mode graphed" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/mean_median_mode.png" /&gt;
(Thanks &lt;a href="http://en.wikipedia.org/wiki/Median"&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;As you can see clearly in the dashed data set, the mean tends to follow the
tail.  In other words, mean is useful when outliers are important.  When
generating a color palette, outliers are essential.  Outliers may be the small
streak of color in an otherwise drab sky, or a small red rose in the middle of
a green field.&lt;/p&gt;
&lt;p&gt;The goal of median cut is &lt;em&gt;not&lt;/em&gt; to generate a color palette.  It's to
efficiently reduce the number of colors in an image.  Since my goal with
ColorPal is to find good-lookin' colors, I've modified the algorithm to split
boxes at the &lt;strong&gt;mean&lt;/strong&gt; instead of the &lt;strong&gt;median&lt;/strong&gt;.  Mean splits boxes closer to
the outliers, which keeps low-population colors nicely segregated from the
high-population colors.&lt;/p&gt;
&lt;p&gt;Thus step 3 becomes:&lt;/p&gt;
&lt;div class="pygments_murphy syntax_highlight"&gt;
  3. Split the box into two regions at the &lt;b&gt;mean&lt;/b&gt; of the sorted list.
&lt;/div&gt;

&lt;p&gt;The result?  Mean Cut!  Also: awesome color palettes.&lt;/p&gt;
&lt;h2 id="interesting-side-note-on-color-distributions"&gt;Interesting side-note on color distributions&lt;/h2&gt;
&lt;p&gt;Interestingly, photographs of nature tend to have nice, close-to-normal color
distributions.  A "normal distribution" is a formal term for a "bell curve".&lt;/p&gt;
&lt;p&gt;Check out the red, green, and blue distributions for a photograph of a forest.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Forest red   pixel distribution" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/forest_r.png" /&gt;
&lt;img alt="Forest green pixel distribution" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/forest_g.png" /&gt;
&lt;img alt="Forest blue  pixel distribution" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/forest_b.png" /&gt;&lt;/p&gt;
&lt;p&gt;For comparison, here are the distributions for a shot of NYC.&lt;/p&gt;
&lt;p&gt;&lt;img alt="City   red   pixel distribution" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/city_r.png" /&gt;
&lt;img alt="City   green pixel distribution" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/city_g.png" /&gt;
&lt;img alt="City   blue  pixel distribution" src="https://palebluepixel.org/2012/02/10/colorpal-palettes-improved/city_b.png" /&gt;&lt;/p&gt;
&lt;h2 id="whats-next-for-colorpal-color-spaces"&gt;What's next for ColorPal?  Color spaces.&lt;/h2&gt;
&lt;p&gt;Mean-cut improves ColorPal dramatically for some images, but it's still not
perfect.  Perfection probably won't be attainable, but there are still many
ways to improve.&lt;/p&gt;
&lt;p&gt;My next test will be converting to a color space other than RGB.&lt;/p&gt;
&lt;p&gt;HSL is common, and the RGB/HSL conversion formulas are in my very old JSImage
project.  It may not turn out well, though, as the concept of "widest box"
loses most of its meaning when each axis is a completely different unit of
measure.  Although, in a way, I suppose RGB has a similar problem.  Red, Green,
and Blue could be thought of as unrelated units.  I'll try it out and see how
it goes.  I wonder if my old JavaScript RGB/HSL code has rotted away yet...&lt;/p&gt;
&lt;p&gt;Most likely, I'll skip HSL and try one of the
&lt;a href="http://en.wikipedia.org/wiki/Lab_color_space"&gt;Lab&lt;/a&gt; color spaces first, since
they are not composed linear values like RGB and HSL.  Instead, Lab color
spaces use non-linear scales that closely match human perception of color.
Perfect for my purposes.  How fortuitious for me that CIE invented it way back
in 1931.&lt;/p&gt;
&lt;p&gt;There are three "Lab" color spaces: XYZ, Hunter-Lab,
and CIELAB.  XYZ will be first to the plate, since the RGB/XYZ formulas are
the simplest.  Let me take this opportune moment to plug
&lt;a href="http://www.easyrgb.com/index.php?X=MATH"&gt;EasyRGB.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="lend-a-hand"&gt;Lend a hand&lt;/h2&gt;
&lt;p&gt;As I've mentioned before, ColorPal is in an early stage of development.  It
needs testing in multiple browsers, and I'm very interested in hearing people's
feedback.  Code development help is welcomed too.&lt;/p&gt;
&lt;p&gt;If you try out ColorPal, let me know your thoughts on
&lt;a href="https://twitter.com/#!/mwcz"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are github repos for &lt;a href="https://github.com/mwcz/ColorPal"&gt;ColorPal&lt;/a&gt; and
&lt;a href="https://github.com/mwcz/median-cut-js"&gt;median-cut.js&lt;/a&gt;.&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category><category term="mediancut"></category></entry><entry><title>Toy javascript unit tester</title><link href="https://palebluepixel.org/2012/01/30/toy-javascript-unit-tester/" rel="alternate"></link><published>2012-01-30T21:50:00-05:00</published><updated>2012-01-30T21:50:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-01-30:/2012/01/30/toy-javascript-unit-tester/</id><summary type="html">&lt;p&gt;Last week I was sitting in a meeting, thinking about unit testing frameworks (not the subject of the meeting), and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week I was sitting in a meeting, thinking about unit testing frameworks (not the subject of the meeting), and had a minor epiphany.  In the back of my mind, there has always been a bit of uncertainty as to how unit testing frameworks work.  Deep in my brain I knew there was something I didn't understand, but I wasn't quite sure what.  I never gave it any conscious thought.&lt;/p&gt;
&lt;p&gt;As a developer, I'd use a framework, write a bunch of &lt;code&gt;testBlahFoo&lt;/code&gt; functions, and the framework would magically run them.  &lt;/p&gt;
&lt;p&gt;Then I realized... "Oh, it's just introspection."&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::javascript
// Create an object with three properties, all functions
var myfuncs = {
    func1: function() { console.log("func it up"); },
    func2: function() { console.log("func's old brother"); },
    func3: function() { console.log("bring back da func"); }
};

// Run all functions attached to myfuncs
for( func in myfuncs ) {
    myfuncs[ func ]();
}

// Outputs:
// 
// func it up
// func's old brother
// bring back da func
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So simple.  Later, I wrote a very basic unit testing framework, purely as an educational excercise.&lt;/p&gt;
&lt;p&gt;The guts are almost simple as the example above.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::javascript
var JTestSuite = function () {

    var version = 0.1,
        jt,

    init = function( callback ) {
        jt = JTests();
        jt.init( callback );
    },

    run = function() {
        var fn,
            prop;

        // Run all functions that begin with "test"
        for( prop in this ) {
            if( typeof this[prop] === "function" ) {
                if( prop.slice(0,4) === "test" ) {
                    console.log( this[prop](jt) );
                }
            }
        }
    };

    if( !(this instanceof JTestSuite) ) return new JTestSuite();

    return {
        init : init,
        run  : run
    };

};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;run&lt;/code&gt; function's loop, I first check that each property is a function before attemping to run it.  This avoids a &lt;code&gt;called_non_callable TypeError&lt;/code&gt;.  I then check that the name of the property begins with the string "test".  When dynamically calling functions, it's usually a good idea to call &lt;code&gt;obj.hasOwnProperty(propname)&lt;/code&gt; to ensure the property wasn't inherited from some unknown source (especially if the property you wanted to reference may have been &lt;code&gt;delete&lt;/code&gt;d, but a property with the same name is now surfacing from a parent object), but in this case I'd like to leave open the possibility for inherited Test Suites.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;JTests&lt;/code&gt; object created in the &lt;code&gt;init&lt;/code&gt; function is a separate object that contains a bunch of assertions.  It looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::javascript
var JTests = function () {

    var version = 0.1,
        result_callback,

    init = function( callback ) {
        result_callback = callback;
    }

    assertTrue = function( a ) {
        var result = a === false;
        result_callback( {                                                                                                                                                                         
            name   : "assertTrue",
            args   : [ a ],
            result : result
        } );
    };

    return {
        assertTrue : assertTrue
    };

};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...except with many more assertions. :)&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;JTestSuite&lt;/code&gt; and &lt;code&gt;JTests&lt;/code&gt; use the &lt;a href="http://stackoverflow.com/a/5647397/215148"&gt;revealing module pattern&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I have a lot of ideas for improvement, like &lt;a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;DRY&lt;/a&gt;ing up the assertions, so the &lt;code&gt;{name,args,result}&lt;/code&gt; object doesn't have to be defined in each assertion.  But &lt;a href="http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#JavaScript"&gt;many others&lt;/a&gt; have already done a great job, and I don't want to reinvent too many wheels.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::javascript
// Define a custom handler for the result
function test_callback( result ) {
    console.log(result);
}

// Create a new JTestSuite object and initialize it with the callback
var TestSuite = new JTestSuite();
TestSuite.init( test_callback );

// Create some tests
TestSuite.testMath = function(jt) {
    jt.assertEquals( 2 + 2, 4 );
};

TestSuite.testFalsy = function(jt) {
    // [], "", and "0" all == false in javascript
    jt.assertFalsy( [] );
    jt.assertFalsy( "" );
    jt.assertFalsy( "0" );
};

// Run all the tests
TestSuite.run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The callback allows a user to determine how the results from the unit test should be processed or displayed.  Results could be printed to console.log, displayed on a page by adding them to the DOM, sent to a Web service with AJAX, or any arbitrary service with Web Sockets.&lt;/p&gt;
&lt;p&gt;After writing this toy framework, and explaining it to a colleague, I was told that the Rails unit tester uses almost the exact same approach.  I'd wager a few bucks that JUnit uses the Reflection API's &lt;code&gt;Class.getMethods()&lt;/code&gt; to find and run all the methods added to a TestCase class.  Only a few bucks, though.&lt;/p&gt;</content><category term="javascript"></category><category term="testing"></category><category term="web"></category></entry><entry><title>ColorPal Alpha</title><link href="https://palebluepixel.org/2012/01/16/colorpal-alpha/" rel="alternate"></link><published>2012-01-16T22:15:50-05:00</published><updated>2012-01-16T22:15:50-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-01-16:/2012/01/16/colorpal-alpha/</id><summary type="html">&lt;p&gt;Introducing ColorPal, a fast color palette creation tool.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Introducing ColorPal!&lt;/p&gt;
&lt;p&gt;&lt;img alt="ColorPal screenshot" src="https://palebluepixel.org/2012/01/16/colorpal-alpha/ss.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've been toying with color palette generation for years.  My photography website has always had some form of dynamic palette, so the theme of each page matches the photo.  You can see the current iteration &lt;a href="http://clayto.com/"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://palebluepixel.org/2012/01/16/colorpal-alpha/tarsi.png" alt="clayto.com" title="My photo, 'Tarsi', at clayto.com" /&gt;&lt;/figure&gt;

&lt;p&gt;I owe the idea of photo-matching website palettes to &lt;a href="http://noahgrey.com"&gt;Noah Grey&lt;/a&gt;.  Each iteration of my photo site has gotten a slightly more advanced palette generation tool.  You can see murmurs of them in the &lt;a href="/2011/11/16/html5-canvas-eyedropper/"&gt;old&lt;/a&gt; &lt;a href="/2011/11/16/html5-canvas-area-selection-averaging/"&gt;canvas&lt;/a&gt; &lt;a href="/2011/11/17/html5-tool-for-creating-color-palettes-from-an-image/"&gt;demos&lt;/a&gt; I've posted.  Sooner or later I'll make a more thorough post about the tools I've created for each iteration of the site.  Anyway, back to ColorPal.&lt;/p&gt;
&lt;p&gt;ColorPal is an HTML5 palette generation tool.  Currently it's in a very early stage, and I've only tested it in Chrome.  I have many ideas for improvements, and I'd love to hear anyone's ideas as well.  &lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://palebluepixel.org/2012/01/16/colorpal-alpha/colorpal_logo.png" alt="ColorPal logo"/&gt;
&lt;/figure&gt;

&lt;p&gt;It's powered by &lt;a href="http://en.wikipedia.org/wiki/Canvas_element"&gt;canvas&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en/data_URIs"&gt;data URIs&lt;/a&gt;, &lt;a href="http://dev.w3.org/2006/webapi/FileAPI/"&gt;File API&lt;/a&gt;, and my homespun &lt;a href="http://en.wikipedia.org/wiki/Median_cut"&gt;median-cut&lt;/a&gt; implementation, which I'm calling &lt;em&gt;median-cut.js&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Bear in mind that while I've kept median-cut.js nice and clean, I did hammer out ColorPal as quickly as possible, so it's a mess.  Why?  I expect median-cut.js to be useful to other programmers, but ColorPal is just a tool for designers.  Or it will be, anyway. :)&lt;/p&gt;
&lt;p&gt;Here are github repos for &lt;a href="https://github.com/mwcz/ColorPal"&gt;ColorPal&lt;/a&gt; and &lt;a href="https://github.com/mwcz/median-cut-js"&gt;median-cut.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, as a reward for reading to the end, a &lt;a href="/projects/colorpal/"&gt;live demo&lt;/a&gt;!&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category><category term="mediancut"></category></entry><entry><title>ColorPal</title><link href="https://palebluepixel.org/projects/colorpal" rel="alternate"></link><published>2012-01-16T00:00:00-05:00</published><updated>2012-01-16T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-01-16:/projects/colorpal</id><summary type="html">&lt;p&gt;&lt;a href="http://colorpal.org/" title="colorpal.org"&gt;ColorPal&lt;/a&gt; is an HTML5 color palette generator.  Here's a gif demonstrating
how to use ColorPal.  The color quality in gifs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://colorpal.org/" title="colorpal.org"&gt;ColorPal&lt;/a&gt; is an HTML5 color palette generator.  Here's a gif demonstrating
how to use ColorPal.  The color quality in gifs is pretty terrible, but you can
still see the basic usage.&lt;/p&gt;
&lt;p&gt;Try it out at &lt;a href="http://colorpal.org/"&gt;colorpal.org&lt;/a&gt;.&lt;/p&gt;
&lt;p class="col-xs-12 col-md-8"&gt;&lt;img class="img-responsive" src="https://palebluepixel.org/static/images/projects/recording_colorpal.gif" title="ColorPal recording" alt="ColorPal recording" /&gt;&lt;/p&gt;

&lt;p&gt;ColorPal also has a &lt;a href="/2013/11/07/colorpal-cli/" title="ColorPal's CLI"&gt;command-line interface&lt;/a&gt;, powered by &lt;a href="http://nodejs.org/" title="Node.js official site"&gt;Node.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've written some &lt;a href="/tag/colorpal" title="Posts about ColorPal"&gt;posts about ColorPal&lt;/a&gt;.&lt;/p&gt;
&lt;div class="clearfix"&gt;&lt;/div&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category></entry><entry><title>The N9, QR-Codes, and KeePassX</title><link href="https://palebluepixel.org/2012/01/08/the-n9-qr-codes-and-keepassx/" rel="alternate"></link><published>2012-01-08T22:27:50-05:00</published><updated>2012-01-08T22:27:50-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-01-08:/2012/01/08/the-n9-qr-codes-and-keepassx/</id><summary type="html">&lt;p&gt;&lt;em&gt;Update: I happened across a &lt;a href="http://keepass.info/plugins.html#qrcodegen"&gt;KeePass
plugin&lt;/a&gt; (not the same as KeePassX)
that displays passwords as QR codes, just like …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Update: I happened across a &lt;a href="http://keepass.info/plugins.html#qrcodegen"&gt;KeePass
plugin&lt;/a&gt; (not the same as KeePassX)
that displays passwords as QR codes, just like my hack below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Poor, glorious N9.&lt;/p&gt;
&lt;p&gt;It's impossible not to love the N9 if you're a geek, especially a programming,
bash-loving, Linux-hankering geek.  It's like a nerd talisman.  This post isn't
about the N9, specifically, so I'll save the love-fest for another time.&lt;/p&gt;
&lt;p&gt;This post is about how difficult it can be to get text (especially passwords)
onto a smartphone securely.  I've come to like the approach of using QR codes.
Most (all?) smartphones have a barcode scanner, and QR codes are one of &lt;a href="http://en.wikipedia.org/wiki/Barcode"&gt;many
convenient ways&lt;/a&gt; to encode text into an
image.  In the case of the N9, it's
&lt;a href="http://n9-apps.com/meescan"&gt;MeeScan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="meescan" src="https://palebluepixel.org/2012/01/08/the-n9-qr-codes-and-keepassx/meescan.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fukuchi.org/works/qrencode/index.html.en"&gt;qrencode&lt;/a&gt; is an extremely
easy to use encoder.  Pass it a string, it produces an image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qrencode "mypassword" -o mypass.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://keepassx.org"&gt;KeePassX&lt;/a&gt; is an excellent password manager.
Unfortunately...&lt;/p&gt;
&lt;p&gt;&lt;img alt="KeePassX not in N9" src="https://palebluepixel.org/2012/01/08/the-n9-qr-codes-and-keepassx/keepass_not_in_n9.png" /&gt;&lt;/p&gt;
&lt;p&gt;Sadly, there is no KeePassX client on the N9.  At least, not yet.  Even if
there were, I'm skeptical that it's a good idea at all to be carrying around a
database of personal passwords on a smartphone.  It's encrypted, sure, but
touchscreen keyboards encourage weak passphrases.  Who wants to enter a 64+
character passphrase on a &lt;abbr title="Virtual keyboard"&gt;vkbd&lt;/abbr&gt;?&lt;/p&gt;
&lt;p&gt;This evening, I spent about an hour hacking QR-code support into KeePassX.
It's a seriously messy hack, using
&lt;a href="http://en.cppreference.com/w/cpp/utility/program/system"&gt;system()&lt;/a&gt; to call
&lt;code&gt;qrencode&lt;/code&gt;, pass in the password, then call
&lt;a href="http://projects.gnome.org/evince/?guid=ON"&gt;evince&lt;/a&gt; to view it.  Even worse, I
just tacked it onto the "Copy Password" function, instead of figuring out how
to create a new menu item.  It doesn't even delete the generated image after
viewing.  Definitely nothing more than a proof of concept.&lt;/p&gt;
&lt;p&gt;Here it is in action.&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://palebluepixel.org/2012/01/08/the-n9-qr-codes-and-keepassx/keepassx_demo.png"&gt;
&lt;img class="grid_7" src="https://palebluepixel.org/2012/01/08/the-n9-qr-codes-and-keepassx/keepassx_demo.png" alt="KeePassX generating a QR code" title="" /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class="clear"&gt;&lt;/div&gt;

&lt;p&gt;I won't be distributing my mod unless someone &lt;em&gt;really&lt;/em&gt; wants it, but it would
be cool to see this available as plugin to any password managers that support
plugins.  It could be handy to have clipboard managers generate QR codes too.&lt;/p&gt;</content><category term="general"></category><category term="keepass"></category><category term="n9"></category></entry><entry><title>Bouncey returns - more canvas physics</title><link href="https://palebluepixel.org/2011/11/17/bouncey-returns-more-canvas-physics/" rel="alternate"></link><published>2011-11-17T22:25:00-05:00</published><updated>2011-11-17T22:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:/2011/11/17/bouncey-returns-more-canvas-physics/</id><summary type="html">&lt;p&gt;This is a slightly upgraded version of the physics demo I showed in my &lt;a href="/2011/11/17/bouncey---canvas-physics/"&gt;last post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is still...&lt;/p&gt;
&lt;p&gt;&lt;quote&gt;"a …&lt;/quote&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a slightly upgraded version of the physics demo I showed in my &lt;a href="/2011/11/17/bouncey---canvas-physics/"&gt;last post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is still...&lt;/p&gt;
&lt;p&gt;&lt;quote&gt;"a buggy, rudimentary, just-for-fun javascript physics simulator."&lt;/quote&gt;&lt;/p&gt;
&lt;p&gt;This version has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pre-defined initial states&lt;/li&gt;
&lt;li&gt;gravity&lt;/li&gt;
&lt;li&gt;friction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It still has the "clinging" bug.  I know how to fix it, but didn't deem it important enough to spend time on it. :)&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/mwcz/bouncey/blob/master/bounce.html"&gt;code&lt;/a&gt; is well commented, so feel free to hack on it.&lt;/p&gt;
&lt;p&gt;Click on one of the initial states to begin the simulation.&lt;/p&gt;
&lt;style type="text/css"&gt;
#cnvs {
    margin: 0 auto;
    border: 1px solid black;
    -webkit-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
       -moz-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
         -o-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
            box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
}
&lt;/style&gt;

&lt;script type="text/javascript" src="https://palebluepixel.org/2011/11/17/bouncey-returns-more-canvas-physics/bouncey.js"&gt;&lt;/script&gt;

&lt;p&gt;Initial states:
&lt;button onclick="RANDOM();"&gt;Random&lt;/button&gt;
&lt;button onclick="POOL();"&gt;POOL&lt;/button&gt;
&lt;button onclick="HEAD_ON_COLLISION();"&gt;HEAD_ON_COLLISION&lt;/button&gt;&lt;/p&gt;
&lt;canvas id="cnvs" width="500" height="375"&gt; 
    Sorry, your browser does not support HTML5 canvas.  Lame.
&lt;/canvas&gt;

&lt;p&gt;&lt;button onclick="paused++;paused%=2;"&gt;Pause&lt;/button&gt; &lt;/p&gt;
&lt;pre&gt;
  velocity sum: &lt;span id="txt_velocity_sum"&gt;NONE&lt;/span&gt;
x velocity sum: &lt;span id="txt_velocity_sum_x"&gt;NONE&lt;/span&gt;
y velocity sum: &lt;span id="txt_velocity_sum_y"&gt;NONE&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;(The POOL initial state reproduces the clinging bug.)&lt;/p&gt;</content><category term="html5"></category><category term="canvas"></category><category term="physics"></category><category term="javascript"></category><category term="bouncey"></category><category term="web"></category></entry><entry><title>HTML5 tool for creating color palettes from an image</title><link href="https://palebluepixel.org/2011/11/17/html5-tool-for-creating-color-palettes-from-an-image/" rel="alternate"></link><published>2011-11-17T22:25:00-05:00</published><updated>2011-11-17T22:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:/2011/11/17/html5-tool-for-creating-color-palettes-from-an-image/</id><summary type="html">&lt;p&gt;For an &lt;a href="http://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction"&gt;HCI&lt;/a&gt; class project in Fall 2009, I pulled together some of my previous demos to make this integrated …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For an &lt;a href="http://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction"&gt;HCI&lt;/a&gt; class project in Fall 2009, I pulled together some of my previous demos to make this integrated tool.  It was just a prototype, and I haven't taken the time to get the code set up and working on this blog.  If anyone is interested, I can dig up the code and send it along.&lt;/p&gt;
&lt;iframe width="100%" height="550" src="http://www.youtube.com/embed/p9QiGPUiXdc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;script&gt;
var iframe = $('iframe');

function set_iframe_height() {
    iframe.attr('height', iframe.width() / (1280/1160) );
}

document.addEventListener('DOMContentLoaded', set_iframe_height);
window.addEventListener('resize', set_iframe_height);
&lt;/script&gt;

&lt;p&gt;In retrospect, it really could have used some narration...&lt;/p&gt;</content><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>Bouncey - canvas physics</title><link href="https://palebluepixel.org/2011/11/17/bouncey-canvas-physics/" rel="alternate"></link><published>2011-11-17T21:25:00-05:00</published><updated>2011-11-17T21:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:/2011/11/17/bouncey-canvas-physics/</id><summary type="html">&lt;p&gt;This is Bouncey.  It's a simple physics demo I wrote in early/mid 2011, with some contributions and bugfixes from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is Bouncey.  It's a simple physics demo I wrote in early/mid 2011, with some contributions and bugfixes from my good friend Greg Gardner.&lt;/p&gt;
&lt;p&gt;The description for &lt;a href="https://github.com/mwcz/bouncey"&gt;bouncey's github repo&lt;/a&gt; is:&lt;/p&gt;
&lt;p&gt;&lt;quote&gt;"a buggy, rudimentary, just-for-fun javascript physics simulator."&lt;/quote&gt;&lt;/p&gt;
&lt;p&gt;It covers &lt;a href="http://en.wikipedia.org/wiki/Newton's_laws_of_motion"&gt;Newton's laws of motion&lt;/a&gt;.&lt;/p&gt;
&lt;style type="text/css"&gt;
#cnvs {
    margin: 0 auto;
    display: block;
    border: 1px solid black;
    -webkit-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
       -moz-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
         -o-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
            box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
}
&lt;/style&gt;

&lt;script type="text/javascript" src="https://palebluepixel.org/2011/11/17/bouncey-canvas-physics/bouncey.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

window.onload = function() {

    canvas_element        = document.getElementById('cnvs');
    canvas_element.width  = W;
    canvas_element.height = H;

    canvas = canvas_element.getContext('2d');

    // create some squares with random velocities in the center of the canvas
    // objects are stored in the format 
    //      [ X, Y, X_velocity, Y_velocity, width, height, [R,G,B] ]
    var x, y, w, h, v_x, v_y, r, g, b, new_obj;

    // calculate all the possible initial y positions
    y_positions = [];
    for( var i = OBJ_HEIGHT; i &lt; H - OBJ_HEIGHT; i += 2 * OBJ_HEIGHT )
        y_positions.push( i );

    // calculate all the possible initial x positions
    x_positions = [];
    for( var i = OBJ_WIDTH; i &lt; W - OBJ_WIDTH; i += 2 * OBJ_WIDTH )
        x_positions.push( i );

    /*
    */
    for( var i = 0; i &lt; 40; ++i ) {

        // create values for the object
        x   = x_positions[ i % x_positions.length ];
        y   = y_positions[ Math.floor( i / x_positions.length ) % y_positions.length ];
        v_x = Math.random() * OBJ_MAX_VELOCITY*2 - OBJ_MAX_VELOCITY;
        v_y = Math.random() * OBJ_MAX_VELOCITY*2 - OBJ_MAX_VELOCITY;
        r   = Math.floor( Math.random() * 200 + 55 ); // random value 55..255
        g   = Math.floor( Math.random() * 200 + 55 );
        b   = Math.floor( Math.random() * 200 + 55 );

        // add the object to the scene
        var color = 'rgb(' + r + ',' + g + ',' + b + ')';
        var new_obj = new Circle( x, y, OBJ_R, v_x, v_y, color );

        objs.push( new_obj );
    }

    make_frame();

}

&lt;/script&gt;

&lt;canvas id="cnvs" width="500" height="375"&gt; 
    Sorry, your browser does not support HTML5 canvas.  Lame.
&lt;/canvas&gt;

&lt;p&gt;&lt;button onclick="paused++;paused%=2;"&gt;Pause&lt;/button&gt; &lt;/p&gt;
&lt;p&gt;An updated (but less colorful) version of bouncey is available 
&lt;a href="https://palebluepixel.org/2011/11/17/bouncey-returns-more-canvas-physics/"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="html5"></category><category term="canvas"></category><category term="physics"></category><category term="javascript"></category><category term="bouncey"></category><category term="web"></category></entry><entry><title>How not to use CSS3</title><link href="https://palebluepixel.org/2011/11/17/how-not-to-use-css3/" rel="alternate"></link><published>2011-11-17T20:25:00-05:00</published><updated>2011-11-17T20:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:/2011/11/17/how-not-to-use-css3/</id><summary type="html">&lt;p&gt;How to ruin a good thing by abusing CSS3 text shadows...&lt;/p&gt;
&lt;p&gt;Try refreshing.&lt;/p&gt;
&lt;p&gt;&lt;span class="css3_demo"&gt;CSS3!&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;The code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Random factors to determine …&lt;/code&gt;&lt;/pre&gt;</summary><content type="html">&lt;p&gt;How to ruin a good thing by abusing CSS3 text shadows...&lt;/p&gt;
&lt;p&gt;Try refreshing.&lt;/p&gt;
&lt;p&gt;&lt;span class="css3_demo"&gt;CSS3!&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;The code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Random factors to determine x/y offsets for text shadows and amount of blur
var x_factor    = Math.floor( Math.random() * 20 ) - 10;
var y_factor    = Math.floor( Math.random() * 20 ) - 10;
var blur_factor = Math.floor( Math.random() * 10 ) + 1;

// Pretty colors
var the_colors = 
                [
                '#7f9f7f',
                '#dca3a3',
                '#80d4aa',
                '#f8f893',
                '#ffcfaf',
                '#e89393',
                '#9ece9e',
                '#c0bed1',
                '#6c6c9c',
                '#71d3b4',
                '#a0afa0',
                '#efefef'
                ];

function make_it() { // MAKE IT SHINE
    // Build a string containing a comma-delimited list of the each shadow we want to apply
    // sprintf would be nice here.
    var shadows = "";
    for( var color_index in the_colors ) {
        shadows += 
            color_index * x_factor + "px " + 
            color_index * y_factor + "px " + 
            color_index * blur_factor + "px " + 
            the_colors[ color_index ];

        // Add a comma unless we're at the end of the color set
        if( color_index != the_colors.length - 1 )
            shadows += ',';
    }
    $('.css3_demo').css( 'textShadow', shadows ); // apply the new style
    the_colors.push( the_colors.shift() ); // move first color to the end of the list
    //console.log( shadows );
    setTimeout( 'make_it()', 50 ); // make the function async (kinda... effectively...) with setTimeout()
}

function move_it() { // MAKE IT MOVE
    /* uncomment this to make it move up and down...
    $('.css3_demo').animate( {top:'+=200'},2000, "linear" )
           .animate( {top:'-=200'},2000, "linear", move_it );
    */
}

$(document).ready( function() {
    make_it();
    move_it();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;script type="text/javascript"&gt;

// Random factors to determine x/y offsets for text shadows and amount of blur
var x_factor    = Math.floor( Math.random() * 20 ) - 10;
var y_factor    = Math.floor( Math.random() * 20 ) - 10;
var blur_factor = Math.floor( Math.random() * 10 ) + 1;

// Pretty colors
var the_colors = 
                [
                '#7f9f7f',
                '#dca3a3',
                '#80d4aa',
                '#f8f893',
                '#ffcfaf',
                '#e89393',
                '#9ece9e',
                '#c0bed1',
                '#6c6c9c',
                '#71d3b4',
                '#a0afa0',
                '#efefef'
                ];

function make_it() { // MAKE IT SHINE
    // Build a string containing a comma-delimited list of the each shadow we want to apply
    // sprintf would be nice here.
    var shadows = "";
    for( var color_index in the_colors ) {
        shadows += 
            color_index * x_factor + "px " + 
            color_index * y_factor + "px " + 
            color_index * blur_factor + "px " + 
            the_colors[ color_index ];

        // Add a comma unless we're at the end of the color set
        if( color_index != the_colors.length - 1 )
            shadows += ',';
    }
    $('.css3_demo').css( 'textShadow', shadows ); // apply the new style
    the_colors.push( the_colors.shift() ); // move first color to the end of the list
    //console.log( shadows );
    setTimeout( 'make_it()', 50 ); // make the function async (kinda... effectively...) with setTimeout()
}

function move_it() { // MAKE IT MOVE
    /* uncomment this to make it move up and down...
    $('.css3_demo').animate( {top:'+=200'},2000, "linear" )
           .animate( {top:'-=200'},2000, "linear", move_it );
    */
}

$(document).ready( function() {
    make_it();
    move_it();
});
&lt;/script&gt;

&lt;style type="text/css"&gt;

.css3_demo {
    font-family: FreeSansBold;
    text-align: center;
    color: #efefef;
    position: relative;
    top: 0;
    left: 50px;
    font-size: 9em;
    padding: 0;
}

&lt;/style&gt;</content><category term="html5"></category><category term="css3"></category><category term="typography"></category><category term="web"></category></entry><entry><title>HTML5 canvas point operations</title><link href="https://palebluepixel.org/2011/11/17/html5-canvas-point-operations/" rel="alternate"></link><published>2011-11-17T19:25:00-05:00</published><updated>2011-11-17T19:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:/2011/11/17/html5-canvas-point-operations/</id><summary type="html">&lt;p&gt;This is the last demo I made using &lt;a href="https://github.com/mwcz/jsimage"&gt;JSImage&lt;/a&gt;.  I created it some time around 2009-2010.  At the time, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the last demo I made using &lt;a href="https://github.com/mwcz/jsimage"&gt;JSImage&lt;/a&gt;.  I created it some time around 2009-2010.  At the time, I had checked out an &lt;a href="http://www.amazon.com/Digital-Image-Processing-Algorithmic-Introduction/dp/1846283795"&gt;imaging book&lt;/a&gt; from my university's library at least ten times.  Most of the exercises in that book I implemented in Python using &lt;a href="http://www.pythonware.com/products/pil/"&gt;PIL&lt;/a&gt;, but point operations were simple enough to port to JavaScript quickly.&lt;/p&gt;
&lt;p&gt;Point operations are image alterations that affect all pixels equally.  Other operations, like blurring for example, each result pixel depends on adjacent pixels.&lt;/p&gt;
&lt;p&gt;This demonstrates changing contrast, value, saturation, hue, color inversion, and threshold point operations.  Note that there is a bug with increasing value and increasing saturation which I never got around to fixing.&lt;/p&gt;
&lt;script type="text/javascript" src="https://palebluepixel.org/2011/11/17/html5-canvas-point-operations/jsimage.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://palebluepixel.org/2011/11/17/html5-canvas-point-operations/colorspace.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2011/11/17/html5-canvas-point-operations/bee.jpg"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;

    var IJS_PointOps;
    $(document).ready( function() {
        IJS_PointOps = new JSImage( "IJS_PointOps", "bee.jpg" );
    });

&lt;/script&gt;

&lt;style type="text/css" media="screen"&gt;
    .btn-group .glyphicon { margin-right: 0 }
    .point-ops-demo { font-size: 0.9em }
    .form-control.threshold { width: 4em }
&lt;/style&gt;

&lt;canvas class="img-responsive" id="IJS_PointOps"&gt;your browser does not support canvas&lt;/canvas&gt;

&lt;div class="point-ops-demo beside"&gt;
    &lt;div class="col-xs-6"&gt;
        Value (Brightness)
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.value( IJS_PointOps.canvas, 10 )"&gt;+&lt;/button&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.value( IJS_PointOps.canvas, -10 )"&gt;-&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-6"&gt;
        Contrast
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.contrast( IJS_PointOps.canvas, 1.1)" &gt;+&lt;/button&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.contrast( IJS_PointOps.canvas, 0.9)" &gt;-&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-6"&gt;
        Saturation
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.saturation( IJS_PointOps.canvas, 25 )" &gt;+&lt;/button&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.saturation( IJS_PointOps.canvas, -25 )" &gt;-&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-6"&gt;
        Hue
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.hue( IJS_PointOps.canvas, 20)" &gt;+&lt;/button&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.hue( IJS_PointOps.canvas, -20)" &gt;-&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-6"&gt;
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.invert()"&gt;Invert&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-6"&gt;
        &lt;br /&gt;
        &lt;div class="input-group"&gt;
            &lt;span class="input-group-btn"&gt;
                &lt;button class="btn btn-default" onmousedown="IJS_PointOps.threshold( IJS_PointOps.canvas, document.getElementById('t').value )"&gt;Threshold&lt;/button&gt;
            &lt;/span&gt;
            &lt;input type="text" value="127" class="form-control threshold" maxlength="3" size="3" id="t" /&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-6"&gt;
        &lt;br /&gt;
        &lt;button class="btn btn-default" onclick="IJS_PointOps = new JSImage( 'IJS_PointOps', 'bee.jpg' );"&gt;Reset&lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="image processing"></category><category term="jsimage"></category><category term="web"></category><category term="javascript"></category></entry><entry><title>Bouncey</title><link href="https://palebluepixel.org/projects/bouncey" rel="alternate"></link><published>2011-11-17T00:00:00-05:00</published><updated>2011-11-17T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:/projects/bouncey</id><summary type="html">&lt;p&gt;Bouncey is a simple physics demo I wrote in early/mid 2011, with
some contributions and bugfixes from my good …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bouncey is a simple physics demo I wrote in early/mid 2011, with
some contributions and bugfixes from my good friend Greg Gardner.&lt;/p&gt;
&lt;p&gt;Fun, simple, and oddly relaxing.&lt;/p&gt;
&lt;hr /&gt;
&lt;style type="text/css"&gt;
#cnvs {
    background-color: #1f1f1f;
    margin: 0 auto;
    -webkit-box-shadow: 0px 2px 18px rgba( 0, 0, 0, 0.7 );
       -moz-box-shadow: 0px 2px 18px rgba( 0, 0, 0, 0.7 );
         -o-box-shadow: 0px 2px 18px rgba( 0, 0, 0, 0.7 );
            box-shadow: 0px 2px 18px rgba( 0, 0, 0, 0.7 );
}
&lt;/style&gt;

&lt;script type="text/javascript" src="https://palebluepixel.org/projects/bouncey/bouncey.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

$(function() {

    canvas_element        = document.getElementById('cnvs');
    canvas_element.width  = W;
    canvas_element.height = H;

    canvas = canvas_element.getContext('2d');

    // create some squares with random velocities in the center of the canvas
    // objects are stored in the format 
    //      [ X, Y, X_velocity, Y_velocity, width, height, [R,G,B] ]
    var x, y, w, h, v_x, v_y, r, g, b, new_obj;

    // calculate all the possible initial y positions
    y_positions = [];
    for( var i = OBJ_HEIGHT; i &lt; H - OBJ_HEIGHT; i += 2 * OBJ_HEIGHT )
        y_positions.push( i );

    // calculate all the possible initial x positions
    x_positions = [];
    for( var i = OBJ_WIDTH; i &lt; W - OBJ_WIDTH; i += 2 * OBJ_WIDTH )
        x_positions.push( i );

    /*
    */
    for( var i = 0; i &lt; 40; ++i ) {

        // create values for the object
        x   = x_positions[ i % x_positions.length ];
        y   = y_positions[ Math.floor( i / x_positions.length ) % y_positions.length ];
        v_x = Math.random() * OBJ_MAX_VELOCITY*2 - OBJ_MAX_VELOCITY;
        v_y = Math.random() * OBJ_MAX_VELOCITY*2 - OBJ_MAX_VELOCITY;
        r   = Math.floor( Math.random() * 200 + 55 ); // random value 55..255
        g   = Math.floor( Math.random() * 200 + 55 );
        b   = Math.floor( Math.random() * 200 + 55 );

        // add the object to the scene
        var color = 'rgb(' + r + ',' + g + ',' + b + ')';
        var new_obj = new Circle( x, y, OBJ_R, v_x, v_y, color );

        objs.push( new_obj );
    }

    setInterval( make_frame, PERIOD );

});

&lt;/script&gt;

&lt;canvas class="img-responsive" id="cnvs" width="500" height="375"&gt; 
    Sorry, your browser does not support HTML5 canvas.  Lame.
&lt;/canvas&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;a href="/tag/bouncey/" title="Posts about Bouncey"&gt;Posts about Bouncey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mwcz/bouncey/" title="Bouncey on GitHub"&gt;Bouncey's code on GitHub&lt;/a&gt;&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category></entry><entry><title>HTML5 canvas area selection averaging</title><link href="https://palebluepixel.org/2011/11/16/html5-canvas-area-selection-averaging/" rel="alternate"></link><published>2011-11-16T18:25:00-05:00</published><updated>2011-11-16T18:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-16:/2011/11/16/html5-canvas-area-selection-averaging/</id><summary type="html">&lt;p&gt;This is a demo from late 2009.  It's an extension of the single-pixel &lt;a href="/2011/11/16/html5-canvas-eyedropper/"&gt;eyedropper&lt;/a&gt; I wrote previously.&lt;/p&gt;
&lt;p&gt;It's powered by …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a demo from late 2009.  It's an extension of the single-pixel &lt;a href="/2011/11/16/html5-canvas-eyedropper/"&gt;eyedropper&lt;/a&gt; I wrote previously.&lt;/p&gt;
&lt;p&gt;It's powered by an early version of an old JS toolkit I wrote called JSImage.  The latest version is available at my &lt;a href="https://github.com/mwcz/jsimage"&gt;JSImage github repo&lt;/a&gt;.  Don't be fooled by the 2011 commits, those are just artifacts from svn-&amp;gt;git migration.  No guarantees that the histo's are actually correct. :)&lt;/p&gt;
&lt;p&gt;I used an old version of a rectangular selection tool called marquee.  I believe it's still located &lt;a href="http://marqueetool.net/"&gt;here&lt;/a&gt; but I can't be totally sure that's the same project.&lt;/p&gt;
&lt;p&gt;Click, drag, and taste the magic. :|&lt;/p&gt;
&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2011/11/16/html5-canvas-area-selection-averaging/kazoo.png"&gt;
&lt;canvas id="c0"&gt;
    Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
&lt;/canvas&gt;&lt;/p&gt;
&lt;style type="text/css"&gt;
    canvas {
        margin     : 0 auto;
        outline    : 36px solid black;
        margin     : 46px auto;
        transition : 0.1168s all ease;
        display    : block;
        cursor     : crosshair;
    }
&lt;/style&gt;

&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="https://palebluepixel.org/2011/11/16/html5-canvas-area-selection-averaging/marker.css" /&gt;&lt;/p&gt;
&lt;script type="text/javascript" src="https://palebluepixel.org/2011/11/16/html5-canvas-area-selection-averaging/marquee/prototype_reduced.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://palebluepixel.org/2011/11/16/html5-canvas-area-selection-averaging/marquee/rectmarquee.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://palebluepixel.org/2011/11/16/html5-canvas-area-selection-averaging/JSImage.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

$(function() {

    images0 = new JSImage( "c0", "kazoo.png" );
    setTimeout(function(){images0.draggable();},100); // enable the selection

});

&lt;/script&gt;</content><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="jsimage"></category><category term="colorpal"></category><category term="web"></category><category term="javascript"></category></entry><entry><title>HTML5 canvas RGB histogram</title><link href="https://palebluepixel.org/2011/11/16/html5-canvas-rgb-histogram/" rel="alternate"></link><published>2011-11-16T17:25:00-05:00</published><updated>2011-11-16T17:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-16:/2011/11/16/html5-canvas-rgb-histogram/</id><summary type="html">&lt;p&gt;This is yet another demo from around 2009.  It's simple enough.  Click a
button, draw an unbinned RGB histogram of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is yet another demo from around 2009.  It's simple enough.  Click a
button, draw an unbinned RGB histogram of the source image.&lt;/p&gt;
&lt;p&gt;It's powered by an early version of an old JS toolkit I wrote called JSImage.
The latest version is available at my &lt;a href="https://github.com/mwcz/jsimage"&gt;JSImage github
repo&lt;/a&gt;.  Don't be fooled by the 2011 commits,
those are just artifacts from svn-&amp;gt;git migration.  No guarantees that the
histo's are actually correct. :)&lt;/p&gt;
&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2011/11/16/html5-canvas-rgb-histogram/kazoo.png"&gt;
&lt;div class="panel panel-default"&gt;
    &lt;div class="panel-heading"&gt;
        &lt;b&gt;Original image&lt;/b&gt;
    &lt;/div&gt;
    &lt;div class="panel-body"&gt;
        &lt;canvas id="c0"&gt;
            Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
        &lt;/canvas&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type="button" onclick="draw_histo()" value="Draw histograms" /&gt;&lt;/p&gt;
&lt;div class="row"&gt;
    &lt;div class="col-xs-12 col-sm-4"&gt;
    &lt;div class="panel panel-default"&gt;
        &lt;div class="panel-heading"&gt;
            &lt;b&gt;Red&lt;/b&gt;
        &lt;/div&gt;
        &lt;div class="panel-body"&gt;
            &lt;canvas class="img-responsive" id="cr"&gt;
                Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
            &lt;/canvas&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-12 col-sm-4"&gt;
        &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading"&gt;
                &lt;b&gt;Green&lt;/b&gt;
            &lt;/div&gt;
            &lt;div class="panel-body"&gt;
                &lt;canvas class="img-responsive" id="cg"&gt;
                    Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
                &lt;/canvas&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-12 col-sm-4"&gt;
        &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading"&gt;
                &lt;b&gt;Blue&lt;/b&gt;
            &lt;/div&gt;
            &lt;div class="panel-body"&gt;
                &lt;canvas class="img-responsive" id="cb"&gt;
                    Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
                &lt;/canvas&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I'm pretty sure the results are wrong, but here, years later, I can't be bothered to fix it. ;)&lt;/p&gt;
&lt;script type="text/javascript" src="https://palebluepixel.org/2011/11/16/html5-canvas-rgb-histogram/JSImage.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

var draw_histo;
$(function () {

    var images0 = new JSImage( "c0", "kazoo.png" );
    var imagesr = new JSImage( "cr", "kazoo.png" );
    var imagesg = new JSImage( "cg", "kazoo.png" );
    var imagesb = new JSImage( "cb", "kazoo.png" );

    draw_histo = function () {

        /**
         * Color histo canvases the color of their histo
         */
        images0.histo( imagesr.canvas, 'r', 'rgba(255,0,0,0.9)', 'rgba(0,0,0,0.8)' );
        images0.histo( imagesg.canvas, 'g', 'rgba(0,200,0,0.9)', 'rgba(0,0,0,0.8)' );
        images0.histo( imagesb.canvas, 'b', 'rgba(0,0,200,0.9)', 'rgba(0,0,0,0.8)' );

    };


});
&lt;/script&gt;</content><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="jsimage"></category><category term="web"></category><category term="javascript"></category></entry><entry><title>HTML5 canvas 3D pixel array</title><link href="https://palebluepixel.org/2011/11/16/html5-canvas-3d-pixel-array/" rel="alternate"></link><published>2011-11-16T16:25:00-05:00</published><updated>2011-11-16T16:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-16:/2011/11/16/html5-canvas-3d-pixel-array/</id><summary type="html">&lt;p&gt;This is another demo from 2009-ish.  When I started experimenting with canvas, I felt uncomfortable with the 1-dimensionality of &lt;a href="https://developer.mozilla.org/en/DOM/CanvasPixelArray"&gt;CanvasPixelArray …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is another demo from 2009-ish.  When I started experimenting with canvas, I felt uncomfortable with the 1-dimensionality of &lt;a href="https://developer.mozilla.org/en/DOM/CanvasPixelArray"&gt;CanvasPixelArray&lt;/a&gt;.  I wrote this script to convert it into a more logical format: X by Y by RGBA.  Let me rephrase that.  By "more logical", I mean "more logical, &lt;em&gt;to me&lt;/em&gt;, &lt;em&gt;at the time&lt;/em&gt;).  1D is fine, and I can't think of any use for this script.  But, nonetheless, here it is, including the original description.&lt;/p&gt;
&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2011/11/16/html5-canvas-3d-pixel-array/kazoo.png"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;

$(function() {
    var c;
    var cnvs;

    function draw() {

        cnvs = document.getElementById("c");
        tmpl = document.getElementById("t");

        if( cnvs.getContext) { // Check for canvas support

            c = cnvs.getContext('2d');
            t = tmpl.getContext('2d');
            var color = document.getElementById("color");

            var images = new Image();

            images.onload = function() {
                cnvs.width = images.width;
                cnvs.height = images.height; // resize to fit image
                tmpl.width = images.width;
                tmpl.height = images.height; // resize to fit image
                c.drawImage( images, 0, 0 );
            }
            images.src = "kazoo.png";

            getpixelarray = function() {
                var pixarray = new Array();
                var imagesdata = c.getImageData( 0, 0, cnvs.width, cnvs.height ).data;

                /**
                 * getImageData() returns a one-dimensional array where each element represents,
                 * one subpixel.  So a full set of pixels looks like this:
                 *
                 *      (R, G, B, A, R, G, B, A, R, G, B, A, ...)
                 *
                 * Ugly, right?  Yeah.  So I'm translating them into a 2D array where the origin
                 * (sadly) is at the top left.
                 *
                 * When doing the translation, I'm also starting at the bottom right, so there
                 * only has to be ONE array enlarge operation each for the X and Y arrays.
                 */

                // build empty pix array.  we'll fill it later
                //console.time("build empty array");
                for( var x = cnvs.width-1; x &gt;= 0; x-- ) {

                    pixarray[x] = new Array(); // insert new vertical array

                    for( var y = cnvs.height-1; y &gt;= 0; y-- ) {

                        pixarray[x][y] = new Array(0,0,0,0);

                    }

                }


                /**
                 * Now we fill up the pix array with real values.
                 * We don't REALLY need the alpha channel, but I'm including it
                 * just in case a use arises for it in the future.  Likely.
                 */

                for( var i = 0; i &lt; imagesdata.length-3; i+=4 ) {
                    var x = parseInt( parseInt(i/4) % ( cnvs.width ) );
                    var y = parseInt( parseInt(i/4) / ( cnvs.width ) );

                    pixarray[x][y][0] = imagesdata[i];
                    pixarray[x][y][1] = imagesdata[i+1];
                    pixarray[x][y][2] = imagesdata[i+2];
                    pixarray[x][y][3] = imagesdata[i+3];

                }


                for( var y = 0; y &lt; cnvs.height; y++ ) { // loop over y
                    for( var x = 0; x &lt; cnvs.width; x++ ) { // loop over x
                        t.fillStyle = "rgba(" + pixarray[x][y][0] + "," + pixarray[x][y][1] + "," + pixarray[x][y][2] + "," + pixarray[x][y][3] + ")";
                        t.fillRect(x, y, 1, 1);
                    }
                }

                return pixarray;
            }


        }
    }
    draw();

});
&lt;/script&gt;

&lt;h1 id="canvas-pixarray"&gt;canvas pixarray&lt;/h1&gt;
&lt;p&gt;After loading an image file into a &amp;lt;canvas&amp;gt; element, you can retrieve its
pixels with &lt;code&gt;getImageData()&lt;/code&gt;.  The problem (not really a problem, more an
inconvenience) is that the array of pixels is one-dimensional.  &lt;code&gt;getImageData&lt;/code&gt; returns pixels in the following format:&lt;/p&gt;
&lt;pre&gt;
( R&lt;sub&gt;0&lt;/sub&gt;, G&lt;sub&gt;0&lt;/sub&gt;, B&lt;sub&gt;0&lt;/sub&gt;, A&lt;sub&gt;1&lt;/sub&gt;, R&lt;sub&gt;1&lt;/sub&gt;, G&lt;sub&gt;1&lt;/sub&gt;, B&lt;sub&gt;1&lt;/sub&gt;, A&lt;sub&gt;1&lt;/sub&gt;, ... )
&lt;/pre&gt;

&lt;p&gt;As a human, that's really tough to work with, so this script converts that to a more
logical 3D array (X by Y by RGBA)&lt;/p&gt;
&lt;p&gt;&lt;input class="btn btn-primary" type="button" value="Convert 1D pixel array into 3D pixel array" onclick="getpixelarray();" /&gt;&lt;/p&gt;
&lt;div class="row"&gt;
    &lt;div class="col-xs-6"&gt;
        &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading"&gt;
                &lt;b&gt;
                    Image drawn directly from image file
                &lt;/b&gt;
            &lt;/div&gt;
            &lt;div class="panel-body"&gt;
                &lt;canvas class="img-responsive" id="c" width="650" height="250"&gt;
                    Your browser does not support the &amp;lt;canvas&amp;gt; element.
                    Lame.
                &lt;/canvas&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-6"&gt;
        &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading"&gt;
                &lt;b&gt;
                    Image drawn from the 3D image array
                &lt;/b&gt;
            &lt;/div&gt;
            &lt;div class="panel-body"&gt;
                &lt;canvas class="img-responsive" id="t" width="650" height="250"&gt;
                    Your browser does not support the &amp;lt;canvas&amp;gt; element.
                    Lame.
                &lt;/canvas&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</content><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>HTML5 Canvas eyedropper</title><link href="https://palebluepixel.org/2011/11/16/html5-canvas-eyedropper/" rel="alternate"></link><published>2011-11-16T15:25:00-05:00</published><updated>2011-11-16T15:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-16:/2011/11/16/html5-canvas-eyedropper/</id><summary type="html">&lt;p&gt;An HTML5 Canvas eyedropper.&lt;/p&gt;</summary><content type="html">&lt;style type="text/css"&gt;
    canvas {
        margin        : 0 auto;
        border-width  : 36px;
        border-style  : solid;
        border-radius : 16px;
        transition    : 0.1168s all ease;
        margin        : 0 auto;
        display       : block;
        cursor        : crosshair;
    }
&lt;/style&gt;

&lt;p&gt;&lt;img style="display: none !important;" src="https://palebluepixel.org/2011/11/16/html5-canvas-eyedropper/kazoo.png"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;

$(function() {
var c;
var cnvs = document.getElementById("c");

if( cnvs.getContext) { // Check for canvas support
// DRAW FUN STUFF!

    c = cnvs.getContext('2d');
    var color = document.getElementById("color");
    var colorcode = document.getElementById("colorcode");

    var images = new Image();

    images.onload = function() {
        cnvs.width = images.width;cnvs.height = images.height; // resize to fit image
        c.drawImage( images, 0, 0 );
    }
    images.src = "kazoo.png";

    pixel = function(e) {

        // find the element's position
        var x = 0;
        var y = 0;
        var o = cnvs;
        do {
            x += o.offsetLeft;
            y += o.offsetTop;
        } while (o = o.offsetParent);

        x = e.pageX - x - 36; // 36 = border width
        y = e.pageY - y - 36; // 36 = border width
        var imagesdata = c.getImageData( x, y, 1, 1 );
        var new_color = [ imagesdata.data[0], imagesdata.data[1], imagesdata.data[2] ];
        cnvs.style.borderColor = "rgb("+new_color+")";
        colorcode.innerHTML = "rgb("+new_color+")";
    }

    cnvs.onmousedown = function(e) {
        cnvs.onmousemove = pixel; // fire pixel() while user is dragging
        cnvs.onclick = pixel; // only so it will still fire if user doesn't drag at all
    }

    cnvs.onmouseup = function() {
        cnvs.onmousemove = null;
    }

}
});

&lt;/script&gt;

&lt;p&gt;This is an old demo I made of an &lt;a href="http://en.wikipedia.org/wiki/Canvas_element"&gt;HTML5 canvas&lt;/a&gt; eyedropper.  Circa 2009, I believe.  Just click and drag on the image to see it in action.&lt;/p&gt;
&lt;p&gt;&lt;span id="colorcode"&gt;rgb(0,0,0)&lt;/span&gt;&lt;/p&gt;
&lt;canvas id="c"&gt;Sorry, in order to view this demo you need a Web browser that supports HTML5 canvas.&lt;/canvas&gt;

&lt;p&gt;It's a pretty simple script, and works by declaring this function which handles onclick and ondrag events from the canvas.  cnvs is the canvas element, and c is the canvas's 2D rendering context object.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pixel = function(e) {
    // calculate the x and y coordinates of the cursor
    var imagesdata = c.getImageData( x, y, 1, 1 );
    var new_color = [ imagesdata.data[0],
                      imagesdata.data[1],
                      imagesdata.data[2] ];
    color.style.background = "rgb("+new_color+")";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's just a summary; the function actually does a little more than that.  Take a look at the source for this page if you're interested.&lt;/p&gt;</content><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>Opcode patterns 70% finished</title><link href="https://palebluepixel.org/2011/10/13/opcode-patterns-70-finished/" rel="alternate"></link><published>2011-10-13T22:27:50-04:00</published><updated>2011-10-13T22:27:50-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-10-13:/2011/10/13/opcode-patterns-70-finished/</id><summary type="html">&lt;p&gt;genlut.py is really filling out.  It generates the LUT for all 68k opcodes (68000 only), and I'm about 70 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;genlut.py is really filling out.  It generates the LUT for all 68k opcodes (68000 only), and I'm about 70% done.  77 down, 34 to go.&lt;/p&gt;
&lt;p&gt;The OPCODES dict defines the first two bytes of each opcode, both static bits and operands.  The operand strings act as keys into the PATTERNS struct, which contains all possible values for each operand.&lt;/p&gt;
&lt;p&gt;The recursive function gen() is fed an opcode pattern which may contain operand strings as well as static bits.  Some operand patterns contain other operand patterns, so gen() keeps recursing until all operand patterns are gone.  Once a set of totally static bits has been created, those bits are added to INSTRUCTIONS, along with the name of the opcode.&lt;/p&gt;
&lt;p&gt;The PATTERNS, OPCODES, and INSTRUCTIONS dicts are all named poorly, and the whole solution  isn't ultra-elegant, but it does follow the structure of the 68k PRM pretty intuitively and is easy to edit.  Once it's complete, I should never need to run it again.&lt;/p&gt;
&lt;p&gt;(This post was copied from my old &lt;a href="http://aejs.blogspot.com/"&gt;AEJS blog&lt;/a&gt;)&lt;/p&gt;</content><category term="aejs"></category><category term="html5"></category><category term="javascript"></category><category term="amiga"></category><category term="web"></category></entry><entry><title>AEJS</title><link href="https://palebluepixel.org/projects/aejs" rel="alternate"></link><published>2011-10-13T00:00:00-04:00</published><updated>2011-10-13T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-10-13:/projects/aejs</id><summary type="html">&lt;p&gt;AEJS was an experimental Amiga 500 emulator written in JavaScript.  The name
stands for Amiga Emulator JavaScript and is pronounced …&lt;/p&gt;</summary><content type="html">&lt;p&gt;AEJS was an experimental Amiga 500 emulator written in JavaScript.  The name
stands for Amiga Emulator JavaScript and is pronounced "aegis".&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="row"&gt;
    &lt;div class="col-xs-12 col-sm-6"&gt;
        &lt;img style="height: 168px"
        src="https://palebluepixel.org/static/projects/aejs/icon_aejs.png" title="AEJS logo"
        alt="AEJS logo" /&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-12 col-sm-6"&gt;
        &lt;img style="height: 150px"
        src="https://palebluepixel.org/static/projects/aejs/log.png" title="AEJS log"
        alt="AEJS log" /&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;My motivation to build AEJS came from these sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The HTML5 era introduced new APIs which finally made it possible: 
   &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" title="JavaScript typed arrays"&gt;Typed arrays&lt;/a&gt;, &lt;a href="http://www.w3.org/TR/webaudio/" title="Web Audio API"&gt;Web Audio&lt;/a&gt;, &lt;a href="http://www.w3.org/TR/FileAPI/" title="File API"&gt;File&lt;/a&gt;, &lt;a href="http://www.w3.org/TR/2dcontext/" title="Canvas 2D context"&gt;Canvas&lt;/a&gt;, &lt;a href="http://www.w3.org/TR/fullscreen/" title="Fullscreen API"&gt;Fullscreen&lt;/a&gt;,
   &lt;a href="http://www.w3.org/TR/gamepad/" title="Gamepad API"&gt;Gamepad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fabrice Bellard's &lt;a href="http://bellard.org/jslinux/tech.html"&gt;JavaScript PC emulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript performance was finally good enough to make it feasible&lt;/li&gt;
&lt;li&gt;It bridged front-end web development with low-level machine code, both of
   which are super awesome&lt;/li&gt;
&lt;li&gt;I still have the Amiga 500 I played with obsessively since 3 years-old&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://en.wikipedia.org/wiki/Motorola_68000" title="Motorola 68000"&gt;68000&lt;/a&gt; is legendary and I wanted to find out why&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I stopped development for some equally good reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This was my first emulator, and the Amiga 500 is a fairly complex set of
   chips, and I quickly realized it would take a very long time to complete.  I
   decided to focus on other projects which could be finished in a more
   reasonable timeframe (I'm looking at you, &lt;a href="http://colorpal.org/" title="ColorPal"&gt;ColorPal&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The final nail in the coffin was realizing that while JavaScript was
   definitely up to the task, there was pretty much no reason to write it
   entirely in JavaScript when it could be written in C and compiled to JS with
   &lt;a href="http://emscripten.org" title="emscripten"&gt;emscripten&lt;/a&gt;.  The result would be faster, more robust, and type-safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;div class="row"&gt;
    &lt;div class="text-center col-xs-12 col-sm-6"&gt;
        &lt;img src="https://palebluepixel.org/static/projects/aejs/splash.png" 
        title="AEJS splash screen" alt="AEJS splash screen" /&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;Astoundingly observant readers will notice that &lt;a href="https://github.com/naTmeg/ScriptedAmigaEmulator" title="ScriptedAmigaEmulator"&gt;Scripted Amiga Emulator&lt;/a&gt;
came out at around the same time I stopped contributing to AEJS.  It's based on
&lt;a href="https://github.com/tonioni/WinUAE" title="WinUAE"&gt;WinUAE&lt;/a&gt; and was ported (by hand, I believe) from C++ to JavaScript.  A very
impressive project, but not at all what I was going for with AEJS.  AEJS was
about fueling my curiosity and exploration.  SAE is extremely impressive and
works very well, but it didn't demotivate me in any way.&lt;/p&gt;
&lt;p&gt;I may come up with some even better reasons to resume development at some point
in the future.  I still love my old Amiga 500 and want to see it live on in
some fashion.  I don't like having pet projects nipping at my heels that never
go anywhere, though, so I'm calling this one dead (&lt;a href="https://github.com/mwcz/AEJS/" title="AEJS on GitHub"&gt;for now&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Addendum&lt;/em&gt;: I just learned today (2013-12-16) that Christian Stefansen ported
PUAE (Portable Universal Amiga Emulator) to PNaCl.  This allows UAE to run
inside any Chrome browser.  &lt;a href="http://pnacl-amiga-emulator.appspot.com/" title="PNaCl port of PUAE"&gt;Check it out&lt;/a&gt; or &lt;a href="https://github.com/cstefansen/PUAE" title="PNaCl PUAE port's source code"&gt;fork it&lt;/a&gt;.&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category></entry><entry><title>LUT</title><link href="https://palebluepixel.org/2011/09/22/lut/" rel="alternate"></link><published>2011-09-22T22:27:50-04:00</published><updated>2011-09-22T22:27:50-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-09-22:/2011/09/22/lut/</id><summary type="html">&lt;p&gt;Decoding is easy. Decoding requires a lot of typing. (I am starting to believe this is true of ever aspect …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Decoding is easy. Decoding requires a lot of typing. (I am starting to believe this is true of ever aspect of interpreted emulation...)&lt;/p&gt;
&lt;p&gt;For the AEJS decoder, I am creating a &lt;a href="http://en.wikipedia.org/wiki/Lookup_table"&gt;look-up table&lt;/a&gt; with every possible pattern for each instruction. It was my first idea, but I initially discarded it as "wasteful and inelegant". Later, I accepted it as "really fast".&lt;/p&gt;
&lt;p&gt;I'm generating a large set of bit patterns that map to 68k opcodes, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0100101011111010 -&amp;gt; BGND
0100101011111100 -&amp;gt; ILLEGAL
0100111001110000 -&amp;gt; RESET
0100111001110001 -&amp;gt; NOP
0100111001110010 -&amp;gt; STOP
0100111001110011 -&amp;gt; RTE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The current code can be found &lt;a href="https://github.com/mwcz/AEJS/blob/master/src/genlut.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's written in Python and yes, AEJS is a JavaScript project.  There's a reason.  I see two approaches to generating the LUT (look-up table).&lt;/p&gt;
&lt;h2 id="generate-the-lut-on-launch-dynamic"&gt;Generate the LUT on launch (dynamic)&lt;/h2&gt;
&lt;p&gt;This has the advantage of being easier to debug.  It also might be easier if I ever expand the emulator to other chips, like the &lt;a href="http://en.wikipedia.org/wiki/Motorola_68020"&gt;68020&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Motorola_68030"&gt;68030&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It currently takes about 0.466 seconds on my machine to generate ~12,000 patterns.  That means it should take less than 2.5s to generate the full LUT.&lt;/p&gt;
&lt;h2 id="generate-the-lut-pre-launch-static"&gt;Generate the LUT pre-launch (static)&lt;/h2&gt;
&lt;p&gt;This is what I'm currently working toward.  genlut.py is currently generating about 12,000 opcode bit patterns out of a max of I'm-not-sure-yet-but-slightly-less-than-65,536.&lt;/p&gt;
&lt;p&gt;With this method, I would run genlut.py one final time, pipe the output into a static JS file, and regex the contents into a JS array.  The LUT would never have to be generated again, and would exist happily forever-after.&lt;/p&gt;
&lt;p&gt;Cons: relies upon the LUT being 100% correct, as any errors would be hard to debug, and would require another run of genlut.py to fix.&lt;/p&gt;
&lt;p&gt;Pros: AEJS will launch faster without having to generate the LUT each time.  If I can verify that the LUT is 100% correct, this is obviously the right approach.&lt;/p&gt;
&lt;p&gt;I'll continue on with the static method for now, and odds are I'll stick with it.   2.5s is too big a price to pay.&lt;/p&gt;
&lt;p&gt;Back to work:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://palebluepixel.org/2011/09/22/lut/workarea.png"&gt;&lt;img class="grid_7" src="https://palebluepixel.org/2011/09/22/lut/workarea.png" alt=":)" title="" /&gt;&lt;/a&gt;
&lt;div class="clear"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;(This post was copied from my old &lt;a href="http://aejs.blogspot.com/"&gt;AEJS blog&lt;/a&gt;)&lt;/p&gt;</content><category term="aejs"></category><category term="html5"></category><category term="javascript"></category><category term="amiga"></category><category term="web"></category></entry><entry><title>Introducing AEJS</title><link href="https://palebluepixel.org/2011/09/20/introducing-aejs/" rel="alternate"></link><published>2011-09-20T22:27:50-04:00</published><updated>2011-09-20T22:27:50-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-09-20:/2011/09/20/introducing-aejs/</id><summary type="html">&lt;p&gt;Introducing AEJS, an Amiga emulator written in JavaScript.  Wait, wording it like that makes it sound like it's finished.  It …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Introducing AEJS, an Amiga emulator written in JavaScript.  Wait, wording it like that makes it sound like it's finished.  It isn't.  It won't be for a long time.  AEJS is just a hobby, and will never hold a candle to UAE.&lt;/p&gt;
&lt;p&gt;Why the Amiga?  Given that this is my first emulator, it would have been much easier to go with a 6502 or 8080 instead, but I didn't grow up with those; I grew up with a 68k powering an Amiga 500.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://starringthecomputer.com/feature.php?f=122"&gt;&lt;img src="https://palebluepixel.org/2011/09/20/introducing-aejs/stepfather_iii_amiga_500_2.jpg" alt="Amiga 500 in Stepfather III" title="" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why JavaScript?  Fabrice Bellard didn't make any excuses for writing an x86 emulator in JavaScript, so I won't either.&lt;/p&gt;
&lt;p&gt;I'll be using this blog to share updates on the project.  Progress, problems, etc.  Anyone with interest or knowledge of 68k arch or Amiga chipsets is welcome to get involved.&lt;/p&gt;
&lt;p&gt;Next up: completing the code to generate an opcode lookup table.&lt;/p&gt;
&lt;p&gt;(This post was copied from my old &lt;a href="http://aejs.blogspot.com/"&gt;AEJS blog&lt;/a&gt;)&lt;/p&gt;</content><category term="aejs"></category><category term="html5"></category><category term="javascript"></category><category term="amiga"></category><category term="web"></category></entry><entry><title>JSImage</title><link href="https://palebluepixel.org/projects/jsimage" rel="alternate"></link><published>2009-01-01T00:00:00-05:00</published><updated>2009-01-01T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2009-01-01:/projects/jsimage</id><summary type="html">&lt;p&gt;JSImage was a basic, buggy, just-for-fun image processing library that I wrote
in 2008/2009 when I first started seriously …&lt;/p&gt;</summary><content type="html">&lt;p&gt;JSImage was a basic, buggy, just-for-fun image processing library that I wrote
in 2008/2009 when I first started seriously studying JavaScript.&lt;/p&gt;
&lt;p&gt;A stumbled across a &lt;a href="http://imagingbook.com/books/englisch-edition-3-vol-softcover/" title="Principles of Digital Image Processing"&gt;book&lt;/a&gt; in my university library, and started
implementing the algorithms on the newly available HTML5 canvas element.&lt;/p&gt;
&lt;p&gt;I've made &lt;a href="/tag/jsimage" title="Posts about JSImage"&gt;several posts&lt;/a&gt; about JSImage which contain live demos.&lt;/p&gt;
&lt;p&gt;I think I put more work into code formatting than correct output. ;)&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category></entry><entry><title>median-cut.js</title><link href="https://palebluepixel.org/projects/mediancut" rel="alternate"></link><published>2009-01-01T00:00:00-05:00</published><updated>2009-01-01T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2009-01-01:/projects/mediancut</id><summary type="html">&lt;p&gt;The unfortunately-named &lt;code&gt;median-cut.js&lt;/code&gt; is the library that powers
&lt;a href="http://colorpal.org/" title="ColorPal"&gt;ColorPal's&lt;/a&gt; palette generation.&lt;/p&gt;
&lt;p&gt;I say it's unfortunately named because it doesn't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The unfortunately-named &lt;code&gt;median-cut.js&lt;/code&gt; is the library that powers
&lt;a href="http://colorpal.org/" title="ColorPal"&gt;ColorPal's&lt;/a&gt; palette generation.&lt;/p&gt;
&lt;p&gt;I say it's unfortunately named because it doesn't implement a pure median-cut
algorithm.  It's identical, except that instead of cutting boxes at their
median, they are instead cut at the mean.  This results in more pleasing color
palettes in most cases.&lt;/p&gt;
&lt;p&gt;Here's a comparison:&lt;/p&gt;
&lt;p&gt;&lt;img alt="median-cut vs mean-cut comparison image" src="https://palebluepixel.org/projects/mediancut/median-mean-comparison.png" title="median-cut vs mean-cut comparison image" /&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in median-cut vs mean-cut, see &lt;a href="/2012/02/10/colorpal-palettes-improved/" title="Post about mean-cut"&gt;this post&lt;/a&gt; for a
technical discussion.&lt;/p&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/mwcz/median-cut-js" title="median-cut.js GitHub repository"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="html5"></category><category term="javascript"></category><category term="color"></category></entry><entry><title>clayto.com</title><link href="https://palebluepixel.org/projects/clayto.com" rel="alternate"></link><published>2003-01-01T00:00:00-05:00</published><updated>2003-01-01T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2003-01-01:/projects/clayto.com</id><summary type="html">&lt;p&gt;&lt;a href="http://clayto.com/" title="My photography site"&gt;clayto.com&lt;/a&gt; is my homemade photography website.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mwcz.org screenshot" src="https://palebluepixel.org/static/images/projects/screenshot_clayto.png" title="clayto.com screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;I started clayto.com in 2003.  Inspired by &lt;a href="http://noahgrey.com/" title="Noah Grey's photography site"&gt;Noah Grey's&lt;/a&gt; photography
presentation ideas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://clayto.com/" title="My photography site"&gt;clayto.com&lt;/a&gt; is my homemade photography website.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mwcz.org screenshot" src="https://palebluepixel.org/static/images/projects/screenshot_clayto.png" title="clayto.com screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;I started clayto.com in 2003.  Inspired by &lt;a href="http://noahgrey.com/" title="Noah Grey's photography site"&gt;Noah Grey's&lt;/a&gt; photography
presentation ideas, the site's color scheme always matches the photo being
viewed, as Noah did (or used to!).&lt;/p&gt;
&lt;p&gt;Here are four examples of the color schemes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="example of color theme matching images" src="https://palebluepixel.org/static/images/projects/screenshot_clayto_palettes_small.png" title="example of color theme matching images" /&gt;&lt;/p&gt;
&lt;p&gt;The color schemes are automatically generated when a photo is posted.  A
"suggested palette" is displayed, along with a color picker, and a tool to
sample colors directly from the image.&lt;/p&gt;
&lt;p&gt;The site as it exists now was written in 2007-2008, as my first Django project.
It needs some serious TLC in the form of bringing it into the twenty-tens with
a responsive UI, &lt;a href="http://colorpal.org/" title="ColorPal"&gt;ColorPal&lt;/a&gt; integration, visual redesign, and a Django
upgrade.&lt;/p&gt;
&lt;p&gt;The site is currently powered by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.org/" title="Python's website"&gt;Python&lt;/a&gt; - an English comedy troupe&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/" title="Django, a Python web framework"&gt;Django&lt;/a&gt; - Python web development framework&lt;/li&gt;
&lt;li&gt;&lt;a href="http://960.gs/" title="960gs CSS grid"&gt;960.gs&lt;/a&gt; - a vintage CSS grid, groundbreaking at the time though&lt;/li&gt;
&lt;li&gt;&lt;a href="http://piwik.org/" title="Piwik web analytics tool"&gt;Piwik&lt;/a&gt; - open-source web analytics&lt;/li&gt;
&lt;li&gt;and a custom color extraction algorithm that automatically suggests colors,
   then allows the user to tweak the colors to their liking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/mwcz/phyton" title="clayto.com's source code"&gt;available here&lt;/a&gt;&lt;/p&gt;</content></entry></feed>