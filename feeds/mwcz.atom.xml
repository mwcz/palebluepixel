<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pale Blue Pixel</title><link href="http://palebluepixel.org/" rel="alternate"></link><link href="http://localhost:8001/feeds/mwcz.atom.xml" rel="self"></link><id>http://palebluepixel.org/</id><updated>2016-08-28T00:00:00-04:00</updated><entry><title>Kimotion Modding 101</title><link href="http://palebluepixel.org/2016/08/28/kimotion-modding-101/" rel="alternate"></link><updated>2016-08-28T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2016-08-28:2016/08/28/kimotion-modding-101/</id><summary type="html">&lt;p&gt;Kimotion is a simple framework for creating interactive art exhibits in 2D or
3D and supports both &lt;a href="http://www.xbox.com/en-US/xbox-360/accessories/kinect"&gt;Kinect&lt;/a&gt; and &lt;a href="https://www.leapmotion.com/"&gt;Leap Motion&lt;/a&gt; for viewer input.
This tutorial will focus on the Leap, so to proceed with the tutorial you'll
need to &lt;a href="https://www.leapmotion.com/setup"&gt;set up your Leap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the leap service is running, you can set up Kimotion!&lt;/p&gt;
&lt;h2&gt;Get the code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@github.com:mwcz/Kimotion.git
cd Kimotion
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you don't know how to use &lt;code&gt;git&lt;/code&gt;, no problem, just download and extract the
&lt;a href="https://github.com/mwcz/Kimotion/archive/master.zip"&gt;Kimotion zip file&lt;/a&gt;
instead.&lt;/p&gt;
&lt;h2&gt;Boot it up&lt;/h2&gt;
&lt;p&gt;Start a simple web server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./start.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then open &lt;a href="http://localhost:8000/#example2d"&gt;localhost:8000/#example2d&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wave your hand around and you should see a trail of black-outlined squares,
like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="example2d mod screenshot" src="/static/images/042/example2d.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Create your mod!&lt;/h2&gt;
&lt;p&gt;The easiest way to start your own mod is to make a copy of the default mod.
Come up with a name for the mod, let's say &lt;code&gt;mymod&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd src
cp -r mods/example2d mods/mymod
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open &lt;code&gt;index.html&lt;/code&gt;, find where it says &lt;code&gt;&amp;lt;!-- Kimotion mods--&amp;gt;&lt;/code&gt;, and right after
it add a script tag to include your mod.&lt;/p&gt;
&lt;p&gt;&lt;script src="mods/mymod/main.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;mods/mymod/main.js&lt;/code&gt; and on the very first line, change &lt;code&gt;class example2d&lt;/code&gt;
to &lt;code&gt;class mymod&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;mods.js&lt;/code&gt; and add your mod name (&lt;code&gt;mymod&lt;/code&gt;) to the list.&lt;/p&gt;
&lt;p&gt;Whew, that process was pretty tedious, sorry about that.&lt;/p&gt;
&lt;p&gt;You can now open &lt;a href="http://localhost:8080/#mymod"&gt;localhost:8080/#mymod&lt;/a&gt; and see
your mod in action!  It's going to look just like the example mod, but now it's
time to make it your own.&lt;/p&gt;
&lt;h2&gt;Customize your mod&lt;/h2&gt;
&lt;p&gt;Open &lt;code&gt;mods/mymod/main.js&lt;/code&gt; and look at the general layout.  There's a
&lt;code&gt;constructor&lt;/code&gt; function for your initial setup, and an &lt;code&gt;update&lt;/code&gt; function which
runs once per frame (at 60 frames per second, ideally).&lt;/p&gt;
&lt;p&gt;Many of the function calls (like &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;fill&lt;/code&gt;) come from &lt;a href="https://p5js.org/"&gt;p5&lt;/a&gt;,
an &lt;strong&gt;awesome&lt;/strong&gt; 2D drawing library.  All of p5 is available to you, so take a
look at p5's &lt;a href="https://p5js.org/reference/"&gt;function reference&lt;/a&gt; for all the possibilities.&lt;/p&gt;
&lt;p&gt;For your first tweak,  replace &lt;code&gt;rect&lt;/code&gt; with &lt;code&gt;ellipse&lt;/code&gt;, and refresh your browser.
Voila!&lt;/p&gt;
&lt;p&gt;&lt;img alt="example2d mod screenshot with circles" src="/static/images/042/example2d-circle.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;There's an existing mod with a few more tweaks, Rainbow Squares.  It finds out
the angle of hand motion and colors the square based on that angle.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rainbow squares mod screenshot" src="/static/images/042/rainbow-squares.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://github.com/mwcz/Kimotion/blob/master/src/mods/rainbow-square/main.js"&gt;Rainbow Squares&lt;/a&gt; if you're interesting in using an
effect like that.&lt;/p&gt;
&lt;h2&gt;Modding resources&lt;/h2&gt;
&lt;p&gt;At this point, you're an experienced Kimotion modder.  If you have an idea but
would like some feedback before getting started, I'm eager to assist.  Here are
a few ways to get help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tweet &lt;a href="https://twitter.com/mwcz"&gt;@mwcz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open a &lt;a href="https://github.com/mwcz/Kimotion/issues/new"&gt;Kimotion issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Explore the existing &lt;a href="https://github.com/mwcz/Kimotion/tree/master/src/mods"&gt;Kimotion mods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="web"></category><category term="kimotion"></category><category term="art"></category></entry><entry><title>Visualizing Network Traffic with WebGL</title><link href="http://palebluepixel.org/2016/07/13/visualizing-network-traffic-with-webgl/" rel="alternate"></link><updated>2016-07-13T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2016-07-13:2016/07/13/visualizing-network-traffic-with-webgl/</id><summary type="html">&lt;p&gt;"&lt;em&gt;Finally,&lt;/em&gt;" I thought, "&lt;em&gt;an excuse to play with WebGL at work!&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;This year, I had the good fortune of contributing to a keynote presentation at
&lt;a href="https://www.redhat.com/summit"&gt;Red Hat Summit&lt;/a&gt;.  During the keynote, an audience of 5,000 played a
mobile web game created by our team.  The game was backed by several
&lt;a href="https://en.wikipedia.org/wiki/Microservices"&gt;microservices&lt;/a&gt; which we modified on stage while the audience
played.&lt;/p&gt;
&lt;p&gt;My contribution was to display, in a visual and engaging way, the live network
traffic flowing through our system.&lt;/p&gt;
&lt;p&gt;Being a web guy, I wanted to accomplish this on a webpage, but with such a
large audience, the number of network requests would rocket past what could be
efficiently rendered with HTML and CSS.&lt;/p&gt;
&lt;h3&gt;Tiny Particles of Sand&lt;/h3&gt;
&lt;p&gt;While developing &lt;a href="/projects/dimo"&gt;DiMo&lt;/a&gt; and &lt;a href="http://kimotion.xyz"&gt;Kimotion&lt;/a&gt;, I became
fond of &lt;a href="http://threejs.org"&gt;three.js&lt;/a&gt; particle systems for their performance and visual
charm.&lt;/p&gt;
&lt;div class="row"&gt;
    &lt;figure class="col-sm-6"&gt;
        &lt;a href="/projects/dimo"&gt;
            &lt;img src="/static/images/041/swath-colors.jpg" alt="DiMo picture" /&gt;
        &lt;/a&gt;
        &lt;figcaption&gt;Particle gravity simulation in &lt;a href="/projects/dimo"&gt;DiMo: Particles&lt;/a&gt; (50,000 particles)&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure class="col-sm-6"&gt;
        &lt;a href="/projects/kimotion"&gt;
            &lt;img src="/static/images/041/kimotion-pic.jpg" alt="Kimotion picture" /&gt;
        &lt;/a&gt;
        &lt;figcaption&gt;Rendering a Kinect depth field with 480,000 particles in &lt;a href="/projects/kimotion"&gt;Kimotion&lt;/a&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;WebGL particle systems can handle many thousands of particles without breaking
a sweat.  It can even handle &lt;em&gt;drawing&lt;/em&gt; millions of particles, although &lt;em&gt;moving&lt;/em&gt;
that many particles is often CPU-bottlenecked.  Fancy &lt;a href="https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units"&gt;tricks&lt;/a&gt; can beat
that limitation, although such tricks are still tedious in WebGL.&lt;/p&gt;
&lt;p&gt;Alright, let's make some particles.&lt;/p&gt;
&lt;h3&gt;It's Pixel Time&lt;/h3&gt;
&lt;p&gt;When a network request is detected, the particle system moves a tiny dot in an
arc to its destination.&lt;/p&gt;
&lt;div class="row"&gt;
    &lt;figure class="col-sm-6"&gt;
        &lt;video style="margin: 0 auto" poster="/static/images/041/traffic-viz-basic-thumb.jpg" autoplay controls loop&gt;
            &lt;source src="/static/videos/041/traffic-viz-basic.mp4" /&gt;
            &lt;source src="/static/videos/041/traffic-viz-basic.webm" /&gt;
        &lt;/video&gt;
        &lt;figcaption&gt;Particles arc from purple to blue&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure class="col-sm-6"&gt;
        &lt;video style="margin: 0 auto" poster="/static/images/041/traffic-viz-bluegreen-thumb.jpg" autoplay controls loop&gt;
            &lt;source src="/static/videos/041/traffic-viz-bluegreen.mp4" /&gt;
            &lt;source src="/static/videos/041/traffic-viz-bluegreen.webm" /&gt;
        &lt;/video&gt;
        &lt;figcaption&gt;Particles alternate between blue and green&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The arcs are defined by sine waves.  Here are the particle arcs as they appear
on-screen, and another shot with sine wave guides showing.&lt;/p&gt;
&lt;div class="row"&gt;
    &lt;figure class="col-sm-6"&gt;
        &lt;img src="/static/images/041/pipeline-nosines.jpg" alt="pipeline with particles arcing" /&gt;
        &lt;figcaption&gt;Particle arcs&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure class="col-sm-6"&gt;
        &lt;img src="/static/images/041/pipeline-sines.jpg" alt="pipeline with sine wave guides for the particle arcs" /&gt;
        &lt;figcaption&gt;Sine wave guides&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;To prevent the arcs from overlapping with each other too much, I increased each
wave's amplitude based on vertical distance to be traveled.  In essence,
amplitude increases linearly with wavelength.  That's why the green arc is
bigger than the blue arc, etc.&lt;/p&gt;
&lt;p&gt;Initially, the particles traveled in single-file, which obscured the quantity
of particles.  To remedy that, I added a small random horizontal offset unique
to each particle.  The offset diminishes at the ends of the arc, which causes
the particles to fan out near the middle.&lt;/p&gt;
&lt;p&gt;The particles that enter from the right side of the screen represent network
traffic from the audience.  As you can see in the video below, the origin point
of those particles moves randomly up and down to add more visual interest.&lt;/p&gt;
&lt;h3&gt;Together at Last&lt;/h3&gt;
&lt;p&gt;After months of collaborating from across the world, it was wonderful to meet
the whole team in person.  A few days later, all our hard work came together as
well.  All the preparation paid off and the demo worked perfectly.  Here's a
shot of my particle visualization from the official recording.&lt;/p&gt;
&lt;video style="margin: 0 auto" poster="/static/images/041/traffic-thumb.jpg" autoplay controls loop&gt;
    &lt;source src="/static/videos/041/traffic.webm" /&gt;
    &lt;source src="/static/videos/041/traffic.mp4" /&gt;
&lt;/video&gt;

&lt;p&gt;Watch the full keynote here:&lt;/p&gt;
&lt;iframe style="display: block; margin: 0 auto;" width="100%" height="315" src="https://www.youtube.com/embed/ooA6FmTL4Dk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Glow Rope&lt;/h3&gt;
&lt;p&gt;Early on, before traffic data was available, I had the particles follow the
mouse instead.  It was pretty fun, so I spun it off into a simple demo called
&lt;a href="/demos/glow-rope"&gt;Glow Rope&lt;/a&gt;.  Give it a try (mouse required)!&lt;/p&gt;
&lt;figure&gt;
    &lt;a href="/demos/glow-rope"&gt;&lt;img src="/static/images/041/glow-rope.jpg" alt="glow rope screenshot" /&gt;&lt;/a&gt;
    &lt;figcaption&gt;&lt;p&gt;&lt;a class="btn btn-default btn-lg" href="/demos/glow-rope"&gt;Play Glow Rope&lt;/a&gt;&lt;/p&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3&gt;Leaderboard&lt;/h3&gt;
&lt;p&gt;In addition to the network traffic visualization, I helped build a leaderboard
view to display the scores and achievements of the top 10 players in the
audience.  &lt;a href="https://twitter.com/andresgalante/"&gt;Andres&lt;/a&gt; created the beautiful design and handed me a static
mockup which I converted into a dynamic template using &lt;a href="http://ractivejs.org/"&gt;Ractive&lt;/a&gt;.  I
then created a WebSocket connection to the &lt;em&gt;score microservice&lt;/em&gt; to populate the
data.  Here's a shot of the winners from the live audience.&lt;/p&gt;
&lt;p&gt;&lt;img alt="photo of final leaderboard" src="/static/images/041/leaderboard-final.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Next Year&lt;/h3&gt;
&lt;p&gt;The amount of work and preparation that goes into a presentation like this was
eye-opening for me.  A week out and tired to the bone, I was thinking "No way
am I doing this next year!"  But the thrill of everyone's hard work coming
together drove away the exhaustion.  I can't wait to see what we can cook up
next year.&lt;/p&gt;</summary><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="web"></category><category term="redhat"></category><category term="redhat-summit"></category></entry><entry><title>The Last Conceit</title><link href="http://palebluepixel.org/2015/12/13/the-last-conceit/" rel="alternate"></link><updated>2015-12-13T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-12-13:2015/12/13/the-last-conceit/</id><summary type="html">&lt;p&gt;Humans have had it rough for the past few centuries!  Emotionally, I mean.  It
used to be so clear that we were privileged and important, the favorite child
of creation.  How could it not be so?  Our planet was the fulcrum around which
every heavenly body in the universe orbited.  We were the dominant form of life
on Earth, and we were fairly certain that ourselves and our world were the
creation of a loving but tempermental and sometimes murdery god.&lt;/p&gt;
&lt;p&gt;The second chapter of &lt;a href="https://en.wikipedia.org/wiki/The_Varieties_of_Scientific_Experience"&gt;The Varieties of Scientific Experience&lt;/a&gt; by
Carl Sagan documents the following recently discovered demerits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We're not in a central position in the universe.  Our Earth orbits around
   the sun.  Our solar system is not at the center of our galaxy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our Sun is a typical star, with no special features to distinguish it from
   the 1,000,000,000,000,000,000,000,000 other stars universe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not only that, stars are made of the same stuff we find right here on our
   Earth.  That's not so majestic!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our earth is approximately 4,500,000,000 years old, but humans developed
   recently, 1,000,000 years ago or so.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Humans are made of the same stuff and share a common lineage with all other
   life on Earth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The way we experience time is not from a &lt;a href="https://en.wikipedia.org/wiki/Preferred_frame"&gt;privileged frame of
   reference&lt;/a&gt;.  There is nothing special about our position in the
   universe or our motion through it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Carl then suggests that one idea of human privilege is still with us.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, if we don't have a distinctive position or velocity or acceleration, or
a separate origin from the other plants and animals, then at least, maybe, we
are the smartest beings in the entire universe.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Carl goes on to say that discovering extraterrestrial intelligence could
silence this latest in a long line of human conceits.  Whatever other outcomes
an indisputable alien encounter would have, I'm quite sure Carl is right about
this one.  However, there is another aspirant approaching, and it's almost
ready to snatch the &lt;em&gt;Smartest Kids in the Universe&lt;/em&gt; trophy from humanity's
collective hands.&lt;/p&gt;
&lt;p&gt;The next great blow to our egos will be the discovery that intelligence can
arise from ordinary matter, that is, melted sand.  Artificial intelligence is
complex and controversial, but I'm quite certain the intelligence of our
computer systems will continue to increase, and the vastness of the universe
suggests to me that we will probably create intelligence long before we
discover it on another planet.&lt;/p&gt;
&lt;p&gt;It's difficult to imagine how AI with greater-than-human intelligence would
change our existence.  People will probably say, "it's just programmed to act
that way", or "it's not human, it's not &lt;em&gt;thinking&lt;/em&gt;".  Many, maybe even most,
people won't accept AI as truly intelligent.  In many ways, it would be even
&lt;em&gt;more&lt;/em&gt; alien than a biological extra-terrestrial species.&lt;/p&gt;
&lt;p&gt;Carl again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A grinding of heels can be heard screeching across the last five centuries as
scientists have revealed the non-centrality of our position and as many others
have fought to resist that insight to the bitter end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My take is that our undistinguished position in the universe is freeing.
Humans have a lot of traits, some admirable and some less so, but &lt;em&gt;we&lt;/em&gt; get to
choose which to value.  In any case, we should probably stop looking to the
universe for our sense of self-worth.&lt;/p&gt;</summary><category term="philosophy"></category><category term="technology"></category><category term="ai"></category></entry><entry><title>Make a Kimotion!</title><link href="http://palebluepixel.org/2015/09/26/make-a-kimotion/" rel="alternate"></link><updated>2015-09-26T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-09-26:2015/09/26/make-a-kimotion/</id><summary type="html">&lt;p&gt;A year ago, I had the joy of working on Digital Motion, an &lt;a href="https://en.wikipedia.org/wiki/Interactive_art"&gt;interactive
art&lt;/a&gt; exhibit for Raleigh's annual art festival, &lt;a href="https://en.wikipedia.org/wiki/Sparkcon"&gt;SPARKcon&lt;/a&gt;.
The month leading up to SPARKcon 2014 was a mad dash of perfecting the graphics
and physics equations of my &lt;a href="/projects/dimo"&gt;DiMo: Particles&lt;/a&gt; display.  After a
wonderful weekend of watching visitors enjoy the weird things we made, a lesson
began congealing itself in my mind.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Creating interactive art exhibits from scratch is &lt;strong&gt;really&lt;/strong&gt; hard.  Maybe I
can share some of this work, so others can focus on the art...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Creative coding is &lt;em&gt;so much fun&lt;/em&gt; that I can't help but wish more people were
involved.  Nothing cures curmudgeony coders faster than working on a project
where mistakes often make it &lt;em&gt;better&lt;/em&gt;.  With such a steep learning curve,
though, few would get involved.  There would need to be a shared foundation.&lt;/p&gt;
&lt;h3&gt;Enter Kimotion&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://kimotion.xyz"&gt;Kimotion&lt;/a&gt; is a new framework for building interactive art
exhibits.  It will appeal mostly to the Programmer Artist types.  Think
"Warrior Poet", but with keyboards.&lt;/p&gt;
&lt;p&gt;With Kimotion, you can create a "mod" which is essentially your own blank
canvas.  On the canvas, you can paint pixels, but not boring, everyday pixels.
What you paint can be animated by the movements of the people in the room.&lt;/p&gt;
&lt;p&gt;Videos speak louder than text, so here are some videos of a variety of mods.&lt;/p&gt;
&lt;iframe id="vimeo-player" src="https://player.vimeo.com/video/136951447" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/9.jpg" data-vid-src="https://player.vimeo.com/video/136951447" /&gt; &lt;/div&gt;

&lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/11.jpg" data-vid-src="https://player.vimeo.com/video/137905577" /&gt; &lt;/div&gt;

&lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/3.jpg" data-vid-src="https://player.vimeo.com/video/126292045" /&gt; &lt;/div&gt;

&lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/10.jpg" data-vid-src="https://player.vimeo.com/video/137762679" /&gt; &lt;/div&gt;

&lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/6.jpg" data-vid-src="https://player.vimeo.com/video/136126008" /&gt; &lt;/div&gt;

&lt;div class="vimeo-thumbnail"&gt; &lt;img src="http://kimotion.xyz/images/video_thumbnails/5.jpg" data-vid-src="https://player.vimeo.com/video/133870922" /&gt; &lt;/div&gt;

&lt;p&gt;I began building Kimotion in February of 2015, well in advance of SPARKcon X,
which took place in September.  This was a far cry from the single month of
harebrained scampering of the year before!  The extra time, and the existance
of a true framework, allowed many more people to create visualizations (aka
"mods").  In the end, fifteen mods were created in time for the SPARKcon
exhibit.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Over a thousand&lt;/em&gt; people visited our exhibit last weekend.  It's hard to put
into words how rewarding it is to see so many children and adults enjoy the sum
of our planning, hard work, and creativity.&lt;/p&gt;
&lt;h3&gt;Gallery&lt;/h3&gt;
&lt;p&gt;Here are some photos from SPARKcon X (2015), and setup the night before.&lt;/p&gt;
&lt;p&gt;$GALLERY&lt;/p&gt;
&lt;h3&gt;The future&lt;/h3&gt;
&lt;p&gt;What's next for Kimotion?  Several SPARKcon attendees had excellent ideas.
From installing Kimotion in schools to putting a permanent installation in
their own homes.&lt;/p&gt;
&lt;p&gt;I love the school idea in particular because, if last weekend was any
indication, kids love this thing and it really encouraged them to move (a lot).&lt;/p&gt;
&lt;p&gt;It would cost a school system very little.  Schools already have (one would
hope) computers and projectors or smartboards.  Kimotion itself is free and
open-source.  The only cost would be the Kinect.  First-edition Kinects often
sell for less than $30 each.  If anyone on a PTA or school board reads this and
finds it interesting, &lt;a href="mailto:mwc@clayto.com"&gt;email&lt;/a&gt; or &lt;a
href="https://twitter.com/mwcz"&gt;tweet&lt;/a&gt; me.&lt;/p&gt;
&lt;p&gt;I started Kimotion with the hope that it would encourage programmers to use
their skills to create elegance that everyone can appreciate.  If children are
also encouraged to exercise, I won't complain!&lt;/p&gt;
&lt;h3&gt;E Pluribus Unum&lt;/h3&gt;
&lt;p&gt;I can't express how grateful I am to everyone who contributed to Kimotion
itself, created mods, and made the Digital Motion exhibit at SPARKcon a huge
success this year.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Greg Gardner&lt;/dt&gt;
&lt;dd&gt;for taking over and perfecting the kimotion server, implementing record/replay for easy development, and helping me debug *countless* graphical glitches and client issues, and being a software architecture guiding hand&lt;/dd&gt;
&lt;dt&gt;Jared Sprague&lt;/dt&gt;
&lt;dd&gt;for creating the immaculate Fish game mod, beloved by all children, building a new computer to run the exhibit, and cohosting the event with me&lt;/dd&gt;
&lt;dt&gt;Ben Pritchett&lt;/dt&gt;
&lt;dd&gt;for writing tutorial documentation and the great Snake mod&lt;/dd&gt;
&lt;dt&gt;Cas Roberts&lt;/dt&gt;
&lt;dd&gt;for endless encouragement and great ideas, including the very successful recording/replay scheme&lt;/dd&gt;
&lt;dt&gt;Truett Thompson&lt;/dt&gt;
&lt;dd&gt;for keeping geekSPARK on track, on schedule, and funded&lt;/dd&gt;
&lt;dt&gt;Kevin Howell&lt;/dt&gt;
&lt;dd&gt;for creating the enigmatic, unexplainable, and beautiful Spiral mod&lt;/dd&gt;
&lt;dt&gt;Ian Hands&lt;/dt&gt;
&lt;dd&gt;for looping me into the most fun project I've ever worked on&lt;/dd&gt;
&lt;dt&gt;Noel White&lt;/dt&gt;
&lt;dd&gt;for so much organizational geekSPARK work and fundraising&lt;/dd&gt;
&lt;dt&gt;Mary Hands&lt;/dt&gt;
&lt;dd&gt;for saving the entire exhibit friday night when we were flummoxed by hardware failure&lt;/dd&gt;
&lt;dt&gt;Kyle Buchanan&lt;/dt&gt;
&lt;dd&gt;for great questions and alllllllmost finishing his Starfighter mod&lt;/dd&gt;
&lt;dt&gt;Justis Peters&lt;/dt&gt;
&lt;dd&gt;for paving the DiMo trail for the rest of us to follow&lt;/dd&gt;
&lt;dt&gt;Dave Yarwood&lt;/dt&gt;
&lt;dd&gt;for contribution to docs, great questions, and allllllmost-finished music mod&lt;/dd&gt;
&lt;dt&gt;Rowen Sprague&lt;/dt&gt;
&lt;dd&gt;for being the official tester&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3&gt;More information&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kimotion.xyz"&gt;Kimotion main project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mwcz/Kimotion"&gt;Kimotion source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/projects/dimo"&gt;More about last year's exhibit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opensource.com/life/15/2/sparkcon-geekspark-digital-motion-exhibit"&gt;Opensource.com article about DiMo 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/"&gt;The Deconstruction of Falling Stars&lt;/a&gt; - technical info about how it was built&lt;/li&gt;
&lt;li&gt;&lt;a href="http://palebluepixel.org/2014/08/25/particles-and-p-dimo-comes-to-life/"&gt;Particles and π - DiMo Comes to Life&lt;/a&gt; - more about the exhibit at SparkCon!&lt;/li&gt;
&lt;/ul&gt;
&lt;style type="text/css"&gt;
.vimeo-thumbnail {
    cursor   : pointer;
    position : relative;
    z-index  : 9;
    display  : inline-block;
    width    : 32.2%;
}

.vimeo-thumbnail::before {
    color       : white;
    content     : "\25B6";
    opacity     : 0.8;
    position    : absolute;
    display     : block;
    text-shadow : 0 0 6px black;
    z-index     : 100;
    font-size   : 50px;
    left        : 50%;
    top         : 42%;
    transform   : translate(-50%, -50%);
}

.vimeo-thumbnail:hover::before {
    opacity     : 1;
    text-shadow : 0 0 6px white;
}
&lt;/style&gt;

&lt;script&gt;
var iframe = $('iframe#vimeo-player');

function handle_vid_click() {
    iframe.attr('src', $(this).find('[data-vid-src]').attr('data-vid-src') + '?autoplay=1');
}

function init_vimeo_picker() {
    // get every img with data-vid-src
    // get ref to iframe
    // create onclick for each img which sets iframe's src to data-vid-src
    var vidlinks = $('.vimeo-thumbnail');
    vidlinks.on('click', handle_vid_click);
}

init_vimeo_picker();

function set_vimeo_iframe_height() {
    iframe.attr('height', iframe.width() / (1280/720) );
}

document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
window.addEventListener('resize', set_vimeo_iframe_height);
&lt;/script&gt;</summary><category term="programming"></category><category term="javascript"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="2d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="physics"></category><category term="web"></category><category term="kimotion"></category></entry><entry><title>WebAssembly is the Keystone</title><link href="http://palebluepixel.org/2015/06/20/webassembly-is-the-keystone/" rel="alternate"></link><updated>2015-06-20T22:52:24-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-06-20:2015/06/20/webassembly-is-the-keystone/</id><summary type="html">&lt;p&gt;Within the last two days, WebAssembly (&lt;strong&gt;wasm&lt;/strong&gt;) has graced the eyeballs of
every JavaScript developer.  If wasm is new to you, the articles linked at the
end of this post fully describe what wasm &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Since that's been covered, I'd like to talk about one impact wasm will
hopefully have on future of computing.  To set the scene, a quote from the man
himself:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;Meanwhile, I took one quick step that would demonstrate the concept of the
        Web as a universal, all-encompassing space.  I programmed the browser so it
        could follow links not only to files on HTTP servers, &amp;hellip;&lt;/p&gt;
    &lt;p&gt;In one fell swoop, a huge amount of the information that was already on the
        Internet was available on the Web.&lt;/p&gt;
    &lt;footer&gt;
        &lt;cite&gt;
            Tim Berners-Lee, Weaving the Web, 1999
        &lt;/cite&gt;
    &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back then, Tim enabled the first Web browser to follow links to newsgroups and
FTP servers.  By linking up a slew of existing content, the Web became much
more useful.&lt;/p&gt;
&lt;p&gt;This realization is pretty potent.  The web has taken over the world because of
the power of linking things together, especially things not yet on the web.  I
was initially surprised that Tim saw the now-humble URL as the most vital Web
technology and had it standardized before HTTP and HTML.&lt;/p&gt;
&lt;p&gt;Today, we can follow URLs to images, videos, articles, text, PDFs; most types
of media are linkable.  Clicking/tapping a link is the most commonplace thing
in the world.&lt;/p&gt;
&lt;p&gt;There's one type of content that still isn't linkable, though: &lt;em&gt;Applications&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the past ten years, the JavaScript revolution has been trying to make real
the dream of &lt;strong&gt;following a URL to an application&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It's been a circuitous, roundabout, and partially successful journey.
&lt;a href="http://emscripten.org/"&gt;Emscripten&lt;/a&gt; has made it possible and &lt;a href="http://asmjs.org/"&gt;asm.js&lt;/a&gt; made it
faster.&lt;/p&gt;
&lt;p&gt;My great hope for WebAssembly is that it can bring the world's teeming vault of
existing applications onto the web, with very little fuss.  Imagine using
Photoshop merely by going to &lt;code&gt;photoshop.adobe.com&lt;/code&gt;, and you'll have some idea
of where WebAssembly might carry us.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After the WebAssembly announcement, I read every bit of documentation currently
available, about a dozen articles, joined the &lt;a href="https://www.w3.org/community/webassembly/"&gt;W3C Community Group&lt;/a&gt;,
and have been hanging out in the IRC channel
(&lt;code&gt;irc://irc.w3.org:6667/#webassembly&lt;/code&gt;).  I don't want to speak too soon, but
I'm pretty well convinced that wasm is the next revolution.&lt;/p&gt;
&lt;!-- I'm imagining a future where this is a desktop shortcut:

    wasm://adobe.com/photoshop

A few thoughts about the future of wasm:

### Live installs

wasm has the potential to be the LiveCD of applications.  Imagine visiting a
wasm application in your browser.  If it's great, you might want to install it
locally.


--&gt;

&lt;p&gt;For further reading, here are some of the best articles I've found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/WebAssembly/design/blob/master/FAQ.md"&gt;The wasm FAQ covers nearly everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/luke/2015/06/17/webassembly/"&gt;Luke Wagner's initial announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly/#buried-lede"&gt;Brendan Eich's practical and lighthearted appeal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6"&gt;Eric Elliot makes a strong and diverse case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/"&gt;ArsTechnica brings wasm to a wider audience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="wasm"></category><category term="web"></category><category term="javascript"></category></entry><entry><title>The Lurking Horror</title><link href="http://palebluepixel.org/2015/06/20/the-lurking-horror/" rel="alternate"></link><updated>2015-06-20T21:13:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-06-20:2015/06/20/the-lurking-horror/</id><summary type="html">&lt;p&gt;In the midst of this beastly summer we've just entered, nothing seems farther
away than the lung-clenching air of winter.  When things are this hot, and
pools and popsicles fail to cool, there's one foolproof way to get into the
spirit of winter: The Lurking Horror.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... you practically froze to death slogging over here from the dorm.  Not to
mention jumping at every shadow, what with all the recent disappearances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Lurking Horror is a classic Infocom text adventure and a sibling of Zork.
For best results, couple this game with Cool-Retro-Term, a Cathode-Ray-Tube
terminal monitor simulator.  &lt;abbr title="Cool-Retro-Term"&gt;CRT&lt;/abbr&gt; boots you
off your 2015 high-DPI display and beams you into a world of 1980s nostalgia.&lt;/p&gt;
&lt;p&gt;First &lt;a href="https://github.com/Swordfish90/cool-retro-term#get-cool-retro-term"&gt;install cool-retro-term&lt;/a&gt;.  Then install &lt;a href="https://github.com/DavidGriffith/frotz"&gt;frotz&lt;/a&gt; (the
Z-Machine engine which runs all the old Infocom text adventures).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo yum install frotz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Locate &lt;code&gt;LURKING.DAT&lt;/code&gt; in your copy of Lurking Horror, and...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;frotz LURKING.DAT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="The Lurking Horror running in Cool-Retro-Term" src="/static/images/037/lurking-horror-crt.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Crank up the AC, grab your clicky keyboard, make CRT fullscreen, turn off the
lights, and bathe in the cool cathode rays.&lt;/p&gt;</summary><category term="text adventure"></category><category term="terminal"></category><category term="cool-retro-term"></category><category term="gaming"></category><category term="nostalgia"></category></entry><entry><title>Naming Names - Anonymity is Dead</title><link href="http://palebluepixel.org/2015/01/01/naming-names-anonymity-is-dead/" rel="alternate"></link><updated>2015-01-01T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2015-01-01:2015/01/01/naming-names-anonymity-is-dead/</id><summary type="html">&lt;blockquote&gt;

    There are only two hard problems in computer science: cache invalidation,
    naming things, and off-by-one errors.

    &lt;footer&gt;
        &lt;cite&gt;
            Phil Karlton, but I can't find a name for the original source...
        &lt;/cite&gt;
    &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contriving names for things is so commonplace for computer programmers that we
may be thinking up names more often than any other profession.  Every day,
usually dozens of times, I find myself trying to imagine the perfect name for a
function or variable or module.  Then I remember that there's a term for the
&lt;em&gt;process&lt;/em&gt; of formulating the perfect name for a thing.&lt;/p&gt;
&lt;p&gt;I just can't remember what it's called...&lt;/p&gt;
&lt;p&gt;Then I find myself sitting there, trying to think of the perfect name for the
process of creating the perfect name for a thing when I should be &lt;em&gt;actually&lt;/em&gt;
dreaming up the perfect name for that thing.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="/static/images/036/naming.gif" alt="naming is hard" /&gt;
    &lt;figcaption&gt;Naming is hard.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Can you relate?  The word, by the way, is...&lt;/p&gt;
&lt;dl&gt;
    &lt;dt&gt;onomastics - n.&lt;/dt&gt;
    &lt;dd&gt;1. The study of the origins and forms of proper names.&lt;/dd&gt;
    &lt;dd&gt;2. The study of the origins and forms of terms used in specialized fields.&lt;/dd&gt;
    &lt;dd&gt;3. The system that underlies the formation and use of proper names or terms used in specialized fields.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Short, but informative names are important in all programming languages, though
JavaScript's anonymous functions do pose a unique temptation.&lt;/p&gt;
&lt;p&gt;For those unfamiliar, an anonymous function is, unsurprisingly, a function
declaration without a name.&lt;/p&gt;
&lt;p&gt;A named function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;count_sheep&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* code */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An anonymous function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* code */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One has a name, one doesn't.  Other than two low-level (and usually
inconsequental) behavioral differences, they're drop-in replacements for one
another.  The primary difference is that one has a name, so you can tell what
it does.  So, pick the one that has the name!  Easy choice, right?&lt;/p&gt;
&lt;p&gt;I wish!  Choosing a name is a very real mental tax.  Choosing a &lt;em&gt;good&lt;/em&gt; name
is time-consuming and often impossible.  That is why, I feel, anonymous
functions are used so commonly in JavaScript programs.&lt;/p&gt;
&lt;p&gt;Anonymous functions &lt;strong&gt;free the programmer from the responsibility of choosing a
name&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As a practical example, here's some code from the &lt;a href="http://datatables.net/examples/api/api_in_init.html"&gt;jQuery DataTables example
page&lt;/a&gt;, with three nested anonymous functions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;dataTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;initComplete&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are much (&lt;strong&gt;much&lt;/strong&gt;!) more deeply nested examples of the Pyramid of Doom,
but this one serves well as an example.  If it had been implemented with short,
named functions, it would be something like the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;create_datatable&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;create_datatable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;dataTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;initComplete&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;init_datatable_api&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init_datatable_api&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;filter_datatable&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filter_datatable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This updated code isn't perfect, to be sure, but the first line really
exemplifies this benefits of this approach, to me.  &lt;code&gt;$(document).ready(
create_datatable )&lt;/code&gt; reads so clearly.&lt;/p&gt;
&lt;p&gt;The joy of small functions is a discovery I'm making and re-making every day.
I've been &lt;em&gt;craving&lt;/em&gt; a programming style like this for years, but it wasn't
until I read &lt;a href="http://amzn.com/1449360726"&gt;Functional JavaScript&lt;/a&gt; (and all the FP talk on
&lt;a href="http://www.reddit.com/r/programming"&gt;r/programming&lt;/a&gt;) that my eyes opened.&lt;/p&gt;
&lt;p&gt;Very, very small, reusable functions are a joy to work with.  Give it a try, if
you haven't yet!&lt;/p&gt;
&lt;script&gt;
$('pre code').each(add_prism_js);
function add_prism_js(i, el) {
    $(el).addClass('language-javascript');
}
&lt;/script&gt;</summary><category term="programming"></category><category term="javascript"></category><category term="web"></category></entry><entry><title>DiMo: The Deconstruction of Falling Stars</title><link href="http://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/" rel="alternate"></link><updated>2014-10-30T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-10-30:2014/10/30/dimo-the-deconstruction-of-falling-stars/</id><summary type="html">&lt;p&gt;Imagine a solitary blue dot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="small dot" src="http://palebluepixel.org/static/images/034/smalldot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Unless you let your imagination run away with itself, this is going to be a
pretty boring dot.  Now, imagine a second, larger dot (you can pick the color).&lt;/p&gt;
&lt;p&gt;&lt;img alt="small dot and large dot" src="http://palebluepixel.org/static/images/034/smalldot-largedot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Red, nice choice!  The scene is now slightly more interesting, since now you've
got two dots to think about.  You can ponder their positions, and relative
sizes.  No motion though; still pretty boring!&lt;/p&gt;
&lt;p&gt;Pretty soon, your keen and restless mind will imagine that the larger dot
exerts a gravitational pull on the smaller one.  The small dot begins moving
towards the large one.  It's speed increases exponentially the closer it gets.
Now an orbit can form.  Thanks, Newton!&lt;/p&gt;
&lt;p&gt;&lt;img alt="orbit" src="http://palebluepixel.org/static/images/034/orbit.gif" title="When I recorded this gif, it lined up *completely* by chance.  So lucky.  It would have been a PITA to try to line up the dot so the orbit looped smoothly!  There is a slight jump, but it's subtle." /&gt;&lt;/p&gt;
&lt;p&gt;The dot's orbit is reminiscent of a planet orbiting a star.  Neat.&lt;/p&gt;
&lt;p&gt;Wait, did you see that?  You just moved the big dot.  Look again!  Now there
are thousands and thousands of tiny dots, each being accelerated toward the big
dot!&lt;/p&gt;
&lt;figure&gt;

    &lt;iframe id="dimo-demo" src="//player.vimeo.com/video/108714486" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

    &lt;figcaption&gt;
        &lt;a href="http://vimeo.com/108714486"&gt;View on vimeo&lt;/a&gt;
    &lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;Peculiar.  The multitude of dots starts to look &lt;em&gt;oddly&lt;/em&gt; reminiscent of fluid
sloshing around in a container.  Or a cloud of gas forming a star.  Weird, huh?
Maybe they're the same thing!&lt;/p&gt;
&lt;p&gt;Now, before I ramble on any further, let your imagination take a rest while you
try out the simulation!&lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-default btn-lg" href="/static/projects/dimo/"&gt;Launch live demo!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A reasonably recent web browser required.  WebGL is required, which means
Firefox 4+ or Chrome 9+.&lt;/p&gt;
&lt;h2&gt;The Premise&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Players wave illuminated batons around and cool stuff happens!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a href="/2014/08/25/particles-and-p-dimo-comes-to-life/"&gt;DiMo Comes to Life&lt;/a&gt; for a , not-at-all dramatized
summary of DiMo.&lt;/p&gt;
&lt;p&gt;"DiMo" is a recurring interactive art exhibit at GeekSpark, which is held
during SparkCon each year in Raleigh, NC.  This year, I created the particle
gravity simulation visualization for DiMo.  There was also a visualization of
Conway's Game of Life, and an original game where players eat doritos and spray
soda at people who eat doritos.&lt;/p&gt;
&lt;h2&gt;Particles&lt;/h2&gt;
&lt;p&gt;The particles' main job is to swirl around and look cool.  They are pulled
gravitationally toward the player pieces, but the particles themselves don't
exert gravity on each other.&lt;/p&gt;
&lt;h3&gt;Gravity&lt;/h3&gt;
&lt;p&gt;The gravity calculation was written first with inlined calculations, then with
ThreeJS vector objects, then with &lt;a href="http://glmatrix.net/"&gt;glmatrix&lt;/a&gt;, and then inlined again.  The
inlined code performance wasn't distinguishable from the glmatrix
implementation.  Since glmatrix is very fast and much more readable, I stuck
with it for a while.&lt;/p&gt;
&lt;p&gt;ThreeJS's vector calculations, on the other hand, were awful.  Each function
call created a new vector object.  Each acceleration calculation caused the
creation of 12 vector objects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; 10,000 particles    *
    60 fps           *
    12 objects       *
     3 player pieces
---------------------------------
 21,600,000 new objects per second
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Needless to say, the performance was &lt;em&gt;terrible&lt;/em&gt;.  I then implemented the gravity
equation using glmatrix's in-place vector operations.  glmatrix's vector
functions insert their output into an existing vector instead of creating a new
vector for each function call, like ThreeJS' API does.  The number of new
objects created per second by the gravity equation dropped from &lt;code&gt;21,600,000&lt;/code&gt;
down to zero.&lt;/p&gt;
&lt;p&gt;glmatrix served quite well for a while, but in the end I improved performance
even more by writing an inline gravity equation by hand.  Perhaps it was just
function call overhead that was hurting performance.&lt;/p&gt;
&lt;h3&gt;Coloring methods&lt;/h3&gt;
&lt;p&gt;Once the gravity function was implemented, some beautification was in order.&lt;/p&gt;
&lt;p&gt;Originally, each particle was randomly assigned either red, green, or blue.&lt;/p&gt;
&lt;p&gt;&lt;img alt="early dimo image, with randomly assigned colors" src="http://palebluepixel.org/static/images/034/random-colors.png" /&gt;&lt;/p&gt;
&lt;p&gt;The gravitational swirls may look kinda cool, but the colors are hectic.  This
&lt;em&gt;isn't&lt;/em&gt; one of those rare cases where randomness is beautiful.  It occurred to
me that seeing big swaths of color through all the particles might look
better.&lt;/p&gt;
&lt;h4&gt;Cololololololors&lt;/h4&gt;
&lt;p&gt;But what criteria should be used to decide what color each particle should
receive?&lt;/p&gt;
&lt;p&gt;The simplest approach would be to color the particles based on their distance
from the players, and that's essentially what I did.  The equations below use
each particle's speed &lt;em&gt;and&lt;/em&gt; acceleration to determine what color they should be
assigned each frame.&lt;/p&gt;
&lt;figure&gt;
    &lt;div role="math"&gt;
        n = \dfrac{2\pi \cdot \lvert\vec{v}\rvert \cdot \lvert\vec{a}\rvert}{a_{max}}
    &lt;/div&gt;
    &lt;div role="math"&gt;
        \red{R(n)}   = \dfrac{\cos(n + 1.76714) + 1}{2}
    &lt;/div&gt;
    &lt;div role="math"&gt;
        \green{G(n)} = \dfrac{\cos(n + 3.92699) + 1}{2}
    &lt;/div&gt;
    &lt;div role="math"&gt;
        \blue{B(n)} = \dfrac{\cos(n + 5.89048) + 1}{2}
    &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;span role="math"&gt;\vec{a}&lt;/span&gt; is the acceleration vector, and &lt;span
role="math"&gt;\vec{v}&lt;/span&gt; is the velocity vector.  &lt;span
role="math"&gt;a_{max}&lt;/span&gt; is the maximum magnitude an acceleration vector is
allowed to have (configurable via the "max accel" parameter in the UI config
panel).&lt;/p&gt;
&lt;p&gt;The range of &lt;code&gt;cos&lt;/code&gt; and &lt;code&gt;sin&lt;/code&gt; are &lt;code&gt;-1..1&lt;/code&gt;, but the color values I needed are
&lt;code&gt;0..1&lt;/code&gt;.  The &lt;code&gt;+1&lt;/code&gt; addition shifts the output into &lt;code&gt;0..2&lt;/code&gt;, and the &lt;code&gt;/2&lt;/code&gt; division
scales it down to &lt;code&gt;0..1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When graphed, they look like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Roughly evenly-spaced sine waves" src="http://palebluepixel.org/static/images/034/sine_waves.png" /&gt;&lt;/p&gt;
&lt;p&gt;The cosine allows the colors to cycle repeatedly (R,G,B,R,G,B,...) as the
input, &lt;span role="math"&gt;n&lt;/span&gt;, increases.  Here's the result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image of the swaths of color" src="http://palebluepixel.org/static/images/034/swath-colors.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Yes!&lt;/em&gt;  Swaths of color, cycling through the spectrum like a rainbow.&lt;/p&gt;
&lt;h4&gt;The Grand Programmers' Utopia (GPU)&lt;/h4&gt;
&lt;p&gt;After bumping up against my CPU's limits while implementing gravity, I was
certain of one thing: I wanted to rely on the CPU as little as possible.&lt;/p&gt;
&lt;p&gt;I had a vague intuition that pixel shaders were the answer, since, hey, pixel
shaders control the colors of pixels, right?  It turned out my understanding of
shaders was pretty far off, but they &lt;em&gt;are&lt;/em&gt; the right tool for the job.&lt;/p&gt;
&lt;p&gt;Shaders are small programs that run on your video card's processor(s) (the
"GPU").  They come in a variety of languages, but shaders in WebGL are written
in &lt;a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language"&gt;GLSL&lt;/a&gt;, a subset of C.&lt;/p&gt;
&lt;p&gt;Learning about and writing the shaders was the most fun and educational aspect
of this project, mostly because graphics programming is uniquely rewarding
among all types of programming.  Often an unanticipated quirk of an equation
(or even a typo!) will result in a very cool surprise.  In short, "just trying
stuff" pays off &lt;em&gt;far&lt;/em&gt; more than in any other branch of programming.&lt;/p&gt;
&lt;h4&gt;More than colors?&lt;/h4&gt;
&lt;p&gt;The more particles I add to the visualization, the better it looks.  1,000
particles just look like a bunch of specks, but 100,000 particles start to look
like clouds of swirling vapor.  Since the gravity calculations are so
demanding, I wanted to offload as much work as possible onto the GPU.&lt;/p&gt;
&lt;p&gt;The Web doesn't currently have an API for doing general-purpose calculations on
the GPU (although &lt;a href="https://en.wikipedia.org/wiki/WebCL"&gt;WebCL&lt;/a&gt; is in the pipeline).  It is possible to do
limited calculations, by doing your calculation in a fragment shader and
encoding the results, as pixel color values, into an in-memory texture (FBO).&lt;/p&gt;
&lt;p&gt;Sadly, a combination of limited time and inexperience prevented me from getting
the gravity calculations onto the GPU.&lt;/p&gt;
&lt;p&gt;In 2012, Edouard Coulon created a similar particle gravity simulation called
&lt;a href="http://www.chromeexperiments.com/detail/gpu-particle-attractors/?f="&gt;GPU Particle Attractors&lt;/a&gt;, using the texture approach, and
achieved 1,000,000 particles.  Tragically, his website is gone and I couldn't
find his demo hosted anywhere else.  Edouard, if you read this, please reach
out to me.  I'd love to learn from your work.&lt;/p&gt;
&lt;p&gt;In the end, I had to settle for 25,000 particles on my laptop.  For the art
installation, we used a pretty beefy gaming rig, and I was able to bump it up
to 50,000 (thanks Charan!).&lt;/p&gt;
&lt;h3&gt;What's next?&lt;/h3&gt;
&lt;p&gt;Here's my wishlist for further improvements to the visualization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do gravity calculations on the GPU, which would enable either...&lt;ul&gt;
&lt;li&gt;several orders of magnitude more particles, or&lt;/li&gt;
&lt;li&gt;particles can exert gravity on each other&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add a calibration system which would determine how many particles a user's
   computer is capable of rendering&lt;/li&gt;
&lt;li&gt;adjust the canvas sizing code, to allow the visualization to be easily
   embedded in other pages (it currently full-screens itself)&lt;/li&gt;
&lt;li&gt;add even more configuration parameters and presets.  DiMo is capable of a
   nice range of effects and patterns, but many of them require nitpicky
   tweaking of sliders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More likely, I'll use what I learned from DiMo on a super-secret future
project.&lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="http://palebluepixel.org/static/js/033/katex/katex.min.css"&gt;
&lt;script src="http://palebluepixel.org/static/js/033/katex/katex.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
    function set_vimeo_iframe_height() {
        var ifr = document.getElementById('dimo-demo');
        ifr.height = ifr.offsetWidth / (1280/720);
    }
    document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
    window.addEventListener('resize', set_vimeo_iframe_height);
    function render_math() {
        katex.render(this.innerHTML, this);
    }
    $('[role=math]').each(render_math);
&lt;/script&gt;&lt;/p&gt;</summary><category term="programming"></category><category term="javascript"></category><category term="requirejs"></category><category term="amd"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="physics"></category><category term="web"></category></entry><entry><title>Particles and π - DiMo Comes to Life</title><link href="http://palebluepixel.org/2014/08/25/particles-and-p-dimo-comes-to-life/" rel="alternate"></link><updated>2014-08-25T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-08-25:2014/08/25/particles-and-p-dimo-comes-to-life/</id><summary type="html">&lt;p&gt;A player walks up Fayetteville St in Raleigh, North Carolina.
&lt;a href="http://www.sparkcon.com/"&gt;SparkCon&lt;/a&gt; has begun, and dozens of artists are strewn along the
street, hard at work creating elaborate chalk art on the asphalt.  A light rain
is falling, and some artists are holding umbrellas over their work, some have
draped tarps over themselves and their sketches, but most don't seem to care,
as if creating their art is more important than how long it lasts.&lt;/p&gt;
&lt;p&gt;Up ahead is a gnarly-looking wrought-iron handrail covered in small
stegasaurus-like spikes.  The spikes make its use as a handrail questionable,
but it does keep pedestrians from plummeting into the stairwell below.&lt;/p&gt;
&lt;p&gt;The stairwell looks dingy, but a large green arrow points down, and so she
descends to escape the rain.&lt;/p&gt;
&lt;p&gt;It's dark inside, but on the far wall, swirling clouds of colored dots orbit
around three circles.  The silhouettes of three children stand on pedistals
near the wall, each one waving an illuminated baton.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="http://palebluepixel.org/static/images/033/dimo-kids.jpg" alt="children playing DiMo"&gt;
    &lt;figcaption&gt;photo by Yujin Kim&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After watching closely for a few moments, the rules of motion start to come
together in her mind.  Each child's baton is emanating a different color; red,
green, and blue.  As they swing the batons, large red, green, and blue circles
swoosh through the colored clouds.  &lt;/p&gt;
&lt;p&gt;The large colored circles seem to exert an attractive gravitational force on
the particles.  Orbits are formed, and tiny solar systems glow brilliantly.&lt;/p&gt;
&lt;figure&gt;

    &lt;iframe id="dimo-demo" src="//player.vimeo.com/video/107405612" width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

    &lt;figcaption&gt;
        &lt;a href="http://vimeo.com/107405612"&gt;GeekSPARK: Digital Motion (DiMo) desktop demo&lt;/a&gt;
    &lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;DiMo (short for Digital Motion) is an annual exhibit at GeekSPARK, which itself
is a branch of SparkCon.  I haven't been to any previous years' installations,
but this year included digital visualizations projected onto a large wall, with
three LED batons that visitors could use to control the visualizations.&lt;/p&gt;
&lt;p&gt;I created one of the three "exhibits", the one you see in the video.  Each
exhibit used the same set of input: the coordinates of the colored batons.  My
exhibit is a particle gravity simulation, created with WebGL (&lt;a href="http://threejs.org/"&gt;three.js&lt;/a&gt;,
specifically), &lt;a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language"&gt;GLSL&lt;/a&gt;, and many other tools.&lt;/p&gt;
&lt;h2&gt;Event photos&lt;/h2&gt;
&lt;p&gt;Enjoy these photos from Digital Motion at SPARKcon 2014.&lt;/p&gt;
&lt;p&gt;I'm working on a follow-up post, with technical information about the
implementation.  &lt;em&gt;Update&lt;/em&gt; it's 
&lt;a href="http://palebluepixel.org/2014/10/30/dimo-the-deconstruction-of-falling-stars/"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;This (2014) was my first year as a volunteer, but it was a tremendously
educational and &lt;em&gt;fun&lt;/em&gt; experience, so I'll definitely be back next year.
&lt;em&gt;Update&lt;/em&gt; &lt;a href="http://palebluepixel.org/2015/09/26/make-a-kimotion/"&gt;2015's exhibit info and pictures!&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;I've written mostly about my own contribution to DiMo here, because that's what
I'm most familiar with, but in reality it was only a piece of the DiMo puzzle.
There were two other visualizations, both of which used the lighted batons as
input.  I would love to link to their creators' websites, but I'm still waiting
on URLs.  Thanks to them, too!&lt;/p&gt;
&lt;p&gt;Ian Hands, for organizing the project, asking me to participate, writing the
input server, and coming up with the whole idea.&lt;/p&gt;
&lt;p&gt;Ben Pritchett for code contributions to the renderer and the server, and for
his work on two input sources (music BPM and a &lt;em&gt;brain machine&lt;/em&gt;) which didn't
make it into this year's exhibit, but we'll almost certainly use next year.&lt;/p&gt;
&lt;p&gt;Justis Peters is the lead coordinator of GeekSPARK, and, I think, the founder
of DiMo, and none of this would have happened without him.&lt;/p&gt;
&lt;p&gt;Thanks also to the &lt;a href="https://www.facebook.com/ncsufishmarket"&gt;Raleigh Fish Market Gallery&lt;/a&gt; for providing us a
venue and letting us paint the projection wall white, and to Yujin Kim for
taking some awesome pictures.&lt;/p&gt;
&lt;p&gt;Most of all, thank you to the visitors who descended that dingy stairwell to
see our exhibits!  Seeing their smiles as they waved the batons was incredibly
rewarding.  Everyone seemed to have fun.  One kid liked it so much he cried
when it was time to leave.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ring animation in dimo" src="http://palebluepixel.org/static/images/033/ring-anim.gif" /&gt;&lt;/p&gt;
&lt;p&gt;You can find all the code at our &lt;a href="https://github.com/geekspark-rh/"&gt;GitHub group&lt;/a&gt;.  The
visualization code described in this post is in the &lt;a href="https://github.com/geekspark-rh/dimo-renderer"&gt;dimo-renderer&lt;/a&gt;
repo.&lt;/p&gt;
&lt;script&gt;
    function set_vimeo_iframe_height() {
        var ifr = document.getElementById('dimo-demo');
        ifr.height = ifr.offsetWidth / (1920/1080);
    }
    document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
    window.addEventListener('resize', set_vimeo_iframe_height);
&lt;/script&gt;</summary><category term="programming"></category><category term="javascript"></category><category term="requirejs"></category><category term="amd"></category><category term="threejs"></category><category term="webgl"></category><category term="3d"></category><category term="art"></category><category term="sparkcon"></category><category term="geekspark"></category><category term="dimo"></category><category term="physics"></category><category term="web"></category></entry><entry><title>RGB WebGL Color Cube</title><link href="http://palebluepixel.org/2014/03/23/rgb-webgl-color-cube/" rel="alternate"></link><updated>2014-03-23T00:00:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-03-23:2014/03/23/rgb-webgl-color-cube/</id><summary type="html">&lt;p&gt;I spent a bit of time this weekend building an RGB color cube for
&lt;a href="http://colorpal.org"&gt;ColorPal&lt;/a&gt;, using &lt;a href="http://threejs.org"&gt;Three.js&lt;/a&gt;.  Drag and drop any image, and you'll see a
cube with all the pixels of your image mapped into 3D space.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-default btn-lg"
href="/static/projects/colorpal_colorcube"&gt;Launch live demo!&lt;/a&gt; and &lt;a href="https://github.com/mwcz/mwcz/blob/master/content/static/projects/colorpal_colorcube/js/cp-colorcube.js"&gt;view the
code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your web browser must support WebGL, which at this point in history means a
fairly recent Firefox or Chrome.  In case your web browser doesn't support
WebGL, here's a video to enjoy while you download &lt;a href="https://nightly.mozilla.org/"&gt;Firefox Nightly&lt;/a&gt;. ;)&lt;/p&gt;
&lt;figure&gt;

    &lt;iframe id="colorcube-demo" src="//player.vimeo.com/video/108080970"
    width="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen
    allowfullscreen&gt;&lt;/iframe&gt;

    &lt;figcaption&gt;
        A &lt;a href="http://vimeo.com/107405612"&gt;recording&lt;/a&gt; of the colorcube
        with a couple of sample images, including the &lt;a
        href="http://colorpal.org/" title="ColorPal, a color palette
        generator"&gt;ColorPal&lt;/a&gt; logo.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href="http://threejs.org"&gt;Three.js&lt;/a&gt; has proven to be pretty fun.  The documentation is decent, but
not comprehensive.  Some parts of the API are filled with "todo" notes instead
of actual documentation.&lt;/p&gt;
&lt;p&gt;Luckily, the omissions in the documentation are made up for by the extensive
&lt;a href="http://threejs.org/examples/"&gt;set of code examples&lt;/a&gt;.  Any time I couldn't get what I needed from the API
docs, I skimmed the examples until I found an existing scene that had the
effect I needed.&lt;/p&gt;
&lt;p&gt;For this demo, drawing a cube was easy, and even populating it with dots was easy, but &lt;/p&gt;
&lt;h2&gt;Colored particles&lt;/h2&gt;
&lt;p&gt;The color cube uses a particle system to render 2D color points inside a 3D
cube.&lt;/p&gt;
&lt;p&gt;Eventually I found a &lt;a href="http://threejs.org/examples/#webgl_particles_billboards_colors"&gt;particle system demo with colors&lt;/a&gt;, which held the key.&lt;/p&gt;
&lt;p&gt;By setting &lt;code&gt;vertexColors: true&lt;/code&gt; on the &lt;code&gt;ParticleSystemMaterial&lt;/code&gt;, Three.js will
match each vertex in the &lt;code&gt;vertices&lt;/code&gt; array with a color in the &lt;code&gt;colors&lt;/code&gt; array.
&lt;code&gt;vertices[1726]&lt;/code&gt; will use &lt;code&gt;colors[1726]&lt;/code&gt;, for example.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of ColorCube" src="/static/images/025/screenshot.png" title="Screenshot of ColorCube" /&gt;&lt;/p&gt;
&lt;p&gt;A vertex and a color are created for each pixel in the source image.  For the
vertex, &lt;span style="color: red;"&gt;red&lt;/span&gt; values are mapped to the &lt;code&gt;X&lt;/code&gt; axis,
and similarly &lt;span style="color: green"&gt;green&lt;/span&gt; to &lt;code&gt;Y&lt;/code&gt; and &lt;span
style="color: blue"&gt;blue&lt;/span&gt; to &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;p&gt;Rendering a point for each pixel in a huge image image would be overkill, so
I used the pixel culling already present in ColorPal to scale the number of
points down to a more reasonable 128&lt;sup&gt;2&lt;/sup&gt;.  Increasing that number also
increases the quality of the cube.  If you look closely in the video above, the
ColorPal logo cube has gaps in it.  The better the quality, the longer the
startup time, though.&lt;/p&gt;
&lt;p&gt;Now I'm racking my brain for an excuse to use WebGL at Red Hat...&lt;/p&gt;
&lt;p&gt;Any ideas?&lt;/p&gt;
&lt;script&gt;
    function set_vimeo_iframe_height() {
        var ifr = document.getElementById('colorcube-demo');
        ifr.height = ifr.offsetWidth / (1280/720);
    }
    document.addEventListener('DOMContentLoaded', set_vimeo_iframe_height);
    window.addEventListener('resize', set_vimeo_iframe_height);
&lt;/script&gt;</summary><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="webgl"></category><category term="web"></category></entry><entry><title>Introducing Drop64, ezpz data URI generator</title><link href="http://palebluepixel.org/2014/02/25/introducing-drop64-ezpz-data-uri-generator/" rel="alternate"></link><updated>2014-02-25T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2014-02-25:2014/02/25/introducing-drop64-ezpz-data-uri-generator/</id><summary type="html">&lt;p&gt;A few weeks ago, a &lt;a href="http://www.heyokadesign.com/"&gt;coworker&lt;/a&gt; of mine ran into some font issues.  Firefox
doesn't allow cross-origin requests for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"&gt;web fonts&lt;/a&gt;, and he was using a tool
called &lt;a href="http://www.fontsquirrel.com/"&gt;Font Squirrel&lt;/a&gt; to generate fonts, including &lt;a href="https://developer.mozilla.org/en-US/docs/data_URIs"&gt;data URIs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Embedding a data URI for a font (or image) inside a CSS file is a common
technique for reducing the number of HTTP requests.  In this case, it also
negates the need for a cross-domain request to fetch the font file, because the
file's contents are already embedded.&lt;/p&gt;
&lt;p&gt;There was something screwy about Font Squirrel's data URIs, though.  A change
must have been made to their tool, because all of our icons were suddenly
shifted up.&lt;/p&gt;
&lt;p&gt;Once we narrowed it down to a misbehaving tool, the solution was clearly to
create a new, better behaved tool.&lt;/p&gt;
&lt;p&gt;I pretty quickly realized that ColorPal is basically a drag-and-drop data URI
generator.&lt;/p&gt;
&lt;p&gt;By dropping a file into ColorPal's dropzone, the user is implicitly giving the
browser access to that file through the HTML5 File API.  That file's contents
are conveniently (for our purposes, anyway) exposed as a data URI.&lt;/p&gt;
&lt;p&gt;ColorPal takes the extra steps of injecting the URI into a canvas element, then
performing a color quantization algorithm on the resulting pixels.&lt;/p&gt;
&lt;p&gt;Drop64 is ColorPal with a bunch of features ripped out.&lt;/p&gt;
&lt;p&gt;So, in the span of about 20 minutes I forked ColorPal, changed the name and
logo, ripped out the quantization algorithm, displayed the data URI into an
output box, created a github page for it, and registered &lt;a href="http://drop64.com/"&gt;drop64.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voila:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Drop64 recording" src="http://palebluepixel.org/static/images/projects/drop64/recording.gif" title="Drop64 recording" /&gt;&lt;/p&gt;
&lt;p&gt;It's not exactly a technical marvel, and the code is still rife with ColorPal
stuff.  I only ripped out what was absolutely necessary to get the tool working
as fast as possible.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://drop64.com/"&gt;Try it out&lt;/a&gt; or &lt;a href="https://github.com/mwcz/Drop64"&gt;check out the code&lt;/a&gt;.  Happy hacking.&lt;/p&gt;</summary><category term="html5"></category><category term="javascript"></category><category term="data uri"></category><category term="web"></category></entry><entry><title>Super easy image resizing in GIMP</title><link href="http://palebluepixel.org/2013/12/22/super-easy-image-resizing-in-gimp/" rel="alternate"></link><updated>2013-12-22T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2013-12-22:2013/12/22/super-easy-image-resizing-in-gimp/</id><summary type="html">&lt;p&gt;Ever been here?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to double the size of this image&lt;/p&gt;
&lt;p&gt;open calculator&lt;/p&gt;
&lt;p&gt;type in current width * 2&lt;/p&gt;
&lt;p&gt;type in current height * 2&lt;/p&gt;
&lt;p&gt;paste results back into the Create New Image dialog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've done that countless times.  As I was about to do the same thing once more,
I thought "Hmm, wouldn't it be nice if we could do simple math inside the New
Image dialog?  Well, I tried it and it worked.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GIMP math recording" src="http://palebluepixel.org/static/images/024/gimp_math.gif" title="GIMP math recording" /&gt;&lt;/p&gt;
&lt;p&gt;The feature was added in GIMP 2.8, so it's fairly recent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enhancements have also been made to the size entry widget, which is used for
inputting most of the x, y, width, height parameters. For example, in the
scale dialog it is now possible to write “50%” in the Width field to scale
the image to 50% of the width. Expressions such as “30in + 40px” and “4 *
5.4in” work, too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From the &lt;a href="http://docs.gimp.org/2.8/en/gimp-introduction-whats-new.html" title="GIMP User Manual"&gt;GIMP User Manual&lt;/a&gt;.&lt;/p&gt;</summary><category term="gimp"></category></entry><entry><title>ColorPal CLI!</title><link href="http://palebluepixel.org/2013/11/07/colorpal-cli/" rel="alternate"></link><updated>2013-11-07T00:00:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2013-11-07:2013/11/07/colorpal-cli/</id><summary type="html">&lt;p&gt;Tired of creating color palettes with ColorPal's simple, intuitive
drag-and-drop interface?  Me too!  Want to jam with the console cowboys in
cyber-space?  Now you can.  Now &lt;em&gt;we&lt;/em&gt; can.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ColorPal CLI logo" src="http://palebluepixel.org/static/images/023/colorpal_cli_logo.png" title="ColorPal CLI logo" /&gt;&lt;/p&gt;
&lt;h2&gt;Demo!&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node cpal.js -f hex -s &lt;span class="m"&gt;8&lt;/span&gt; MyImage.png

&lt;span class="c"&gt;#07070b&lt;/span&gt;
&lt;span class="c"&gt;#bac0c4&lt;/span&gt;
&lt;span class="c"&gt;#d1bd66&lt;/span&gt;
&lt;span class="c"&gt;#7e8899&lt;/span&gt;
&lt;span class="c"&gt;#696964&lt;/span&gt;
&lt;span class="c"&gt;#c4b441&lt;/span&gt;
&lt;span class="c"&gt;#65683e&lt;/span&gt;
&lt;span class="c"&gt;#394434&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Get it!&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;npm install -g canvas requirejs # install dependencies
git clone git@github.com:mwcz/colorpal-cli.git
cd colorpal-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Use it!&lt;/h2&gt;
&lt;p&gt;Visit the &lt;a href="/projects/colorpal-cli" title="ColorPal CLI project page"&gt;projcet page&lt;/a&gt; for the full documentation, or simply run the
command without any arguments to see the help text.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Generate a color palette from an image! :)
USAGE: node cpal.js IMAGE

Options:
  -s, --size     Generate a fixed size palette; you specify the number of colors you want.

  -d, --dynamic  Generate a palette, sized dynamically based on the color diversity of the image; you can optionally specify a number from 0.0 to 1.0, where larger numbers increase the number of colors.

  -f, --format   Specify the output format.  Available formats are: scss, sass, json, less, rgb, hex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code is &lt;a href="https://github.com/mwcz/colorpal-cli" title="ColorPal CLI code repository"&gt;available on GitHub&lt;/a&gt; and I welcome any feedback, bug reports,
pull requests, etc.&lt;/p&gt;</summary><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category></entry><entry><title>ColorPal Output Update</title><link href="http://palebluepixel.org/2012/07/30/colorpal-output-update/" rel="alternate"></link><updated>2012-07-30T22:30:00-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-07-30:2012/07/30/colorpal-output-update/</id><summary type="html">&lt;p&gt;Hi pals.&lt;/p&gt;
&lt;p&gt;This is a speedy post about a speedy update I made today to
&lt;a href="/projects/colorpal/"&gt;ColorPal&lt;/a&gt;, an HTML5 tool I wrote that automatically
generates color palettes from a photograph.&lt;/p&gt;
&lt;p&gt;Previously, ColorPal provided hex codes for each color extracted from the
image.  Eight individual &amp;lt;input&amp;gt;s at the bottom of the page displayed the
colors.&lt;/p&gt;
&lt;p&gt;I use ColorPal a lot (my own dogfood and all that) when designing websites, and
it wasn't long before I got fed up (hah!) with copying values from eight
freaking inputs.&lt;/p&gt;
&lt;p&gt;Blah:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Before" src="/static/images/022/before.png" /&gt;&lt;/p&gt;
&lt;p&gt;Huzzah:&lt;/p&gt;
&lt;p&gt;&lt;img alt="After" src="/static/images/022/after.png" /&gt;&lt;/p&gt;
&lt;p&gt;All eight colors can be pasted out in one fell swoop of the mouse.&lt;/p&gt;
&lt;p&gt;&lt;a href="/projects/colorpal/"&gt;ColorPal Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Works in Chrome and Firefox.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pro tip&lt;/strong&gt;: you can edit the values in the textarea and the palette will be
instantly updated to reflect your edits.  This means you can also paste in
a list of colors (hex format only for the time being).&lt;/p&gt;
&lt;p&gt;If you try out ColorPal, let me know your thoughts on
&lt;a href="https://twitter.com/#!/mwcz"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are github repos for &lt;a href="https://github.com/mwcz/ColorPal"&gt;ColorPal&lt;/a&gt; and
&lt;a href="https://github.com/mwcz/median-cut-js"&gt;median-cut.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This minor update is part of the groundwork for some exciting changes to my
sorely neglected &lt;a href="http://clayto.com/"&gt;photography site&lt;/a&gt;.  I still post photos
regularly, but haven't given it any fresh coding love for about two years.  See
how the colorscheme of each page matches the photograph?  That's done with an
older palette generation implementation (which I should write about someday),
but pretty soon it'll be ColorPal pumping out those swatches.  &lt;/p&gt;
&lt;p&gt;That's not the only change.  If you're not excited, don't worry.  I am!&lt;/p&gt;
&lt;p&gt;&lt;a href="/projects/colorpal"&gt;&lt;static/images src="/static/images/019/colorpal_logo.png" alt="ColorPal logo" title=""
/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy coloring!&lt;/p&gt;</summary><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>Introducing Canvas Indexed Color</title><link href="http://palebluepixel.org/2012/07/03/introducing-canvas-indexed-color/" rel="alternate"></link><updated>2012-07-03T23:44:50-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-07-03:2012/07/03/introducing-canvas-indexed-color/</id><summary type="html">&lt;p&gt;&lt;a href="/projects/canvas_indexed_color" title="Canvas Indexed Color demo"&gt;Canvas Indexed Color demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="White SVG Tiger" src="/static/images/021/hahatiger.png" /&gt;&lt;/p&gt;
&lt;p&gt;First, I converted the classic SVG tiger into a set of canvas drawing
instructions using &lt;a href="http://professorcloud.com/svg-to-canvas/" title="Professor Cloud's conversion
tool"&gt;Professor Cloud's conversion
tool&lt;/a&gt;.  The output looks like
&lt;a href="https://github.com/mwcz/mwcz/blob/master/blog/projects/canvas_indexed_color/vector_images.js" title="Tiger image"&gt;this&lt;/a&gt;.  Each call to &lt;code&gt;cvm.getColor()&lt;/code&gt; used to be a string literal.  &lt;/p&gt;
&lt;p&gt;Vim's regex saved me from having to edit &lt;em&gt;100,000&lt;/em&gt; lines of canvas instructions
by hand to replace the color strings.&lt;/p&gt;
&lt;p&gt;The demo uses &lt;a href="http://knockoutjs.com/" title="Knockout JS"&gt;Knockout&lt;/a&gt; for handling all
the update/draw events as well as updating the URL hash.  Check the &lt;a href="https://github.com/mwcz/mwcz/blob/master/blog/projects/canvas_indexed_color/cic.js" title="source code"&gt;source
code&lt;/a&gt; and you'll see that there &lt;em&gt;isn't&lt;/em&gt; a vast tangled nest of event
wirings.  Each time one of the colors in this ViewModel is changed, Knockout
automatically triggers the canvas redraw and the updates the URL with the new
palette.  Conversely, if the URL is changed, the ViewModel will update itself
with the new value.  Knockout calls this a "two-way data binding".  &lt;/p&gt;
&lt;p&gt;I replaced the aforementioned color strings with calls to &lt;code&gt;cvm&lt;/code&gt;, which is a
Knockout ViewModel (in this case, an object that holds all the color data).
&lt;code&gt;cvm&lt;/code&gt; is populated with the SVG tiger's default colors.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ko.observableArray( [
    { hex: ko.observable(&amp;quot;#000000&amp;quot;) },
    { hex: ko.observable(&amp;quot;#323232&amp;quot;) },
    // .... many more ....
    { hex: ko.observable(&amp;quot;#ff727f&amp;quot;) },
    { hex: ko.observable(&amp;quot;#ffffff&amp;quot;) }
]);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Play with the colors, then copy the URL and send your tiger to your friends.  :]&lt;/p&gt;
&lt;p&gt;&lt;a href="/projects/canvas_indexed_color/#4c0000,#659900,#666666,#992600,#999999,#99cc32,#a51926,#a5264c,#b23259,#b26565,#b2b2b2,#cc3f4c,#cc7226,#cccccc,#e5668c,#e59999,#e5e5b2,B5E8E6,#ea8c4d,#ea8e51,#eb955c,#ec9961,#eea575,#efaa7c,#f1b288,#f2b892,#f3bf9c,#f4c6a8,#f5ccb0,#f8d8c4,#f8dcc8,#f9e2d3,#fae5d7,#fcf2eb,#ff727f,#ffffcc,#ffffff,#000000,#323232" title="Crazy tiger"&gt;Crazy tiger&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please note, this is only a simulation of an indexed color palette.  It is not
a true, usable, indexed-color API for canvas (someday, maybe!).&lt;/p&gt;
&lt;p&gt;The color picker is &lt;a href="https://github.com/mattfarina/farbtastic" title="Farbtastic"&gt;Farbtastic&lt;/a&gt;.  If you're interested in reading more about the history of
indexed color, and a &lt;strong&gt;mind-blowing&lt;/strong&gt; canvas demo, go
&lt;a href="http://www.effectgames.com/effect/article.psp.html/joe/Old_School_Color_Cycling_with_HTML5" title="Color cycling in HTML5 canvas"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="web"></category></entry><entry><title>ColorPal palettes improved!</title><link href="http://palebluepixel.org/2012/02/10/colorpal-palettes-improved/" rel="alternate"></link><updated>2012-02-10T22:44:50-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-02-10:2012/02/10/colorpal-palettes-improved/</id><summary type="html">&lt;p&gt;&lt;a href="/projects/colorpal"&gt;&lt;static/images src="/static/images/019/colorpal_logo.png" alt="ColorPal logo" title=""
/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In my &lt;a href="/2012/01/16/colorpal-alpha/"&gt;last post&lt;/a&gt; on the subject, I introduced
ColorPal, my HTML5 color palette generation tool.  It didn't perform well with
certain types of images, so I fixed it. :)&lt;/p&gt;
&lt;p&gt;Color palettes will now match the image even better.  Especially for images
with infrequent but &lt;em&gt;important&lt;/em&gt; colors.  Here's a comparison of the old and new
methods, on an image that is mostly black:&lt;/p&gt;
&lt;p&gt;&lt;img alt="comparison of palettes generated with median and
mean" src="/static/images/019/median-mean-comparison.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can see that with the old method, the black pixels definitely took over the
palette.&lt;/p&gt;
&lt;p&gt;&lt;a href="/projects/colorpal"&gt;Try it with your own images!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For some images, this change won't affect palettes at all.  But for images with
low-population, high-importance colors, like the one above, palettes will look
&lt;em&gt;much&lt;/em&gt; better!&lt;/p&gt;
&lt;p&gt;Technical discussion below.&lt;/p&gt;
&lt;h1&gt;Why the 'median' in median-cut?&lt;/h1&gt;
&lt;p&gt;Median Cut is an algorithm typically used to reduce the number of colors in an
image.&lt;/p&gt;
&lt;p&gt;&lt;img alt="16 million colors versus 16 colors" src="/static/images/019/median-cut-example.png" /&gt;&lt;/p&gt;
&lt;p&gt;The steps to perform median cut are fairly straightforward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Find the smallest box which contains all the colors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sort the enclosed colors along the longest axis of the box.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Split the box into two regions at median of the sorted list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat the above process until the original color space has been divided
     into N regions where N is the number of colors you want.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Not too bad, right?  The question remains, though, why median?&lt;/p&gt;
&lt;p&gt;Mean, median, and mode all attempt to measure the
&lt;a href="http://en.wikipedia.org/wiki/Location_parameter"&gt;location&lt;/a&gt; of a probability
distribution.  Worded more intuitively... they try to find the center of a set
of numbers.  They just employ different definitions of "center".&lt;/p&gt;
&lt;p&gt;&lt;img alt="mean, median, and mode graphed" src="/static/images/019/mean_median_mode.png" /&gt;
(Thanks &lt;a href="http://en.wikipedia.org/wiki/Median"&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;As you can see clearly in the dashed data set, the mean tends to follow the
tail.  In other words, mean is useful when outliers are important.  When
generating a color palette, outliers are essential.  Outliers may be the small
streak of color in an otherwise drab sky, or a small red rose in the middle of
a green field.&lt;/p&gt;
&lt;p&gt;The goal of median cut is &lt;em&gt;not&lt;/em&gt; to generate a color palette.  It's to
efficiently reduce the number of colors in an image.  Since my goal with
ColorPal is to find good-lookin' colors, I've modified the algorithm to split
boxes at the &lt;strong&gt;mean&lt;/strong&gt; instead of the &lt;strong&gt;median&lt;/strong&gt;.  Mean splits boxes closer to
the outliers, which keeps low-population colors nicely segregated from the
high-population colors.&lt;/p&gt;
&lt;p&gt;Thus step 3 becomes:&lt;/p&gt;
&lt;div class="pygments_murphy syntax_highlight"&gt;
  3. Split the box into two regions at the &lt;b&gt;mean&lt;/b&gt; of the sorted list.
&lt;/div&gt;

&lt;p&gt;The result?  Mean Cut!  Also: awesome color palettes.&lt;/p&gt;
&lt;h2&gt;Interesting side-note on color distributions&lt;/h2&gt;
&lt;p&gt;Interestingly, photographs of nature tend to have nice, close-to-normal color
distributions.  A "normal distribution" is a formal term for a "bell curve".&lt;/p&gt;
&lt;p&gt;Check out the red, green, and blue distributions for a photograph of a forest.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Forest red   pixel distribution" src="/static/images/019/forest_r.png" /&gt;
&lt;img alt="Forest green pixel distribution" src="/static/images/019/forest_g.png" /&gt;
&lt;img alt="Forest blue  pixel distribution" src="/static/images/019/forest_b.png" /&gt;&lt;/p&gt;
&lt;p&gt;For comparison, here are the distributions for a shot of NYC.&lt;/p&gt;
&lt;p&gt;&lt;img alt="City   red   pixel distribution" src="/static/images/019/city_r.png" /&gt;
&lt;img alt="City   green pixel distribution" src="/static/images/019/city_g.png" /&gt;
&lt;img alt="City   blue  pixel distribution" src="/static/images/019/city_b.png" /&gt;&lt;/p&gt;
&lt;h2&gt;What's next for ColorPal?  Color spaces.&lt;/h2&gt;
&lt;p&gt;Mean-cut improves ColorPal dramatically for some images, but it's still not
perfect.  Perfection probably won't be attainable, but there are still many
ways to improve.&lt;/p&gt;
&lt;p&gt;My next test will be converting to a color space other than RGB.&lt;/p&gt;
&lt;p&gt;HSL is common, and the RGB/HSL conversion formulas are in my very old JSImage
project.  It may not turn out well, though, as the concept of "widest box"
loses most of its meaning when each axis is a completely different unit of
measure.  Although, in a way, I suppose RGB has a similar problem.  Red, Green,
and Blue could be thought of as unrelated units.  I'll try it out and see how
it goes.  I wonder if my old JavaScript RGB/HSL code has rotted away yet...&lt;/p&gt;
&lt;p&gt;Most likely, I'll skip HSL and try one of the
&lt;a href="http://en.wikipedia.org/wiki/Lab_color_space"&gt;Lab&lt;/a&gt; color spaces first, since
they are not composed linear values like RGB and HSL.  Instead, Lab color
spaces use non-linear scales that closely match human perception of color.
Perfect for my purposes.  How fortuitious for me that CIE invented it way back
in 1931.&lt;/p&gt;
&lt;p&gt;There are three "Lab" color spaces: XYZ, Hunter-Lab,
and CIELAB.  XYZ will be first to the plate, since the RGB/XYZ formulas are
the simplest.  Let me take this opportune moment to plug
&lt;a href="http://www.easyrgb.com/index.php?X=MATH"&gt;EasyRGB.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Lend a hand&lt;/h2&gt;
&lt;p&gt;As I've mentioned before, ColorPal is in an early stage of development.  It
needs testing in multiple browsers, and I'm very interested in hearing people's
feedback.  Code development help is welcomed too.&lt;/p&gt;
&lt;p&gt;If you try out ColorPal, let me know your thoughts on
&lt;a href="https://twitter.com/#!/mwcz"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are github repos for &lt;a href="https://github.com/mwcz/ColorPal"&gt;ColorPal&lt;/a&gt; and
&lt;a href="https://github.com/mwcz/median-cut-js"&gt;median-cut.js&lt;/a&gt;.&lt;/p&gt;</summary><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>Toy javascript unit tester</title><link href="http://palebluepixel.org/2012/01/30/toy-javascript-unit-tester/" rel="alternate"></link><updated>2012-01-30T21:50:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-01-30:2012/01/30/toy-javascript-unit-tester/</id><summary type="html">&lt;p&gt;Last week I was sitting in a meeting, thinking about unit testing frameworks (not the subject of the meeting), and had a minor epiphany.  In the back of my mind, there has always been a bit of uncertainty as to how unit testing frameworks work.  Deep in my brain I knew there was something I didn't understand, but I wasn't quite sure what.  I never gave it any conscious thought.&lt;/p&gt;
&lt;p&gt;As a developer, I'd use a framework, write a bunch of &lt;code&gt;testBlahFoo&lt;/code&gt; functions, and the framework would magically run them.  &lt;/p&gt;
&lt;p&gt;Then I realized... "Oh, it's just introspection."&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Create an object with three properties, all functions&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myfuncs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;func it up&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;func2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;func&amp;#39;s old brother&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;func3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bring back da func&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Run all functions attached to myfuncs&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;myfuncs&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;myfuncs&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Outputs:&lt;/span&gt;
&lt;span class="c1"&gt;// &lt;/span&gt;
&lt;span class="c1"&gt;// func it up&lt;/span&gt;
&lt;span class="c1"&gt;// func&amp;#39;s old brother&lt;/span&gt;
&lt;span class="c1"&gt;// bring back da func&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So simple.  Later, I wrote a very basic unit testing framework, purely as an educational excercise.&lt;/p&gt;
&lt;p&gt;The guts are almost simple as the example above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;JTestSuite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;jt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JTests&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Run all functions that begin with &amp;quot;test&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;function&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;JTestSuite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JTestSuite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;run&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;run&lt;/code&gt; function's loop, I first check that each property is a function before attemping to run it.  This avoids a &lt;code&gt;called_non_callable TypeError&lt;/code&gt;.  I then check that the name of the property begins with the string "test".  When dynamically calling functions, it's usually a good idea to call &lt;code&gt;obj.hasOwnProperty(propname)&lt;/code&gt; to ensure the property wasn't inherited from some unknown source (especially if the property you wanted to reference may have been &lt;code&gt;delete&lt;/code&gt;d, but a property with the same name is now surfacing from a parent object), but in this case I'd like to leave open the possibility for inherited Test Suites.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;JTests&lt;/code&gt; object created in the &lt;code&gt;init&lt;/code&gt; function is a separate object that contains a bunch of assertions.  It looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;JTests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;result_callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result_callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;assertTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                                                                                                                                         
            &lt;span class="nx"&gt;name&lt;/span&gt;   &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;assertTrue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;args&lt;/span&gt;   &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;assertTrue&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assertTrue&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...except with many more assertions. :)&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;JTestSuite&lt;/code&gt; and &lt;code&gt;JTests&lt;/code&gt; use the &lt;a href="http://stackoverflow.com/a/5647397/215148"&gt;revealing module pattern&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I have a lot of ideas for improvement, like &lt;a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;DRY&lt;/a&gt;ing up the assertions, so the &lt;code&gt;{name,args,result}&lt;/code&gt; object doesn't have to be defined in each assertion.  But &lt;a href="http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#JavaScript"&gt;many others&lt;/a&gt; have already done a great job, and I don't want to reinvent too many wheels.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Define a custom handler for the result&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a new JTestSuite object and initialize it with the callback&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;TestSuite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;JTestSuite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;TestSuite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;test_callback&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create some tests&lt;/span&gt;
&lt;span class="nx"&gt;TestSuite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testMath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;TestSuite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testFalsy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// &lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="c1"&gt;, &amp;quot;&amp;quot;, and &amp;quot;0&amp;quot; all == false in javascript&lt;/span&gt;
    &lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assertFalsy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="cp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assertFalsy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;jt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assertFalsy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Run all the tests&lt;/span&gt;
&lt;span class="nx"&gt;TestSuite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The callback allows a user to determine how the results from the unit test should be processed or displayed.  Results could be printed to console.log, displayed on a page by adding them to the DOM, sent to a Web service with AJAX, or any arbitrary service with Web Sockets.&lt;/p&gt;
&lt;p&gt;After writing this toy framework, and explaining it to a colleague, I was told that the Rails unit tester uses almost the exact same approach.  I'd wager a few bucks that JUnit uses the Reflection API's &lt;code&gt;Class.getMethods()&lt;/code&gt; to find and run all the methods added to a TestCase class.  Only a few bucks, though.&lt;/p&gt;</summary><category term="javascript"></category><category term="testing"></category><category term="web"></category></entry><entry><title>ColorPal Alpha</title><link href="http://palebluepixel.org/2012/01/16/colorpal-alpha/" rel="alternate"></link><updated>2012-01-16T22:15:50-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-01-16:2012/01/16/colorpal-alpha/</id><summary type="html">&lt;p&gt;Introducing ColorPal!&lt;/p&gt;
&lt;p&gt;&lt;img alt="ColorPal screenshot" src="/static/images/015/ss.png" /&gt;&lt;/p&gt;
&lt;p&gt;I've been toying with color palette generation for years.  My photography website has always had some form of dynamic palette, so the theme of each page matches the photo.  You can see the current iteration &lt;a href="http://clayto.com/"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;static/images src="/static/images/015/tarsi.png" alt="clayto.com" title="My photo, 'Tarsi', at clayto.com" /&gt;&lt;/p&gt;

&lt;p&gt;I owe the idea of photo-matching website palettes to &lt;a href="http://noahgrey.com"&gt;Noah Grey&lt;/a&gt;.  Each iteration of my photo site has gotten a slightly more advanced palette generation tool.  You can see murmurs of them in the &lt;a href="/2011/11/16/html5-canvas-eyedropper/"&gt;old&lt;/a&gt; &lt;a href="/2011/11/16/html5-canvas-area-selection-averaging/"&gt;canvas&lt;/a&gt; &lt;a href="/2011/11/17/html5-tool-for-creating-color-palettes-from-an-image/"&gt;demos&lt;/a&gt; I've posted.  Sooner or later I'll make a more thorough post about the tools I've created for each iteration of the site.  Anyway, back to ColorPal.&lt;/p&gt;
&lt;p&gt;ColorPal is an HTML5 palette generation tool.  Currently it's in a very early stage, and I've only tested it in Chrome.  I have many ideas for improvements, and I'd love to hear anyone's ideas as well.  &lt;/p&gt;
&lt;p&gt;&lt;static/images src="/static/images/015/colorpal_logo.png" alt="ColorPal logo" title="" style="float: right; margin: 8px" /&gt;&lt;/p&gt;

&lt;p&gt;It's powered by &lt;a href="http://en.wikipedia.org/wiki/Canvas_element"&gt;canvas&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en/data_URIs"&gt;data URIs&lt;/a&gt;, &lt;a href="http://dev.w3.org/2006/webapi/FileAPI/"&gt;File API&lt;/a&gt;, and my homespun &lt;a href="http://en.wikipedia.org/wiki/Median_cut"&gt;median-cut&lt;/a&gt; implementation, which I'm calling &lt;em&gt;median-cut.js&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Bear in mind that while I've kept median-cut.js nice and clean, I did hammer out ColorPal as quickly as possible, so it's a mess.  Why?  I expect median-cut.js to be useful to other programmers, but ColorPal is just a tool for designers.  Or it will be, anyway. :)&lt;/p&gt;
&lt;p&gt;Here are github repos for &lt;a href="https://github.com/mwcz/ColorPal"&gt;ColorPal&lt;/a&gt; and &lt;a href="https://github.com/mwcz/median-cut-js"&gt;median-cut.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, as a reward for reading to the end, a &lt;a href="/projects/colorpal/"&gt;live demo&lt;/a&gt;!&lt;/p&gt;</summary><category term="html5"></category><category term="javascript"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>The N9, QR-Codes, and KeePassX</title><link href="http://palebluepixel.org/2012/01/08/the-n9-qr-codes-and-keepassx/" rel="alternate"></link><updated>2012-01-08T22:27:50-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2012-01-08:2012/01/08/the-n9-qr-codes-and-keepassx/</id><summary type="html">&lt;p&gt;&lt;em&gt;Update: I happened across a &lt;a href="http://keepass.info/plugins.html#qrcodegen"&gt;KeePass
plugin&lt;/a&gt; (not the same as KeePassX)
that displays passwords as QR codes, just like my hack below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Poor, glorious N9.&lt;/p&gt;
&lt;p&gt;It's impossible not to love the N9 if you're a geek, especially a programming,
bash-loving, Linux-hankering geek.  It's like a nerd talisman.  This post isn't
about the N9, specifically, so I'll save the love-fest for another time.&lt;/p&gt;
&lt;p&gt;This post is about how difficult it can be to get text (especially passwords)
onto a smartphone securely.  I've come to like the approach of using QR codes.
Most (all?) smartphones have a barcode scanner, and QR codes are one of &lt;a href="http://en.wikipedia.org/wiki/Barcode"&gt;many
convenient ways&lt;/a&gt; to encode text into an
image.  In the case of the N9, it's
&lt;a href="http://store.ovi.com/content/231518"&gt;MeeScan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="meescan" src="/static/images/011/meescan.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fukuchi.org/works/qrencode/index.html.en"&gt;qrencode&lt;/a&gt; is an extremely
easy to use encoder.  Pass it a string, it produces an image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;qrencode &amp;quot;mypassword&amp;quot; -o mypass.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://keepassx.org"&gt;KeePassX&lt;/a&gt; is an excellent password manager.
Unfortunately...&lt;/p&gt;
&lt;p&gt;&lt;img alt="KeePassX not in N9" src="/static/images/011/keepass_not_in_n9.png" /&gt;&lt;/p&gt;
&lt;p&gt;Sadly, there is no KeePassX client on the N9.  At least, not yet.  Even if
there were, I'm skeptical that it's a good idea at all to be carrying around a
database of personal passwords on a smartphone.  It's encrypted, sure, but
touchscreen keyboards encourage weak passphrases.  Who wants to enter a 64+
character passphrase on a &lt;abbr title="Virtual keyboard"&gt;vkbd&lt;/abbr&gt;?&lt;/p&gt;
&lt;p&gt;This evening, I spent about an hour hacking QR-code support into KeePassX.
It's a seriously messy hack, using
&lt;a href="http://en.cppreference.com/w/cpp/utility/program/system"&gt;system()&lt;/a&gt; to call
&lt;code&gt;qrencode&lt;/code&gt;, pass in the password, then call
&lt;a href="http://projects.gnome.org/evince/?guid=ON"&gt;evince&lt;/a&gt; to view it.  Even worse, I
just tacked it onto the "Copy Password" function, instead of figuring out how
to create a new menu item.  It doesn't even delete the generated image after
viewing.  Definitely nothing more than a proof of concept.&lt;/p&gt;
&lt;p&gt;Here it is in action.&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/011/keepassx_demo.png"&gt;&lt;static/images class="grid_7"
src="/static/images/011/keepassx_demo.png" alt="KeePassX generating a QR code" title=""
/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="clear"&gt;&lt;/div&gt;

&lt;p&gt;I won't be distributing my mod unless someone &lt;em&gt;really&lt;/em&gt; wants it, but it would
be cool to see this available as plugin to any password managers that support
plugins.  It could be handy to have clipboard managers generate QR codes too.&lt;/p&gt;</summary><category term="general"></category><category term="keepass"></category><category term="n9"></category></entry><entry><title>Bouncey returns - more canvas physics</title><link href="http://palebluepixel.org/2011/11/17/bouncey-returns-more-canvas-physics/" rel="alternate"></link><updated>2011-11-17T22:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:2011/11/17/bouncey-returns-more-canvas-physics/</id><summary type="html">&lt;p&gt;This is a slightly upgraded version of the physics demo I showed in my &lt;a href="/2011/11/17/bouncey---canvas-physics/"&gt;last post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is still...&lt;/p&gt;
&lt;p&gt;&lt;quote&gt;"a buggy, rudimentary, just-for-fun javascript physics simulator."&lt;/quote&gt;&lt;/p&gt;
&lt;p&gt;This version has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pre-defined initial states&lt;/li&gt;
&lt;li&gt;gravity&lt;/li&gt;
&lt;li&gt;friction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It still has the "clinging" bug.  I know how to fix it, but didn't deem it important enough to spend time on it. :)&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/mwcz/bouncey/blob/master/bounce.html"&gt;code&lt;/a&gt; is well commented, so feel free to hack on it.&lt;/p&gt;
&lt;p&gt;Click on one of the initial states to begin the simulation.&lt;/p&gt;
&lt;style type="text/css"&gt;
#cnvs {
    margin: 0 auto;
    border: 1px solid black;
    -webkit-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
       -moz-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
         -o-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
            box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
}
&lt;/style&gt;

&lt;script type="text/javascript" src="/static/js/008/bouncey.js"&gt;&lt;/script&gt;

&lt;p&gt;Initial states:
&lt;button onclick="RANDOM();"&gt;Random&lt;/button&gt;
&lt;button onclick="POOL();"&gt;POOL&lt;/button&gt;
&lt;button onclick="HEAD_ON_COLLISION();"&gt;HEAD_ON_COLLISION&lt;/button&gt;&lt;/p&gt;
&lt;canvas id="cnvs" width="500" height="375"&gt; 
    Sorry, your browser does not support HTML5 canvas.  Lame.
&lt;/canvas&gt;

&lt;p&gt;&lt;button onclick="paused++;paused%=2;"&gt;Pause&lt;/button&gt; &lt;/p&gt;
&lt;pre&gt;
  velocity sum: &lt;span id="txt_velocity_sum"&gt;NONE&lt;/span&gt;
x velocity sum: &lt;span id="txt_velocity_sum_x"&gt;NONE&lt;/span&gt;
y velocity sum: &lt;span id="txt_velocity_sum_y"&gt;NONE&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;(The POOL initial state reproduces the clinging bug.)&lt;/p&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="physics"></category><category term="javascript"></category><category term="bouncey"></category><category term="web"></category></entry><entry><title>HTML5 tool for creating color palettes from an image</title><link href="http://palebluepixel.org/2011/11/17/html5-tool-for-creating-color-palettes-from-an-image/" rel="alternate"></link><updated>2011-11-17T22:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:2011/11/17/html5-tool-for-creating-color-palettes-from-an-image/</id><summary type="html">&lt;p&gt;For an &lt;a href="http://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction"&gt;HCI&lt;/a&gt; class project in Fall 2009, I pulled together some of my previous demos to make this integrated tool.  It was just a prototype, and I haven't taken the time to get the code set up and working on this blog.  If anyone is interested, I can dig up the code and send it along.&lt;/p&gt;
&lt;iframe width="580" height="550" src="http://www.youtube.com/embed/p9QiGPUiXdc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In retrospect, it really could have used some narration...&lt;/p&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>Bouncey - canvas physics</title><link href="http://palebluepixel.org/2011/11/17/bouncey-canvas-physics/" rel="alternate"></link><updated>2011-11-17T21:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:2011/11/17/bouncey-canvas-physics/</id><summary type="html">&lt;p&gt;This is Bouncey.  It's a simple physics demo I wrote in early/mid 2011, with some contributions and bugfixes from my good friend Greg Gardner.&lt;/p&gt;
&lt;p&gt;The description for &lt;a href="https://github.com/mwcz/bouncey"&gt;bouncey's github repo&lt;/a&gt; is:&lt;/p&gt;
&lt;p&gt;&lt;quote&gt;"a buggy, rudimentary, just-for-fun javascript physics simulator."&lt;/quote&gt;&lt;/p&gt;
&lt;p&gt;It covers &lt;a href="http://en.wikipedia.org/wiki/Newton's_laws_of_motion"&gt;Newton's laws of motion&lt;/a&gt;.&lt;/p&gt;
&lt;style type="text/css"&gt;
#cnvs {
    margin: 0 auto;
    border: 1px solid black;
    -webkit-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
       -moz-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
         -o-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
            box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
}
&lt;/style&gt;

&lt;script type="text/javascript" src="/static/js/007/bouncey.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

window.onload = function() {

    canvas_element        = document.getElementById('cnvs');
    canvas_element.width  = W;
    canvas_element.height = H;

    canvas = canvas_element.getContext('2d');

    // create some squares with random velocities in the center of the canvas
    // objects are stored in the format 
    //      [ X, Y, X_velocity, Y_velocity, width, height, [R,G,B] ]
    var x, y, w, h, v_x, v_y, r, g, b, new_obj;

    // calculate all the possible initial y positions
    y_positions = [];
    for( var i = OBJ_HEIGHT; i &lt; H - OBJ_HEIGHT; i += 2 * OBJ_HEIGHT )
        y_positions.push( i );

    // calculate all the possible initial x positions
    x_positions = [];
    for( var i = OBJ_WIDTH; i &lt; W - OBJ_WIDTH; i += 2 * OBJ_WIDTH )
        x_positions.push( i );

    /*
    */
    for( var i = 0; i &lt; 40; ++i ) {

        // create values for the object
        x   = x_positions[ i % x_positions.length ];
        y   = y_positions[ Math.floor( i / x_positions.length ) % y_positions.length ];
        v_x = Math.random() * OBJ_MAX_VELOCITY*2 - OBJ_MAX_VELOCITY;
        v_y = Math.random() * OBJ_MAX_VELOCITY*2 - OBJ_MAX_VELOCITY;
        r   = Math.floor( Math.random() * 200 + 55 ); // random value 55..255
        g   = Math.floor( Math.random() * 200 + 55 );
        b   = Math.floor( Math.random() * 200 + 55 );

        // add the object to the scene
        var color = 'rgb(' + r + ',' + g + ',' + b + ')';
        var new_obj = new Circle( x, y, OBJ_R, v_x, v_y, color );

        objs.push( new_obj );
    }

    setInterval( make_frame, PERIOD );

}

&lt;/script&gt;

&lt;p&gt;&lt;button onclick="paused++;paused%=2;"&gt;Pause&lt;/button&gt; &lt;/p&gt;
&lt;canvas id="cnvs" width="500" height="375"&gt; 
    Sorry, your browser does not support HTML5 canvas.  Lame.
&lt;/canvas&gt;

&lt;p&gt;An updated (but less colorful) version of bouncey is available &lt;a href="{008 - bouncey returns.md}" title="newer bouncey"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="physics"></category><category term="javascript"></category><category term="bouncey"></category><category term="web"></category></entry><entry><title>How not to use CSS3</title><link href="http://palebluepixel.org/2011/11/17/how-not-to-use-css3/" rel="alternate"></link><updated>2011-11-17T20:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:2011/11/17/how-not-to-use-css3/</id><summary type="html">&lt;p&gt;How to ruin a good thing...&lt;/p&gt;
&lt;p&gt;Try refreshing.&lt;/p&gt;
&lt;style type="text/css"&gt;

.css3_demo {
    font-family: FreeSansBold;
    text-align: center;
    color: #efefef;
    position: relative;
    top: 0;
    left: 50px;
    font-size: 9em;
    padding: 0;
}

@font-face { font-family: "FreeSansBold"; src: url("FreeSansBold.ttf"); }

&lt;/style&gt;

&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

// Random factors to determine x/y offsets for text shadows and amount of blur
var x_factor    = Math.floor( Math.random() * 20 ) - 10;
var y_factor    = Math.floor( Math.random() * 20 ) - 10;
var blur_factor = Math.floor( Math.random() * 10 ) + 1;

// Pretty colors
var the_colors = 
                [
                '#7f9f7f',
                '#dca3a3',
                '#80d4aa',
                '#f8f893',
                '#ffcfaf',
                '#e89393',
                '#9ece9e',
                '#c0bed1',
                '#6c6c9c',
                '#71d3b4',
                '#a0afa0',
                '#efefef'
                ];

function make_it() { // MAKE IT SHINE
    // Build a string containing a comma-delimited list of the each shadow we want to apply
    // sprintf would be nice here.
    var shadows = "";
    for( var color_index in the_colors ) {
        shadows += 
            color_index * x_factor + "px " + 
            color_index * y_factor + "px " + 
            color_index * blur_factor + "px " + 
            the_colors[ color_index ];

        // Add a comma unless we're at the end of the color set
        if( color_index != the_colors.length - 1 )
            shadows += ',';
    }
    $('.css3_demo').css( 'textShadow', shadows ); // apply the new style
    the_colors.push( the_colors.shift() ); // move first color to the end of the list
    //console.log( shadows );
    setTimeout( 'make_it()', 50 ); // make the function async (kinda... effectively...) with setTimeout()
}

function move_it() { // MAKE IT MOVE
    /* uncomment this to make it move up and down...
    $('.css3_demo').animate( {top:'+=200'},2000, "linear" )
           .animate( {top:'-=200'},2000, "linear", move_it );
    */
}

$(document).ready( function() {
    make_it();
    move_it();
});
&lt;/script&gt;

&lt;p&gt;&lt;span class="css3_demo"&gt;CSS3!&lt;/span&gt; &lt;/p&gt;</summary><category term="html5"></category><category term="css3"></category><category term="typography"></category><category term="web"></category></entry><entry><title>HTML5 canvas point operations</title><link href="http://palebluepixel.org/2011/11/17/html5-canvas-point-operations/" rel="alternate"></link><updated>2011-11-17T19:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-17:2011/11/17/html5-canvas-point-operations/</id><summary type="html">&lt;p&gt;This is the last demo I made using &lt;a href="https://github.com/mwcz/jsimage"&gt;JSImage&lt;/a&gt;.  I created it some time around 2009-2010.  At the time, I had checked out an &lt;a href="http://www.amazon.com/Digital-Image-Processing-Algorithmic-Introduction/dp/1846283795"&gt;imaging book&lt;/a&gt; from my university's library at least ten times.  Most of the exercises in that book I implemented in Python using &lt;a href="http://www.pythonware.com/products/pil/"&gt;PIL&lt;/a&gt;, but point operations were simple enough to port to JavaScript quickly.&lt;/p&gt;
&lt;p&gt;Point operations are image alterations that affect all pixels equally.  Other operations, like blurring for example, each result pixel depends on adjacent pixels.&lt;/p&gt;
&lt;p&gt;This demonstrates changing contrast, value, saturation, hue, color inversion, and threshold point operations.  Note that there is a bug with increasing value and increasing saturation which I never got around to fixing.&lt;/p&gt;
&lt;script type="text/javascript" src="/static/js/005/jsimage.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="/static/js/005/colorspace.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

    var IJS_PointOps;
    $(document).ready( function() {
        IJS_PointOps = new JSImage( "IJS_PointOps", "/static/images/005/bee.jpg" );
    });

&lt;/script&gt;

&lt;style type="text/css" media="screen"&gt;
    .btn-group .glyphicon { margin-right: 0 }
    .point-ops-demo { font-size: 0.9em }
    .form-control.threshold { width: 4em }
&lt;/style&gt;

&lt;canvas class="img-responsive" id="IJS_PointOps"&gt;your browser does not support canvas&lt;/canvas&gt;

&lt;div class="row point-ops-demo"&gt;

    &lt;div class="col-xs-6"&gt;
        Value (Brightness)
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.value( IJS_PointOps.canvas, 10 )"&gt;&lt;i class="glyphicon glyphicon-arrow-up"&gt;&lt;/i&gt;&lt;/button&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.value( IJS_PointOps.canvas, -10 )"&gt;&lt;i class="glyphicon glyphicon-arrow-down"&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="col-xs-6"&gt;
        Contrast
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.contrast( IJS_PointOps.canvas, 1.1)" &gt;&lt;i class="glyphicon glyphicon-arrow-up"&gt;&lt;/i&gt;&lt;/button&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.contrast( IJS_PointOps.canvas, 0.9)" &gt;&lt;i class="glyphicon glyphicon-arrow-down"&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="col-xs-6"&gt;
        Saturation
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.saturation( IJS_PointOps.canvas, 25 )" &gt;&lt;i class="glyphicon glyphicon-arrow-up"&gt;&lt;/i&gt;&lt;/button&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.saturation( IJS_PointOps.canvas, -25 )" &gt;&lt;i class="glyphicon glyphicon-arrow-down"&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="col-xs-6"&gt;
        Hue
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.hue( IJS_PointOps.canvas, 20)" &gt;&lt;i class="glyphicon glyphicon-arrow-up"&gt;&lt;/i&gt;&lt;/button&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.hue( IJS_PointOps.canvas, -20)" &gt;&lt;i class="glyphicon glyphicon-arrow-down"&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="col-xs-6"&gt;
        &lt;br /&gt;
        &lt;div class="btn-group"&gt;
            &lt;button class="btn btn-default" onmousedown="IJS_PointOps.invert()"&gt;Invert&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="col-xs-6"&gt;
        &lt;br /&gt;
        &lt;div class="input-group"&gt;
            &lt;span class="input-group-btn"&gt;
                &lt;button class="btn btn-default" onmousedown="IJS_PointOps.threshold( IJS_PointOps.canvas, document.getElementById('t').value )"&gt;Threshold&lt;/button&gt;
            &lt;/span&gt;
            &lt;input type="text" value="127" class="form-control threshold" maxlength="3" size="3" id="t" /&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="col-xs-6"&gt;
        &lt;br /&gt;
        &lt;button class="btn btn-default" onclick="IJS_PointOps = new JSImage( 'IJS_PointOps', '/static/images/005/bee.jpg' );"&gt;Reset&lt;/button&gt;
    &lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="image processing"></category><category term="jsimage"></category><category term="web"></category><category term="javascript"></category></entry><entry><title>HTML5 canvas area selection averaging</title><link href="http://palebluepixel.org/2011/11/16/html5-canvas-area-selection-averaging/" rel="alternate"></link><updated>2011-11-16T18:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-16:2011/11/16/html5-canvas-area-selection-averaging/</id><summary type="html">&lt;p&gt;This is a demo from late 2009.  It's an extension of the single-pixel &lt;a href="/2011/11/16/html5-canvas-eyedropper/"&gt;eyedropper&lt;/a&gt; I wrote previously.&lt;/p&gt;
&lt;p&gt;It's powered by an early version of an old JS toolkit I wrote called JSImage.  The latest version is available at my &lt;a href="https://github.com/mwcz/jsimage"&gt;JSImage github repo&lt;/a&gt;.  Don't be fooled by the 2011 commits, those are just artifacts from svn-&amp;gt;git migration.  No guarantees that the histo's are actually correct. :)&lt;/p&gt;
&lt;p&gt;I used an old version of a rectangular selection tool called marquee.  I believe it's still located &lt;a href="http://marqueetool.net/"&gt;here&lt;/a&gt; but I can't be totally sure that's the same project.&lt;/p&gt;
&lt;p&gt;Click, drag, and taste the magic. :|&lt;/p&gt;
&lt;canvas id="c0"&gt;
    Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
&lt;/canvas&gt;

&lt;style type="text/css"&gt;
    canvas {
        margin     : 0 auto;
        outline    : 36px solid black;
        margin     : 46px auto;
        transition : 0.1168s all ease;
        display    : block;
        cursor     : crosshair;
    }
&lt;/style&gt;

&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="/static/css/004/marker.css" /&gt;&lt;/p&gt;
&lt;script type="text/javascript" src="/static/js/004/marquee/prototype_reduced.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="/static/js/004/marquee/rectmarquee.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="/static/js/004/JSImage.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

$(function() {

    images0 = new JSImage( "c0", "/static/images/004/kazoo.png" );
    setTimeout(function(){images0.draggable();},100); // enable the selection

});

&lt;/script&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="jsimage"></category><category term="colorpal"></category><category term="web"></category><category term="javascript"></category></entry><entry><title>HTML5 canvas RGB histogram</title><link href="http://palebluepixel.org/2011/11/16/html5-canvas-rgb-histogram/" rel="alternate"></link><updated>2011-11-16T17:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-16:2011/11/16/html5-canvas-rgb-histogram/</id><summary type="html">&lt;p&gt;This is yet another demo from around 2009.  It's simple enough.  Click a
button, draw an unbinned RGB histogram of the source image.&lt;/p&gt;
&lt;p&gt;It's powered by an early version of an old JS toolkit I wrote called JSImage.
The latest version is available at my &lt;a href="https://github.com/mwcz/jsimage"&gt;JSImage github
repo&lt;/a&gt;.  Don't be fooled by the 2011 commits,
those are just artifacts from svn-&amp;gt;git migration.  No guarantees that the
histo's are actually correct. :)&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
    &lt;div class="panel-heading"&gt;
        &lt;b&gt;Original image&lt;/b&gt;
    &lt;/div&gt;
    &lt;div class="panel-body"&gt;
        &lt;canvas id="c0"&gt;
            Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
        &lt;/canvas&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;input type="button" onclick="draw_histo()" value="Draw histograms" /&gt;&lt;/p&gt;
&lt;div class="row"&gt;
    &lt;div class="col-xs-12 col-sm-4"&gt;
    &lt;div class="panel panel-default"&gt;
        &lt;div class="panel-heading"&gt;
            &lt;b&gt;Red&lt;/b&gt;
        &lt;/div&gt;
        &lt;div class="panel-body"&gt;
            &lt;canvas class="img-responsive" id="cr"&gt;
                Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
            &lt;/canvas&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-12 col-sm-4"&gt;
        &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading"&gt;
                &lt;b&gt;Green&lt;/b&gt;
            &lt;/div&gt;
            &lt;div class="panel-body"&gt;
                &lt;canvas class="img-responsive" id="cg"&gt;
                    Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
                &lt;/canvas&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-12 col-sm-4"&gt;
        &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading"&gt;
                &lt;b&gt;Blue&lt;/b&gt;
            &lt;/div&gt;
            &lt;div class="panel-body"&gt;
                &lt;canvas class="img-responsive" id="cb"&gt;
                    Your browser does not support the &amp;lt;canvas&amp;gt; element. Lame.
                &lt;/canvas&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p class="alert alert-info"&gt;I'm pretty sure the results are wrong, but here, years later, I can't be bothered to fix it. ;)&lt;/p&gt;

&lt;script type="text/javascript" src="/static/js/003/JSImage.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;

var draw_histo;
$(function () {

    var images0 = new JSImage( "c0", "/static/images/003/kazoo.png" );
    var imagesr = new JSImage( "cr", "/static/images/003/kazoo.png" );
    var imagesg = new JSImage( "cg", "/static/images/003/kazoo.png" );
    var imagesb = new JSImage( "cb", "/static/images/003/kazoo.png" );

    draw_histo = function () {

        /**
         * Color histo canvases the color of their histo
         */
        images0.histo( imagesr.canvas, 'r', 'rgba(255,0,0,0.9)', 'rgba(0,0,0,0.8)' );
        images0.histo( imagesg.canvas, 'g', 'rgba(0,200,0,0.9)', 'rgba(0,0,0,0.8)' );
        images0.histo( imagesb.canvas, 'b', 'rgba(0,0,200,0.9)', 'rgba(0,0,0,0.8)' );

    };


});
&lt;/script&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="jsimage"></category><category term="web"></category><category term="javascript"></category></entry><entry><title>HTML5 canvas 3D pixel array</title><link href="http://palebluepixel.org/2011/11/16/html5-canvas-3d-pixel-array/" rel="alternate"></link><updated>2011-11-16T16:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-16:2011/11/16/html5-canvas-3d-pixel-array/</id><summary type="html">&lt;p&gt;This is another demo from 2009-ish.  When I started experimenting with canvas, I felt uncomfortable with the 1-dimensionality of &lt;a href="https://developer.mozilla.org/en/DOM/CanvasPixelArray"&gt;CanvasPixelArray&lt;/a&gt;.  I wrote this script to convert it into a more logical format: X by Y by RGBA.  Let me rephrase that.  By "more logical", I mean "more logical, &lt;em&gt;to me&lt;/em&gt;, &lt;em&gt;at the time&lt;/em&gt;).  1D is fine, and I can't think of any use for this script.  But, nonetheless, here it is, including the original description.&lt;/p&gt;
&lt;script type="text/javascript"&gt;

$(function() {
    var c;
    var cnvs;

    function draw() {

        cnvs = document.getElementById("c");
        tmpl = document.getElementById("t");

        if( cnvs.getContext) { // Check for canvas support

            c = cnvs.getContext('2d');
            t = tmpl.getContext('2d');
            var color = document.getElementById("color");

            var images = new Image();

            images.onload = function() {
                cnvs.width = images.width;
                cnvs.height = images.height; // resize to fit image
                tmpl.width = images.width;
                tmpl.height = images.height; // resize to fit image
                c.drawImage( images, 0, 0 );
            }
            images.src = "/static/images/002/kazoo.png";

            getpixelarray = function() {
                var pixarray = new Array();
                var imagesdata = c.getImageData( 0, 0, cnvs.width, cnvs.height ).data;

                /**
                 * getImageData() returns a one-dimensional array where each element represents,
                 * one subpixel.  So a full set of pixels looks like this:
                 *
                 *      (R, G, B, A, R, G, B, A, R, G, B, A, ...)
                 *
                 * Ugly, right?  Yeah.  So I'm translating them into a 2D array where the origin
                 * (sadly) is at the top left.
                 *
                 * When doing the translation, I'm also starting at the bottom right, so there
                 * only has to be ONE array enlarge operation each for the X and Y arrays.
                 */

                // build empty pix array.  we'll fill it later
                //console.time("build empty array");
                for( var x = cnvs.width-1; x &gt;= 0; x-- ) {

                    pixarray[x] = new Array(); // insert new vertical array

                    for( var y = cnvs.height-1; y &gt;= 0; y-- ) {

                        pixarray[x][y] = new Array(0,0,0,0);

                    }

                }


                /**
                 * Now we fill up the pix array with real values.
                 * We don't REALLY need the alpha channel, but I'm including it
                 * just in case a use arises for it in the future.  Likely.
                 */

                for( var i = 0; i &lt; imagesdata.length-3; i+=4 ) {
                    var x = parseInt( parseInt(i/4) % ( cnvs.width ) );
                    var y = parseInt( parseInt(i/4) / ( cnvs.width ) );

                    pixarray[x][y][0] = imagesdata[i];
                    pixarray[x][y][1] = imagesdata[i+1];
                    pixarray[x][y][2] = imagesdata[i+2];
                    pixarray[x][y][3] = imagesdata[i+3];

                }


                for( var y = 0; y &lt; cnvs.height; y++ ) { // loop over y
                    for( var x = 0; x &lt; cnvs.width; x++ ) { // loop over x
                        t.fillStyle = "rgba(" + pixarray[x][y][0] + "," + pixarray[x][y][1] + "," + pixarray[x][y][2] + "," + pixarray[x][y][3] + ")";
                        t.fillRect(x, y, 1, 1);
                    }
                }

                return pixarray;
            }


        }
    }
    draw();

});
&lt;/script&gt;

&lt;h1&gt;canvas pixarray&lt;/h1&gt;
&lt;p&gt;After loading an image file into a &amp;lt;canvas&amp;gt; element, you can retrieve its
pixels with &lt;code&gt;getImageData()&lt;/code&gt;.  The problem (not really a problem, more an
inconvenience) is that the array of pixels is one-dimensional.  &lt;code&gt;getImageData&lt;/code&gt; returns pixels in the following format:&lt;/p&gt;
&lt;pre&gt;
( R&lt;sub&gt;0&lt;/sub&gt;, G&lt;sub&gt;0&lt;/sub&gt;, B&lt;sub&gt;0&lt;/sub&gt;, A&lt;sub&gt;1&lt;/sub&gt;, R&lt;sub&gt;1&lt;/sub&gt;, G&lt;sub&gt;1&lt;/sub&gt;, B&lt;sub&gt;1&lt;/sub&gt;, A&lt;sub&gt;1&lt;/sub&gt;, ... )
&lt;/pre&gt;

&lt;p&gt;As a human, that's really tough to work with, so this script converts that to a more
logical 3D array (X by Y by RGBA)&lt;/p&gt;
&lt;p&gt;&lt;input class="btn btn-primary" type="button" value="Convert 1D pixel array into 3D pixel array" onclick="getpixelarray();" /&gt;&lt;/p&gt;
&lt;div class="row"&gt;
    &lt;div class="col-xs-6"&gt;
        &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading"&gt;
                &lt;b&gt;
                    Image drawn directly from image file
                &lt;/b&gt;
            &lt;/div&gt;
            &lt;div class="panel-body"&gt;
                &lt;canvas class="img-responsive" id="c" width="650" height="250"&gt;
                    Your browser does not support the &amp;lt;canvas&amp;gt; element.
                    Lame.
                &lt;/canvas&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-6"&gt;
        &lt;div class="panel panel-default"&gt;
            &lt;div class="panel-heading"&gt;
                &lt;b&gt;
                    Image drawn from the 3D image array
                &lt;/b&gt;
            &lt;/div&gt;
            &lt;div class="panel-body"&gt;
                &lt;canvas class="img-responsive" id="t" width="650" height="250"&gt;
                    Your browser does not support the &amp;lt;canvas&amp;gt; element.
                    Lame.
                &lt;/canvas&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>HTML5 Canvas eyedropper</title><link href="http://palebluepixel.org/2011/11/16/html5-canvas-eyedropper/" rel="alternate"></link><updated>2011-11-16T15:25:00-05:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-11-16:2011/11/16/html5-canvas-eyedropper/</id><summary type="html">&lt;style type="text/css"&gt;
    canvas {
        margin        : 0 auto;
        border-width  : 36px;
        border-style  : solid;
        border-radius : 16px;
        transition    : 0.1168s all ease;
        margin        : 0 auto;
        display       : block;
        cursor        : crosshair;
    }
&lt;/style&gt;

&lt;script type="text/javascript"&gt;

$(function() {
var c;
var cnvs = document.getElementById("c");

if( cnvs.getContext) { // Check for canvas support
// DRAW FUN STUFF!

    c = cnvs.getContext('2d');
    var color = document.getElementById("color");
    var colorcode = document.getElementById("colorcode");

    var images = new Image();

    images.onload = function() {
        cnvs.width = images.width;cnvs.height = images.height; // resize to fit image
        c.drawImage( images, 0, 0 );
    }
    images.src = "/static/images/001/kazoo.png";

    pixel = function(e) {

        // find the element's position
        var x = 0;
        var y = 0;
        var o = cnvs;
        do {
            x += o.offsetLeft;
            y += o.offsetTop;
        } while (o = o.offsetParent);

        x = e.pageX - x - 36; // 36 = border width
        y = e.pageY - y - 36; // 36 = border width
        var imagesdata = c.getImageData( x, y, 1, 1 );
        var new_color = [ imagesdata.data[0], imagesdata.data[1], imagesdata.data[2] ];
        cnvs.style.borderColor = "rgb("+new_color+")";
        colorcode.innerHTML = "rgb("+new_color+")";
    }

    cnvs.onmousedown = function(e) {
        cnvs.onmousemove = pixel; // fire pixel() while user is dragging
        cnvs.onclick = pixel; // only so it will still fire if user doesn't drag at all
    }

    cnvs.onmouseup = function() {
        cnvs.onmousemove = null;
    }

}
});

&lt;/script&gt;

&lt;p&gt;This is an old demo I made of an &lt;a href="http://en.wikipedia.org/wiki/Canvas_element"&gt;HTML5 canvas&lt;/a&gt; eyedropper.  Circa 2009, I believe.  Just click and drag on the image to see it in action.&lt;/p&gt;
&lt;p&gt;&lt;span id="colorcode"&gt;rgb(0,0,0)&lt;/span&gt;&lt;/p&gt;
&lt;canvas id="c"&gt;Sorry, in order to view this demo you need a Web browser that supports HTML5 canvas.&lt;/canvas&gt;

&lt;p&gt;It's a pretty simple script, and works by declaring this function which handles onclick and ondrag events from the canvas.  cnvs is the canvas element, and c is the canvas's 2D rendering context object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;pixel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// calculate the x and y coordinates of the cursor&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;imagesdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;new_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;imagesdata.data&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="nx"&gt;imagesdata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="nx"&gt;imagesdata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rgb(&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;new_color&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's just a summary; the function actually does a little more than that.  Take a look at the source for this page if you're interested.&lt;/p&gt;</summary><category term="html5"></category><category term="canvas"></category><category term="color"></category><category term="colorpal"></category><category term="web"></category></entry><entry><title>Opcode patterns 70% finished</title><link href="http://palebluepixel.org/2011/10/13/opcode-patterns-70-finished/" rel="alternate"></link><updated>2011-10-13T22:27:50-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-10-13:2011/10/13/opcode-patterns-70-finished/</id><summary type="html">&lt;p&gt;genlut.py is really filling out.  It generates the LUT for all 68k opcodes (68000 only), and I'm about 70% done.  77 down, 34 to go.&lt;/p&gt;
&lt;p&gt;The OPCODES dict defines the first two bytes of each opcode, both static bits and operands.  The operand strings act as keys into the PATTERNS struct, which contains all possible values for each operand.&lt;/p&gt;
&lt;p&gt;The recursive function gen() is fed an opcode pattern which may contain operand strings as well as static bits.  Some operand patterns contain other operand patterns, so gen() keeps recursing until all operand patterns are gone.  Once a set of totally static bits has been created, those bits are added to INSTRUCTIONS, along with the name of the opcode.&lt;/p&gt;
&lt;p&gt;The PATTERNS, OPCODES, and INSTRUCTIONS dicts are all named poorly, and the whole solution  isn't ultra-elegant, but it does follow the structure of the 68k PRM pretty intuitively and is easy to edit.  Once it's complete, I should never need to run it again.&lt;/p&gt;
&lt;p&gt;(This post was copied from my old &lt;a href="http://aejs.blogspot.com/"&gt;AEJS blog&lt;/a&gt;)&lt;/p&gt;</summary><category term="aejs"></category><category term="html5"></category><category term="javascript"></category><category term="amiga"></category><category term="web"></category></entry><entry><title>LUT</title><link href="http://palebluepixel.org/2011/09/22/lut/" rel="alternate"></link><updated>2011-09-22T22:27:50-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-09-22:2011/09/22/lut/</id><summary type="html">&lt;p&gt;Decoding is easy. Decoding requires a lot of typing. (I am starting to believe this is true of ever aspect of interpreted emulation...)&lt;/p&gt;
&lt;p&gt;For the AEJS decoder, I am creating a &lt;a href="http://en.wikipedia.org/wiki/Lookup_table"&gt;look-up table&lt;/a&gt; with every possible pattern for each instruction. It was my first idea, but I initially discarded it as "wasteful and inelegant". Later, I accepted it as "really fast".&lt;/p&gt;
&lt;p&gt;I'm generating a large set of bit patterns that map to 68k opcodes, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0100101011111010 -&amp;gt; BGND
0100101011111100 -&amp;gt; ILLEGAL
0100111001110000 -&amp;gt; RESET
0100111001110001 -&amp;gt; NOP
0100111001110010 -&amp;gt; STOP
0100111001110011 -&amp;gt; RTE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The current code can be found &lt;a href="https://github.com/mwcz/AEJS/blob/master/src/genlut.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's written in Python and yes, AEJS is a JavaScript project.  There's a reason.  I see two approaches to generating the LUT (look-up table).&lt;/p&gt;
&lt;h2&gt;Generate the LUT on launch (dynamic)&lt;/h2&gt;
&lt;p&gt;This has the advantage of being easier to debug.  It also might be easier if I ever expand the emulator to other chips, like the &lt;a href="http://en.wikipedia.org/wiki/Motorola_68020"&gt;68020&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Motorola_68030"&gt;68030&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It currently takes about 0.466 seconds on my machine to generate ~12,000 patterns.  That means it should take less than 2.5s to generate the full LUT.&lt;/p&gt;
&lt;h2&gt;Generate the LUT pre-launch (static)&lt;/h2&gt;
&lt;p&gt;This is what I'm currently working toward.  genlut.py is currently generating about 12,000 opcode bit patterns out of a max of I'm-not-sure-yet-but-slightly-less-than-65,536.&lt;/p&gt;
&lt;p&gt;With this method, I would run genlut.py one final time, pipe the output into a static JS file, and regex the contents into a JS array.  The LUT would never have to be generated again, and would exist happily forever-after.&lt;/p&gt;
&lt;p&gt;Cons: relies upon the LUT being 100% correct, as any errors would be hard to debug, and would require another run of genlut.py to fix.&lt;/p&gt;
&lt;p&gt;Pros: AEJS will launch faster without having to generate the LUT each time.  If I can verify that the LUT is 100% correct, this is obviously the right approach.&lt;/p&gt;
&lt;p&gt;I'll continue on with the static method for now, and odds are I'll stick with it.   2.5s is too big a price to pay.&lt;/p&gt;
&lt;p&gt;Back to work:&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/013/workarea.png"&gt;&lt;static/images class="grid_7" src="/static/images/013/workarea.png" alt=":)" title="" /&gt;&lt;/a&gt;
&lt;div class="clear"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;(This post was copied from my old &lt;a href="http://aejs.blogspot.com/"&gt;AEJS blog&lt;/a&gt;)&lt;/p&gt;</summary><category term="aejs"></category><category term="html5"></category><category term="javascript"></category><category term="amiga"></category><category term="web"></category></entry><entry><title>Introducing AEJS</title><link href="http://palebluepixel.org/2011/09/20/introducing-aejs/" rel="alternate"></link><updated>2011-09-20T22:27:50-04:00</updated><author><name>mwcz</name></author><id>tag:palebluepixel.org,2011-09-20:2011/09/20/introducing-aejs/</id><summary type="html">&lt;p&gt;Introducing AEJS, an Amiga emulator written in JavaScript.  Wait, wording it like that makes it sound like it's finished.  It isn't.  It won't be for a long time.  AEJS is just a hobby, and will never hold a candle to UAE.&lt;/p&gt;
&lt;p&gt;Why the Amiga?  Given that this is my first emulator, it would have been much easier to go with a 6502 or 8080 instead, but I didn't grow up with those; I grew up with a 68k powering an Amiga 500.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://starringthecomputer.com/feature.php?f=122"&gt;&lt;static/images src="/static/images/012/stepfather_iii_amiga_500_2.jpg" alt="Amiga 500 in Stepfather III" title="" /&gt;&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why JavaScript?  Fabrice Bellard didn't make any excuses for writing an x86 emulator in JavaScript, so I won't either.&lt;/p&gt;
&lt;p&gt;I'll be using this blog to share updates on the project.  Progress, problems, etc.  Anyone with interest or knowledge of 68k arch or Amiga chipsets is welcome to get involved.&lt;/p&gt;
&lt;p&gt;Next up: completing the code to generate an opcode lookup table.&lt;/p&gt;
&lt;p&gt;(This post was copied from my old &lt;a href="http://aejs.blogspot.com/"&gt;AEJS blog&lt;/a&gt;)&lt;/p&gt;</summary><category term="aejs"></category><category term="html5"></category><category term="javascript"></category><category term="amiga"></category><category term="web"></category></entry></feed>